<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> <html><head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> <title>Dive Into Python</title><link rel="stylesheet" href="/css/diveintopython.css" type="text/css" /><link rev="made" href="josh@servercobra.com" /><meta name="generator" content="DocBook XSL Stylesheets V1.36" /> <meta name="keywords" content="Python, Dive Into Python, tutorial, object-oriented, programming, documentation, book, free" /> <meta name="description" content="a free Python tutorial for experienced programmers" /><script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-9740779-18']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script></head> <body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<hr /> <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr> <td valign="top" width="35%"><a href="http://kr.diveintopython.net/html/chapter4.htm"><<&nbsp;靈 4 � HTML 庚靴</a></td> <td align="center" valign="top" width="30%"><a href="http://kr.diveintopython.net/html/index.htm">�    量</a></td> <td align="right" valign="top" width="35%"><a href="http://kr.diveintopython.net/html/appendix.htm">쇰    刷&nbsp;>></a></td> </tr></table> <hr /> <h2><a name="roman"></a>靈 5 �. 傑� �맑�</h2> <a name="roman.divein"></a><h2><a name="roman.divein"></a>5.1. ヴ健�� ��≠�</h2> <p>健 � �읒밀, �靴ュ &#8220;ヴ健�� ��≠밀&#8221; 曳閻�劍頌 ��況 ��숩� �도刷健� 횰靴 健��淞� �悚�윔ヴ. 健靈 윈壽솥鋼 �靴�읒 �健�槪 ≠�∽ ��劍�頌, �靴ュ 딘頌 둥껍≠ 그 ��≠ 虔뭡�� <i>��(before)</i> ���槪 �� 숩∫ヴ.</p> <p>健 �읒밀 �靴ュ 頌譁 밝腱頌쇰� 그靴� 頌譁밝腱頌 순橒�ュ 傑�靴� 裔�槪 虔뭡�淞� �ヴ. 玗맸 윈壽솥健 乾���ュ 鰥�ヴ� ���도, 윈壽솥鋼 솥�尤 頌譁 밝腱�槪 숩뀜槪 ↔健ヴ. 윈壽솥鋼 읫甦들 윳優寧 �屬�懊 �읒밀 손��靴 ��槪 숩뀜槪 ↔健ヴ ( &#8220;Copyright <tt>1946</tt>&#8221;��읒 &#8220;Copyright <tt>MCMXLVI</tt>&#8221;槪 ), 玗鋼 도밀�健寧 玗鋼 ��� 셧� 섀읒밀 ( &#8220;established <tt>1888</tt>&#8221; ��읒 &#8220;established <tt>MDCCCLXXXVIII</tt>&#8221; )槪 숩뀜劍靴�. �� 윈壽솥鋼 그↔�槪 ���刷 그靴� �� �獵밀읒밀 숩뀜槪 �도 �ヴ. 그↔鋼 밝腱 ��� 맸맑�劍頌밀 ��頌 �만頌 이�≠ 頌譁 맸�읒 �靈頌 ����ヴ (��읒밀 그 健華健 傑甦�ヴ).</p> <p>頌譁 밝腱읒밀ュ, 7⌒� 珞腱≠ ��밀 윈壽≠� 籃�劍頌 �손�� 獵��� 밝腱�槪 ���ヴ.</p><ol type="1"><li><tt>I</tt> = <tt>1</tt></li><li><tt>V</tt> = <tt>5</tt></li><li><tt>X</tt> = <tt>10</tt></li><li><tt>L</tt> = <tt>50</tt></li><li><tt>C</tt> = <tt>100</tt></li><li><tt>D</tt> = <tt>500</tt></li><li><tt>M</tt> = <tt>1000</tt></li></ol> <p>頌譁 밝腱況 깬뭡�ュ뎬ュ �≠� 깍�健 �ヴ:</p> <ol type="1"><li>珞腱�鋼 쇰≠�健ヴ.  <tt>I</tt>鋼 <tt>1</tt>健�, <tt>II</tt>ュ <tt>2</tt>健�, 그靴� <tt>III</tt>鋼  <tt>3</tt>健ヴ.  <tt>VI</tt>鋼 <tt>6</tt>健� (珞腱�劍頌, &#8220;<tt>5</tt>잴 <tt>1</tt>&#8221;), <tt>VII</tt>ュ <tt>7</tt>健�, 그靴� <tt>VIII</tt>鋼 <tt>8</tt>健ヴ.</li> <li>10 �胛� 珞腱� (<tt>I</tt>, <tt>X</tt>, <tt>C</tt>, 그靴� <tt>M</tt>)鋼 3 纜�� �손� � �ヴ.  <tt>4</tt>읒밀, 윈壽솥鋼 그 ヴ舡� ≠� �鋼 5 腱靴 珞腱頌쇰� 홉꺌 �ヴ.  윈壽솥鋼 <tt>4</tt>況 <tt>IIII</tt>頌 寧�冷 � 꼬ヴ; ��읒, 그↔鋼 <tt>IV</tt>頌 寧�蘆� 玲ヴ (&#8220;<tt>5</tt>숩ヴ <tt>1</tt> 虔ヴ&#8221;).  <tt>40</tt>鋼 <tt>XL</tt>頌 꼈윈玲ヴ (&#8220;<tt>50</tt>숩ヴ <tt>10</tt>虔ヴ&#8221;), <tt>41</tt>鋼  <tt>XLI</tt>頌, <tt>42</tt>ュ <tt>XLII</tt>頌, <tt>43</tt>鋼 <tt>XLIII</tt>劍頌, 그靴� <tt>44</tt>ュ (&#8220;<tt>50</tt>숩ヴ <tt>10</tt>虔�, 그靴�  <tt>5</tt>숩ヴ <tt>1</tt>虔劍�頌&#8221;) <tt>XLIV</tt>頌 꼈윈玲ヴ.</li> <li>�며�∽, <tt>9</tt>읒밀, 윈壽솥鋼 그 ヴ舡� ≠� �鋼 10腱靴 珞腱頌 쇰� 홉꺌 �ヴ: <tt>8</tt>鋼 <tt>VIII</tt>健ヴ, 그壽寧 <tt>9</tt>ュ (&#8220;<tt>10</tt>숩ヴ <tt>1</tt> 虔劍�頌&#8221;) <tt>IX</tt>健�, <tt>VIIII</tt>≠ 껍レヴ (���� <tt>I</tt> 珞腱ュ 4 纜 �손� � 꼬� ┐珞健ヴ).  <tt>90</tt>鋼 <tt>XC</tt>健ヴ, <tt>900</tt>鋼 <tt>CM</tt>健ヴ.</li> <li>5 腱靴 珞腱�鋼 �손� � 꼬ヴ.  <tt>10</tt>鋼 <tt>VV</tt>≠ 껍レ� �� <tt>X</tt>頌 ��들ヴ.  <tt>100</tt>鋼 �� <tt>C</tt>健�, 據�頌 <tt>LL</tt>健 껍レヴ.</li> <li>頌譁 밝腱ュ �� 胛읒밀 껍甦頌, 그靴� 잗臆읒밀 읫患臆劍頌 꼈윈玲ヴ, 그甦밀 珞腱� 뮈밀ュ ��尤 燁��ヴ.  <tt>DC</tt> ュ <tt>600</tt>健ヴ; <tt>CD</tt>ュ 잽�尤 ヴ患 밝腱健ヴ (<tt>400</tt>乾뎬, &#8220; <tt>500</tt> 숩ヴ <tt>100</tt> 虔ヴ &#8221;).  <tt>CI</tt>ュ <tt>101</tt>健ヴ; <tt>IC</tt>ュ 傑湧� 頌譁 밝腱獵量도 껍レヴ (���� 윈壽솥鋼 <tt>1</tt> 槪  <tt>100</tt>劍頌 쇰� 曳閻�劍頌 횹�도 꼬� ┐珞健ヴ; 윈壽솥鋼 그↔槪 <tt>XCIX</tt>頌 �꺌 ��도 匯患ヴ (&#8220; <tt>100</tt>숩ヴ <tt>10</tt>虔�, 그靴� <tt>10</tt>숩ヴ <tt>1</tt> 虔劍�頌&#8221;).</li></ol> <p>健壽� 깍��槪 숩� � 皇鋼 �藜�ュ ���槪 ��� � �ヴ:</p><ol type="1"><li>밝腱 �寧況 頌譁 밝腱頌 寧�蘆ュ 뎬읒ュ 읫曳 �⌒� 穢蟯� 籃輛梟健 �ヴ.</li> <li>그 을도 을맸 �健ヴ: 梟� 件蘇� 珞腱읽健 傑湧� 頌譁 밝腱��, 그↔鋼 읫曳 �寧� 밝腱梟槪 寧�恬ヴ (<i>�, ヴ맸 恍��</i> 그↔鋼 읫曳 � ≠� 籃�劍頌梟 居� � �ヴ).</li> <li>靈�들 �胛� 밝腱�梟健 頌譁 밝腱頌 ��� � �ヴ, �尤 <tt>1</tt> 읒밀 <tt>3999</tt>��.  (頌譁乾�鋼 � ≠�� 籃輛劍頌 � � 밝腱�槪 ���ュ뎬, 잇況 �� � 밝腱� 胛읒 恢�況 그� �舡劍頌� 그 穢�� 』鋼 <tt>1000</tt>劍頌 ��葉꺌 �ヴュ ↔槪 寧�蘆�ヴ, 그壽寧 �靴ュ 그↔槪 ヴ��ュ 꿩槪 ↔健ヴ. 健 �� ��槪 胛�윈, 頌譁 밝腱�鋼 <tt>1</tt>읒밀 <tt>3999</tt>�� ヴ� ↔健ヴ.)</li> <li><tt>0</tt>鋼 頌譁 밝腱읒밀 ��� 籃輛健 꼬ヴ.  (�┸∽도, �� 頌譁乾�鋼 <tt>0</tt>槪 밝腱頌 휸、�ュ ⌒�健 꼬�ヴ.  밝腱�鋼 윈壽솥健 ≠�� �ュ 蘿�槪 뭐� 胛� ↔健�ヴ; 윈壽솥鋼 ≠�� �� 꿩鋼 ↔槪 �┍∽ 뭐∫ュ≠?)</li> <li>頌譁 밝腱읒ュ 舡�況 ��� 籃輛健 꼬ヴ.</li><li>頌譁 밝腱읒ュ 뱉�寧 솥�況 ��� 籃輛健 꼬ヴ.</li></ol> <p>健壽� 匯� ↔健 �靈 ��,  頌譁밝腱頌 그靴� 頌譁밝腱頌쇰� 순橒�ュ ��� 匯巾읒밀 �靴ュ 朗�槪 잇�� � �ュ≠?</p><a name="roman.requirements"></a><p><b><tt>roman.py</tt>� �깬獵�</b></p> <ol type="1"> <li><tt>toRoman</tt>鋼 <tt>1</tt>읒밀 <tt>3999</tt>�� 匯� 穢�읒 �� 頌譁 밝腱� ��槪 �橒�꺌 �ヴ.</li> <li><tt>toRoman</tt>鋼 <tt>1</tt>읒밀 <tt>3999</tt>�� �胛 黎� 穢�≠ ���� ���꺌 �ヴ.</li> <li><tt>toRoman</tt>鋼 �-穢� 뱉�≠ ���� ���꺌 �ヴ.</li> <li><tt>fromRoman</tt>鋼 傑湧� 頌譁 밝腱況 ��꺌 �� 그↔健 ���ュ 밝腱況 �橒�꺌 �ヴ.</li> <li><tt>fromRoman</tt>鋼 朗湧� 頌譁 밝腱≠ ���� ���꺌 �ヴ.</li><li>梟� 윈壽솥健 밝腱況 ���, 그↔槪 頌譁 밝腱頌 순橒맸��, 그靴� 寧밀 그↔槪 ヴ맸 밝腱頌 순橒��, 윈壽솥鋼 윈壽솥健 맸虔� 그 밝腱頌 怒寧꺌梟 �ヴ. 그甦밀 <tt>1..3999</tt>�健� 匯� <tt>n</tt>읒 ��윈  <tt>fromRoman(toRoman(n)) == n</tt>健ヴ.</li><li><tt>toRoman</tt>鋼 �� 頌譁 밝腱況 �珞腱況 ���윈 �橒�윈꺌 �ヴ.</li><li><tt>fromRoman</tt>鋼 읫曳 �珞腱況 頌譁 밝腱頌 ���ヴ. (� ヴ맸 恍��, 뱉珞腱≠ ��玲ヴ� ���꺌 �ヴ).</li></ol> <p><b>� 居�꺌 � ↔</b></p> <ul> <li><a href="http://kr.diveintopython.net/roman/front.htm">健 �健�</a>읒ュ 頌譁 밝腱읒 �� � 皇鋼 穢숩≠ �ヴ, 頌譁乾�� ヴ患 珞�뭐�읒밀 �靈頌 그↔�槪 �┍∽ ���ュ�읒 �� <a href="http://kr.diveintopython.net/roman/intro.htm">을�</a>況 ���� �ヴ (。�� �: �읓�劍頌 그靴� �件��劍頌).</li></ul> <a name="roman.romantest"></a><h2><a name="roman.romantest"></a>5.2. <tt>romantest.py</tt>況 뱉⌒��</h2> <p>健靈 �靴ュ 잽��∽ �靴� 순橒 ��頌쇰� 잇�� � �ュ �胛況 穢��윔劍�頌, �靴ュ �。鋼 잇�� 鰥� �┱ ↔�槪 �淞� �ヴ: �靴ュ �맑� 匯딕槪 虔뭡�윈 健壽� ���健 腱�� 굶槪 ≠도刷 �� �靴≠ 읏�ュ �頌 그�健 �曳健ュ ↔槪 蟯乾�淞� �ヴ. 윈壽솥健 居鋼 �頌ヴ: �靴ュ ���� 虔뭡�� 꿩뀜タ �맑� ��況 虔뭡�淞� �ヴ.</p> <p>健↔槪 傑� �맑��� 쇰花ュ뎬, ���� 듬 ⌒� 순橒 ���� 匯巾健, �ヴ� �頌그少劍頌쇰� 솥靴��葉, 傑�劍頌 虔뭡���� �맑� � � �� ┐珞健ヴ. 傑�鋼 健�읒 그 � �頌그少� 件 쇰솥健 � ↔健ヴ. �健�鋼 傑� �맑�況 胛� �屬巾��況 ≠�� �ヴ, 그 �據� 健華�∽ <tt>unittest</tt>�ュ 匯�槪 ≠玲ヴ.</p> <a name="note.unittest"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top"><tt>unittest</tt>ュ �健� 2.1 健�읒밀 ��≠��ヴ. �健� 2.0 ��腱ュ 그↔槪 <a href="http://kr.diveintopython.net/"><tt>pyunit.sourceforge.net</tt></a>頌쇰� 蘆淞良槪 ��ヴ.</td></tr></table> <p>傑� �맑�ュ �譴 �맑�-燁� ⌒烙 �簫� ≠� 燁�� 쇰솥健ヴ. 梟� 윈壽솥健 傑� �맑�況 虔뭡�ヴ�, 그↔�槪 횰靴 虔뭡�ュ ↔健 燁��ヴ (�尤 그�健 �맑�� ��況 虔뭡�� �健 �� 霓ヴ ), 그靴� ��잴 �깬��健 순�읒 ��밀 그↔�槪 �뱃�윈 ″���. 傑� �맑�ュ �-�影� ��� 玗鋼 맸맑� �맑�況 胛� �譴蘿健 껍レヴ , 읫尤淞 그↔鋼 匯� ⌒烙� 균�읒밀 燁��ヴ:</p><ul><li>��況 虔뭡�� �읒, 그↔鋼 윈壽솥읒∽ 윈壽솥� �깬��槪 腱뭐�∽ 껨匯 �ュ 籃�劍頌 ���도刷 �깬�ヴ.</li> <li>��況 虔뭡�ュ 돛꿴읒, 그↔鋼 윈壽솥健 �도�∽ ���ュ ↔槪 恢껍影ヴ. 匯� �맑� �健맑≠ ����, 그 ��ュ 잽��ヴ.</li> <li>��況 �솥� � ┐, 그↔劍頌 윈壽솥鋼 그 �頌� ��健 깬 ��� 돛件� 籃�劍頌 �돛�ヴュ ↔槪 蟯乾� � �ヴ.</li> <li>��況 傑�� ┐, �┱ �┶健 ��槪 �花�밀 マ淞잴밀 윈壽솥� �깜 순±健 그�� 잇� ��況 淮≠�誦ヴ� 뱉靴� ┐, 그↔� 도�劍頌 윈壽솥鋼 甄巾槪 匯�� � �ヴ.(&#8220;그峀�梟 <i>묽휸ワ</i>, 匯� 傑� �맑�≠ ����맷レヴ. 蘆≠ 그↔槪 譴�� ┐ュ...&#8221;)</li></ul> <p>健↔鋼 頌譁 밝腱 순橒 ���槪 胛� 잽�� �맑� 匯딕健ヴ,  그↔�鋼 껍曳 虔뭡�� 꿩뀜�梟 �균 <tt>roman.py</tt>읒 꼈윈�∽ � ↔健ヴ.�┍∽ 그 匯� ↔�健 獵潢� �ュ 曳閻�劍頌 ��� 숩健�ュ 꿩ュヴ; 健壽� �甦맑 玗鋼 回��燁 �ニ ↔도 ヴ患 ↔槪 �獵�� 꿩ュヴ. 健壽� ↔읒ュ 潔솥� 健傑≠ �劍�, 그↔槪 �靴ュ 兩∽ �� 섰 ↔健ヴ.</p> <p><a name="d42e16285"></a><b>Example 5.1. <tt>romantest.py</tt></b></p> <p>윈壽솥健 껍曳 그峀∽ �� 鰥�ヴ�, 윈壽솥鋼 健↔� 健 甄읒밀 ��들 ヴ患 잇靈�槪 蘆淞 良槪 � �ヴ     (<a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.zip">Windows</a>,      <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.tgz">UNIX</a>,       <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.hqx">Mac OS</a>).</p> <pre><span class="pystring">"""Unit test for roman.py"""</span><span class="pykeyword">import</span> roman<span class="pykeyword">import</span> unittest<span class="pykeyword">class</span><span class="pyclass"> KnownValues</span>(unittest.TestCase):    knownValues = ( (1, <span class="pystring">'I'</span>),                    (2, <span class="pystring">'II'</span>),                    (3, <span class="pystring">'III'</span>),                    (4, <span class="pystring">'IV'</span>),                    (5, <span class="pystring">'V'</span>),                    (6, <span class="pystring">'VI'</span>),                    (7, <span class="pystring">'VII'</span>),                    (8, <span class="pystring">'VIII'</span>),                    (9, <span class="pystring">'IX'</span>),                    (10, <span class="pystring">'X'</span>),                    (50, <span class="pystring">'L'</span>),                    (100, <span class="pystring">'C'</span>),                    (500, <span class="pystring">'D'</span>),                    (1000, <span class="pystring">'M'</span>),                    (31, <span class="pystring">'XXXI'</span>),                    (148, <span class="pystring">'CXLVIII'</span>),                    (294, <span class="pystring">'CCXCIV'</span>),                    (312, <span class="pystring">'CCCXII'</span>),                    (421, <span class="pystring">'CDXXI'</span>),                    (528, <span class="pystring">'DXXVIII'</span>),                    (621, <span class="pystring">'DCXXI'</span>),                    (782, <span class="pystring">'DCCLXXXII'</span>),                    (870, <span class="pystring">'DCCCLXX'</span>),                    (941, <span class="pystring">'CMXLI'</span>),                    (1043, <span class="pystring">'MXLIII'</span>),                    (1110, <span class="pystring">'MCX'</span>),                    (1226, <span class="pystring">'MCCXXVI'</span>),                    (1301, <span class="pystring">'MCCCI'</span>),                    (1485, <span class="pystring">'MCDLXXXV'</span>),                    (1509, <span class="pystring">'MDIX'</span>),                    (1607, <span class="pystring">'MDCVII'</span>),                    (1754, <span class="pystring">'MDCCLIV'</span>),                    (1832, <span class="pystring">'MDCCCXXXII'</span>),                    (1993, <span class="pystring">'MCMXCIII'</span>),                    (2074, <span class="pystring">'MMLXXIV'</span>),                    (2152, <span class="pystring">'MMCLII'</span>),                    (2212, <span class="pystring">'MMCCXII'</span>),                    (2343, <span class="pystring">'MMCCCXLIII'</span>),                    (2499, <span class="pystring">'MMCDXCIX'</span>),                    (2574, <span class="pystring">'MMDLXXIV'</span>),                    (2646, <span class="pystring">'MMDCXLVI'</span>),                    (2723, <span class="pystring">'MMDCCXXIII'</span>),                    (2892, <span class="pystring">'MMDCCCXCII'</span>),                    (2975, <span class="pystring">'MMCMLXXV'</span>),                    (3051, <span class="pystring">'MMMLI'</span>),                    (3185, <span class="pystring">'MMMCLXXXV'</span>),                    (3250, <span class="pystring">'MMMCCL'</span>),                    (3313, <span class="pystring">'MMMCCCXIII'</span>),                    (3408, <span class="pystring">'MMMCDVIII'</span>),                    (3501, <span class="pystring">'MMMDI'</span>),                    (3610, <span class="pystring">'MMMDCX'</span>),                    (3743, <span class="pystring">'MMMDCCXLIII'</span>),                    (3844, <span class="pystring">'MMMDCCCXLIV'</span>),                    (3888, <span class="pystring">'MMMDCCCLXXXVIII'</span>),                    (3940, <span class="pystring">'MMMCMXL'</span>),                    (3999, <span class="pystring">'MMMCMXCIX'</span>))    <span class="pykeyword">def</span><span class="pyclass"> testToRomanKnownValues</span>(self):        <span class="pystring">"""toRoman should give known result with known input"""</span>        <span class="pykeyword">for</span> integer, numeral <span class="pykeyword">in</span> self.knownValues:            result = roman.toRoman(integer)            self.assertEqual(numeral, result)    <span class="pykeyword">def</span><span class="pyclass"> testFromRomanKnownValues</span>(self):        <span class="pystring">"""fromRoman should give known result with known input"""</span>        <span class="pykeyword">for</span> integer, numeral <span class="pykeyword">in</span> self.knownValues:            result = roman.fromRoman(numeral)            self.assertEqual(integer, result)<span class="pykeyword">class</span><span class="pyclass"> ToRomanBadInput</span>(unittest.TestCase):    <span class="pykeyword">def</span><span class="pyclass"> testTooLarge</span>(self):        <span class="pystring">"""toRoman should fail with large input"""</span>        self.assertRaises(roman.OutOfRangeError, roman.toRoman, 4000)    <span class="pykeyword">def</span><span class="pyclass"> testZero</span>(self):        <span class="pystring">"""toRoman should fail with 0 input"""</span>        self.assertRaises(roman.OutOfRangeError, roman.toRoman, 0)    <span class="pykeyword">def</span><span class="pyclass"> testNegative</span>(self):        <span class="pystring">"""toRoman should fail with negative input"""</span>        self.assertRaises(roman.OutOfRangeError, roman.toRoman, -1)    <span class="pykeyword">def</span><span class="pyclass"> testDecimal</span>(self):        <span class="pystring">"""toRoman should fail with non-integer input"""</span>        self.assertRaises(roman.NotIntegerError, roman.toRoman, 0.5)<span class="pykeyword">class</span><span class="pyclass"> FromRomanBadInput</span>(unittest.TestCase):    <span class="pykeyword">def</span><span class="pyclass"> testTooManyRepeatedNumerals</span>(self):        <span class="pystring">"""fromRoman should fail with too many repeated numerals"""</span>        <span class="pykeyword">for</span> s <span class="pykeyword">in</span> (<span class="pystring">'MMMM'</span>, <span class="pystring">'DD'</span>, <span class="pystring">'CCCC'</span>, <span class="pystring">'LL'</span>, <span class="pystring">'XXXX'</span>, <span class="pystring">'VV'</span>, <span class="pystring">'IIII'</span>):            self.assertRaises(roman.InvalidRomanNumeralError, roman.fromRoman, s)    <span class="pykeyword">def</span><span class="pyclass"> testRepeatedPairs</span>(self):        <span class="pystring">"""fromRoman should fail with repeated pairs of numerals"""</span>        <span class="pykeyword">for</span> s <span class="pykeyword">in</span> (<span class="pystring">'CMCM'</span>, <span class="pystring">'CDCD'</span>, <span class="pystring">'XCXC'</span>, <span class="pystring">'XLXL'</span>, <span class="pystring">'IXIX'</span>, <span class="pystring">'IVIV'</span>):            self.assertRaises(roman.InvalidRomanNumeralError, roman.fromRoman, s)    <span class="pykeyword">def</span><span class="pyclass"> testMalformedAntecedent</span>(self):        <span class="pystring">"""fromRoman should fail with malformed antecedents"""</span>        <span class="pykeyword">for</span> s <span class="pykeyword">in</span> (<span class="pystring">'IIMXCC'</span>, <span class="pystring">'VX'</span>, <span class="pystring">'DCM'</span>, <span class="pystring">'CMM'</span>, <span class="pystring">'IXIV'</span>,                  <span class="pystring">'MCMC'</span>, <span class="pystring">'XCX'</span>, <span class="pystring">'IVI'</span>, <span class="pystring">'LM'</span>, <span class="pystring">'LD'</span>, <span class="pystring">'LC'</span>):            self.assertRaises(roman.InvalidRomanNumeralError, roman.fromRoman, s)<span class="pykeyword">class</span><span class="pyclass"> SanityCheck</span>(unittest.TestCase):    <span class="pykeyword">def</span><span class="pyclass"> testSanity</span>(self):        <span class="pystring">"""fromRoman(toRoman(n))==n for all n"""</span>        <span class="pykeyword">for</span> integer <span class="pykeyword">in</span> range(1, 4000):            numeral = roman.toRoman(integer)            result = roman.fromRoman(numeral)            self.assertEqual(integer, result)<span class="pykeyword">class</span><span class="pyclass"> CaseCheck</span>(unittest.TestCase):    <span class="pykeyword">def</span><span class="pyclass"> testToRomanCase</span>(self):        <span class="pystring">"""toRoman should always return uppercase"""</span>        <span class="pykeyword">for</span> integer <span class="pykeyword">in</span> range(1, 4000):            numeral = roman.toRoman(integer)            self.assertEqual(numeral, numeral.upper())    <span class="pykeyword">def</span><span class="pyclass"> testFromRomanCase</span>(self):        <span class="pystring">"""fromRoman should only accept uppercase input"""</span>        <span class="pykeyword">for</span> integer <span class="pykeyword">in</span> range(1, 4000):            numeral = roman.toRoman(integer)            roman.fromRoman(numeral.upper())            self.assertRaises(roman.InvalidRomanNumeralError,                              roman.fromRoman, numeral.lower())<span class="pykeyword">if</span> __name__ == <span class="pystring">"__main__"</span>:    unittest.main()   </pre> <p><b>� 居�꺌 � ↔</b></p> <ul> <li><a href="http://kr.diveintopython.net/">PyUnit 遼�健�읒ュ</a> <a href="http://kr.diveintopython.net/pyunit.html"><tt>unittest</tt>�屬巾��</a>� ��읒 �� �健-�ュ ��≠ �ヴ, 健 �읒밀 ヴ�� 꿩ュ 玲숩들 ���槪 ���� �ヴ.</li> <li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a>읒밀ュ<a href="http://kr.diveintopython.net/doc/current/lib/module-unittest.html"><tt>unittest</tt></a> 匯�槪 ���� �ヴ</li> <li><a href="http://kr.diveintopython.net/">ExtremeProgramming.org</a>읒밀ュ<a href="http://kr.diveintopython.net/rules/unittests.html">� �靴≠ 傑� �맑�況 ���꺌 �ュ�</a>況 ���ヴ.</li> <li><a href="http://kr.diveintopython.net/cgi/wiki">��腥� �� ���</a>읒밀ュ <a href="http://kr.diveintopython.net/cgi/wiki?UnitTests">傑� �맑�</a>읒 �� ��≠ 玲��� �ヴ, <a href="http://kr.diveintopython.net/cgi/wiki?StandardDefinitionOfUnitTest">�影�乾 穢�</a>況 ���윈, �<a href="http://kr.diveintopython.net/cgi/wiki?CodeUnitTestFirst">傑� �맑�況 晄� ���꺌</a>�ュ�, 그靴� �。� �도-�鋼 <a href="http://kr.diveintopython.net/cgi/wiki?UnitTestTrial">�松 읓깬</a>≠ �ヴ.</li></ul> <a name="roman.success"></a><h2><a name="roman.success"></a>5.3. 뭡×槪 胛� �맑�</h2> <p>傑� �맑�� ≠� �셜�乾 쇰솥鋼 ⌒샥�乾 �맑� �健맑況 깬뭡�ュ ↔健ヴ.�寧� �맑� �健맑ュ �맑��� �ュ 그 ��읒 �� � ⌒� �珞읒 �� 影ヴ.</p> <p>�맑� �健맑ュ ....況 � � ��꺌 �ヴ</p><ul> <li>�┶� 建悚健 꼬健...잽��∽ 그 腱譴頌 ��들ヴ. 傑� �맑�鋼 腱돛優읒 �� ↔健ヴ.</li> <li>乾。健 그 ��況 �묠� �� 꼬健, ...腱�健 �맑��� �ュ ��≠ 뭡×�� ����況 �穢�ヴ</li> <li>(그↔�健 　鋼 ��況 �맑�� ��도)...덱潢�劍頌, ヴ患 �┱ �맑� �健맑잴도 솥靴�� ��들ヴ. 、 �맑� �健맑ュ �潢들 묘健ヴ.</li></ul> <p>健↔槪 �靈頌 �윈, �靴� 憬 纜櫻 �맑� �健맑況 깬��숩腱. �靴ュ ヴ舡� 　鋼 <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.requirements" title="roman.py requirements">�깬獵�</a>槪 ≠玲ヴ:</p> <ol type="1"><li><tt>toRoman</tt>鋼 <tt>1</tt>읒밀 <tt>3999</tt>��� 匯� 穢�읒 ��윈 頌譁 밝腱 ��槪 �橒�꺌 �ヴ.</li></ol> <p><a name="roman.testtoromanknownvalues.example"></a><b>Example 5.2. <tt>testToRomanKnownValues</tt></b></p> <pre><span class="pykeyword">class</span><span class="pyclass"> KnownValues</span>(unittest.TestCase):<a name="roman.success.1.0"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" />    knownValues = ( (1, <span class="pystring">'I'</span>),                    (2, <span class="pystring">'II'</span>),                    (3, <span class="pystring">'III'</span>),                    (4, <span class="pystring">'IV'</span>),                    (5, <span class="pystring">'V'</span>),                    (6, <span class="pystring">'VI'</span>),                    (7, <span class="pystring">'VII'</span>),                    (8, <span class="pystring">'VIII'</span>),                    (9, <span class="pystring">'IX'</span>),                    (10, <span class="pystring">'X'</span>),                    (50, <span class="pystring">'L'</span>),                    (100, <span class="pystring">'C'</span>),                    (500, <span class="pystring">'D'</span>),                    (1000, <span class="pystring">'M'</span>),                    (31, <span class="pystring">'XXXI'</span>),                    (148, <span class="pystring">'CXLVIII'</span>),                    (294, <span class="pystring">'CCXCIV'</span>),                    (312, <span class="pystring">'CCCXII'</span>),                    (421, <span class="pystring">'CDXXI'</span>),                    (528, <span class="pystring">'DXXVIII'</span>),                    (621, <span class="pystring">'DCXXI'</span>),                    (782, <span class="pystring">'DCCLXXXII'</span>),                    (870, <span class="pystring">'DCCCLXX'</span>),                    (941, <span class="pystring">'CMXLI'</span>),                    (1043, <span class="pystring">'MXLIII'</span>),                    (1110, <span class="pystring">'MCX'</span>),                    (1226, <span class="pystring">'MCCXXVI'</span>),                    (1301, <span class="pystring">'MCCCI'</span>),                    (1485, <span class="pystring">'MCDLXXXV'</span>),                    (1509, <span class="pystring">'MDIX'</span>),                    (1607, <span class="pystring">'MDCVII'</span>),                    (1754, <span class="pystring">'MDCCLIV'</span>),                    (1832, <span class="pystring">'MDCCCXXXII'</span>),                    (1993, <span class="pystring">'MCMXCIII'</span>),                    (2074, <span class="pystring">'MMLXXIV'</span>),                    (2152, <span class="pystring">'MMCLII'</span>),                    (2212, <span class="pystring">'MMCCXII'</span>),                    (2343, <span class="pystring">'MMCCCXLIII'</span>),                    (2499, <span class="pystring">'MMCDXCIX'</span>),                    (2574, <span class="pystring">'MMDLXXIV'</span>),                    (2646, <span class="pystring">'MMDCXLVI'</span>),                    (2723, <span class="pystring">'MMDCCXXIII'</span>),                    (2892, <span class="pystring">'MMDCCCXCII'</span>),                    (2975, <span class="pystring">'MMCMLXXV'</span>),                    (3051, <span class="pystring">'MMMLI'</span>),                    (3185, <span class="pystring">'MMMCLXXXV'</span>),                    (3250, <span class="pystring">'MMMCCL'</span>),                    (3313, <span class="pystring">'MMMCCCXIII'</span>),                    (3408, <span class="pystring">'MMMCDVIII'</span>),                    (3501, <span class="pystring">'MMMDI'</span>),                    (3610, <span class="pystring">'MMMDCX'</span>),                    (3743, <span class="pystring">'MMMDCCXLIII'</span>),                    (3844, <span class="pystring">'MMMDCCCXLIV'</span>),                    (3888, <span class="pystring">'MMMDCCCLXXXVIII'</span>),                    (3940, <span class="pystring">'MMMCMXL'</span>),                    (3999, <span class="pystring">'MMMCMXCIX'</span>))                        <a name="roman.success.1.1"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" />    <span class="pykeyword">def</span><span class="pyclass"> testToRomanKnownValues</span>(self):                           <a name="roman.success.1.2"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" />        <span class="pystring">"""toRoman should give known result with known input"""</span>        <span class="pykeyword">for</span> integer, numeral <span class="pykeyword">in</span> self.knownValues:            result = roman.toRoman(integer)                     <a name="roman.success.1.3"></a><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /> <a name="roman.success.1.4"></a><img src="http://kr.diveintopython.net/images/callouts/5.png" alt="5" border="0" width="12" height="12" />            self.assertEqual(numeral, result)                   <a name="roman.success.1.5"></a><img src="http://kr.diveintopython.net/images/callouts/6.png" alt="6" border="0" width="12" height="12" /></pre> <a name="d42e16415"></a><table border="0" summary="Callout list"><tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.success.1.0"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�맑� �健맑況 虔뭡�� 胛�밀, 憬 纜櫻 � 件鋼 <tt>unittest</tt> 匯�� <tt>TestCase</tt> �甦맑況 �쇰�甦맑優 �ュ ↔健ヴ. 健 �甦맑ュ 皇鋼 傑�� 回��≠ ��밀 윈壽솥� �맑� �健맑읒 그↔槪 ���윈 윈壽솥鋼 �샥� 獵��槪 �맑�� � �ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.success.1.1"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健↔鋼 蘆≠ �돛劍頌 蟯乾� 穢�/밝腱 �� 靴맑�健ヴ. 그↔읒ュ ≠� 賂鋼 10 ⌒� 밝腱, ≠� �鋼 밝腱, �⌒�-珞腱頌 들, 頌譁 밝腱頌 순橒�ュ 匯� 밝腱, 그靴� 朗虔胛頌 흡鋼 ヴ患 傑湧� 밝腱�健 ��들ヴ. 傑� �맑�� �瑩鋼 建悚 ≠�� 匯� ↔槪 �맑��ュ ↔健 껍レ�, ���乾 ��槪 �맑��ュ ↔健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.success.1.2"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">匯� ⌒샥�乾 �맑�ュ 腱� 腱�� 回��健ヴ, 그↔鋼 껍朗塑 乾�도 �橒 』도 ≠�� 꿩ュヴ. 梟� 그 回��≠ 잇�況 烙휸맸�� 꿩� 穢��劍頌 梧��ヴ�, 그 �맑�ュ ��들 ↔劍頌 。�들ヴ; 梟件 그 回��≠ 잇�況 件劍��, 그 �맑�ュ ��� ↔劍頌 。�들ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.success.1.3"><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">윈�읒밀 �靴ュ 그 �靈� <tt>toRoman</tt> ��況 繇��ヴュ ↔槪 ����.  (腱, 그 ��ュ 껍曳 虔뭡�� 꿩뀜ヴ, 그壽寧 虔뭡��ヴ�, 健 �乾읒밀 力頌 그↔槪 繇�� ↔健ヴ.) �靴ュ ��  <tt>toRoman</tt> ��況 胛�  API況 穢��윔ヴ: 그↔鋼 (순橒�꺌� 밝腱乾) � ⌒� 穢�況 ��꺌梟 �ヴ 그靴� (頌譁 밝腱 ��) 珞腱읽槪 �橒�꺌 �ヴ. 梟� API ≠ 그↔� ヴ花ヴ�, 健 �맑�ュ ��� ↔劍頌 。�들ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.success.1.4"><img src="http://kr.diveintopython.net/images/callouts/5.png" alt="5" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�� ��� ↔鋼 �靴ュ <tt>toRoman</tt>槪 繇�� ┐ �─� 잇�도 擄껍 梗� 꿩ュヴュ ↔健ヴ. 健↔鋼 �도�健ヴ. �靴≠ 그↔槪 傑湧� 建悚劍頌 繇�� ┐,  <tt>toRoman</tt>鋼 잇�況 烙휸맸�밀ュ 꿴들ヴ 그靴� 健壽� 建悚 』�鋼 匯듬 傑湧�ヴ. 梟� <tt>toRoman</tt>健 잇�況 件劍�ヴ�, 健 �맑�ュ ��� ↔劍頌 。��ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.success.1.5"><img src="http://kr.diveintopython.net/images/callouts/6.png" alt="6" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>toRoman</tt> ��ュ 穢蟯�∽ 穢���倪�, 穢蟯�∽ 繇���劍�, 뭡×�劍頌 잽���, 그靴� �寧� 』槪 �橒�ヴ� ≠穢�숩腱, ≠� 譁�恢 ��ュ 그 ��≠ �橒� 』健 <i>�鋼 (right)</i> 』乾≠況 瑩↑�ュ ↔健ヴ. 健↔鋼 �� �珞健ヴ, 그靴� <tt>TestCase</tt> �甦맑ュ 回��, <tt>assertEqual</tt>況 靈×�ュ뎬, 듬 ⌒� 』健 　鋼≠況 瑩↑�ヴ. 梟� <tt>toRoman</tt>劍頌쇰� �橒들 그 ��(<tt>result</tt>)≠ �靴≠ 잇��� �ュ 그 꿱淞玲 』(<tt>numeral</tt>)� 件��� 꿩ュヴ�, <tt>assertEqual</tt>ュ 잇�況 件劍� ↔健� 그 �맑�ュ ��� ↔健ヴ. 梟� 듬 ⌒� 』健 　ヴ�, <tt>assertEqual</tt>ュ 껍朗↔도 �� 꿩槪 ↔健ヴ.  梟� <tt>toRoman</tt>劍頌쇰� �橒들 匯� 』健 �靴≠ 잇�� 그 꿱淞玲 』� 　ヴ�, <tt>assertEqual</tt>ュ 據�頌 잇�況 件劍�� 꿩ュヴ, 그甦밀 <tt>testToRomanKnownValues</tt>ュ �균 穢��劍頌 暎��ヴ, 그↔鋼 <tt>toRoman</tt>健 健 �맑�況 ���윔ヴュ ↔槪 �藜�ヴ.</td></tr></table> <a name="roman.failure"></a><h2><a name="roman.failure"></a>5.4. ��況 胛� �맑�</h2> <p>�靴� ��≠ 霓鋼 建悚健 ��� ┐ 뭡×�ュ ↔槪 �맑��ュ ↔梟劍頌ュ 潔솥�� 꿩ヴ; �靴ュ �� 寧흴 建悚健 ��� ┐ 그↔�健 ���ヴュ ↔槪 �맑� �꺌 �ヴ. 그靴� �� �┱ 暎�� ��≠ 껍レ�; 그↔�鋼 �靴≠ 잇�� 籃��頌 ���꺌�ヴ.</p> <p><tt>toRoman</tt>況 胛� �靴� <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.requirements" title="roman.py requirements">ヴ患 �깬 獵�槪</a> ���� :</p><ol start="2" type="1"> <li><tt>toRoman</tt>ュ <tt>1</tt>읒밀 <tt>3999</tt>��� �胛 黎읒 �ュ 穢�≠ ��玲ヴ� ���꺌 �ヴ.</li> <li><tt>toRoman</tt>ュ �-穢� 뱉�≠ ���� ���꺌 �ヴ.</li></ol> <p>�健�읒밀, ��ュ <a href="http://kr.diveintopython.net/html/chapter5.htm#fileinfo.exception" title="3.10. Handling exceptions">잇�</a>況 件劍�劍頌�, ��況 寧�恬ヴ 그靴� <tt>unittest</tt> 匯�鋼, ��≠ 寧흴 建悚』健 ���� �샥� 잇�況 件劍�ュ� �맑�況 �� 胛� 回��況 靈×�ヴ.</p> <p><a name="roman.tobadinput.example"></a><b>Example 5.3. Testing bad input to <tt>toRoman</tt></b></p> <pre><span class="pykeyword">class</span><span class="pyclass"> ToRomanBadInput</span>(unittest.TestCase):    <span class="pykeyword">def</span><span class="pyclass"> testTooLarge</span>(self):        <span class="pystring">"""toRoman should fail with large input"""</span>        self.assertRaises(roman.OutOfRangeError, roman.toRoman, 4000) <a name="roman.failure.1.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" />    <span class="pykeyword">def</span><span class="pyclass"> testZero</span>(self):        <span class="pystring">"""toRoman should fail with 0 input"""</span>        self.assertRaises(roman.OutOfRangeError, roman.toRoman, 0)    <a name="roman.failure.1.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" />    <span class="pykeyword">def</span><span class="pyclass"> testNegative</span>(self):        <span class="pystring">"""toRoman should fail with negative input"""</span>        self.assertRaises(roman.OutOfRangeError, roman.toRoman, -1)    <span class="pykeyword">def</span><span class="pyclass"> testDecimal</span>(self):        <span class="pystring">"""toRoman should fail with non-integer input"""</span>        self.assertRaises(roman.NotIntegerError, roman.toRoman, 0.5)  <a name="roman.failure.1.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></pre> <a name="d42e16556"></a><table border="0" summary="Callout list"><tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.failure.1.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>unittest</tt>� <tt>TestCase</tt> �甦맑ュ <tt>assertRaises</tt> 回��況 靈×�ュ뎬, 그↔鋼 ヴ舡� 乾��槪 ��ヴ: �靴≠ 잇��� �ュ 잇�, �靴≠ �맑��淞ュ �ュ ��, 그靴� �靴≠ 그 ��읒 �弄�ュ 乾��.  (梟� �靴≠ �맑��淞ュ 그 ��≠ �⌒ 健�� 乾�況 ≠��, 뮈밀�頌, 그� 匯듬況 <tt>assertRaises</tt>읒 �� ���, 그壽� 그↔鋼 그�槪 穢蟯尤 읓健�밀 �靴≠ �맑��� �ュ 그 ��읒 �弄 娛 ↔健ヴ.) �靴≠ 윈�읒밀 �� �ュ ↔읒 ��況 ��윈 숩�:  <tt>toRoman</tt>槪 曳閻�劍頌 繇��� (그↔槪 <a href="http://kr.diveintopython.net/html/chapter5.htm#fileinfo.exception" title="3.10. Handling exceptions"><tt>try...except</tt> �刷</a>읒 몃 �舡劍頌�) �虔꾑劍頌 그↔健 �샥� 잇�況 件劍�ュ� 瑩↑�ュ ��읒, <tt>assertRaises</tt>ュ 그 匯� ↔�槪 �靴 ��읒 �를優�ヴ.  �靴≠ �ュ 匯� ↔鋼 그↔읒 잇�(<tt>roman.OutOfRangeError</tt>), ��(<tt>toRoman</tt>), 그靴� <tt>toRoman</tt>� 乾�(<tt>4000</tt>)�槪 �ュ ↔健ヴ, <tt>assertRaises</tt>ュ ���윈 <tt>toRoman</tt>槪 繇��� 그靴� 그↔健 <tt>roman.OutOfRangeError</tt>況 件劍�ュ� 蟯��∽ 瑩↑�ヴ.  (�� 그靴� 잇�況 ���윈 <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.objects" title="1.4. Everything is an object">�健�읒밀 匯� ↔鋼 ∥譴健ヴ</a>�ュ ↔健 �譁寧 傑��� 蘆≠ �깜읒 꿇급� 件健 �ュ≠?)</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.failure.1.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">樓朗 � 밝腱�槪 �맑���밀, �靴ュ 樓朗 虔鋼 밝腱�槪 �맑�� ��≠ �ヴ. ����, 頌梟 밝腱ュ <tt>0</tt> �ュ 舡� 穢�況 ��� � 꼬ヴ, 그甦밀 �靴ュ 그壽� 、、읒 �� �맑� �健맑況 ≠玲ヴ (<tt>testZero</tt> 그靴� <tt>testNegative</tt>). <tt>testZero</tt>읒밀, �靴ュ <tt>toRoman</tt>健 <tt>0</tt>劍頌 繇�� ┐ <tt>roman.OutOfRangeError</tt> 잇�況 件劍�ュ� �맑��ヴ; 梟� 그↔健 <tt>roman.OutOfRangeError</tt>況 件劍�� <i>꿩ュヴ�</i> (그↔健 �靈� 』槪 �橒��寧 玗鋼, 그↔健 �┱ ヴ患 잇�況 件劍�� ┐珞읒), 健 �맑�ュ ��頌 。�들ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.failure.1.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.requirements" title="roman.py requirements">�깬獵� #3</a>鋼 <tt>toRoman</tt>健 �-穢� 뱉�況 良껍�件 � 꼬ヴ� �穢�ヴ, 그甦밀 윈�읒밀 �靴ュ <tt>toRoman</tt>健 뱉�(<tt>0.5</tt>)頌 繇�� ┐ <tt>roman.NotIntegerError</tt> 잇�況 件劍�ュ� 蟯乾�ュ �맑�況 �ヴ. 梟� <tt>toRoman</tt>健 <tt>roman.NotIntegerError</tt>況 件劍�� 꿩ュヴ�, 健 �맑�ュ ��頌 。�들ヴ.</td></tr></table> <p>ヴ舡� 듬 <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.requirements" title="roman.py requirements">�깬獵��</a>鋼, <tt>toRoman</tt>��읒 <tt>fromRoman</tt>읒 ��들ヴュ 瑩梟 홉�ュ, 庚舡 뭐 ⌒잴 �며�ヴ:</p> <ol start="4" type="1"> <li><tt>fromRoman</tt>ュ 傑湧� 頌譁 밝腱況 ��꺌梟 �� 그靴� 그↔健 ���ュ 밝腱況 �橒�꺌 �ヴ.</li> <li><tt>fromRoman</tt>鋼 朗湧� 頌譁 밝腱≠ ���� ���꺌 �ヴ.</li></ol> <p>�깬獵� #4ュ <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.testtoromanknownvalues.example" title="Example 5.2. testToRomanKnownValues">requirement #1</a>� 　鋼 籃�劍頌 庚靴��, 꿱淞玲 』�� ��槪 �손�윈밀 뮈밀�頌 、、槪 �맑��ヴ.  �깬獵� #5ュ �깬獵� #2, #3� 　鋼 籃�劍頌 庚靴��, 件蘇� 寧흴 建悚槪 �맑��� <tt>fromRoman</tt>健 그 �據� 잇�況 件劍�ュ� 蟯乾�ヴ.</p> <p><a name="roman.frombadinput.example"></a><b>Example 5.4. Testing bad input to <tt>fromRoman</tt></b></p> <pre><span class="pykeyword">class</span><span class="pyclass"> FromRomanBadInput</span>(unittest.TestCase):    <span class="pykeyword">def</span><span class="pyclass"> testTooManyRepeatedNumerals</span>(self):        <span class="pystring">"""fromRoman should fail with too many repeated numerals"""</span>        <span class="pykeyword">for</span> s <span class="pykeyword">in</span> (<span class="pystring">'MMMM'</span>, <span class="pystring">'DD'</span>, <span class="pystring">'CCCC'</span>, <span class="pystring">'LL'</span>, <span class="pystring">'XXXX'</span>, <span class="pystring">'VV'</span>, <span class="pystring">'IIII'</span>):            self.assertRaises(roman.InvalidRomanNumeralError, roman.fromRoman, s) <a name="roman.failure.2.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" />    <span class="pykeyword">def</span><span class="pyclass"> testRepeatedPairs</span>(self):        <span class="pystring">"""fromRoman should fail with repeated pairs of numerals"""</span>        <span class="pykeyword">for</span> s <span class="pykeyword">in</span> (<span class="pystring">'CMCM'</span>, <span class="pystring">'CDCD'</span>, <span class="pystring">'XCXC'</span>, <span class="pystring">'XLXL'</span>, <span class="pystring">'IXIX'</span>, <span class="pystring">'IVIV'</span>):            self.assertRaises(roman.InvalidRomanNumeralError, roman.fromRoman, s)    <span class="pykeyword">def</span><span class="pyclass"> testMalformedAntecedent</span>(self):        <span class="pystring">"""fromRoman should fail with malformed antecedents"""</span>        <span class="pykeyword">for</span> s <span class="pykeyword">in</span> (<span class="pystring">'IIMXCC'</span>, <span class="pystring">'VX'</span>, <span class="pystring">'DCM'</span>, <span class="pystring">'CMM'</span>, <span class="pystring">'IXIV'</span>,                  <span class="pystring">'MCMC'</span>, <span class="pystring">'XCX'</span>, <span class="pystring">'IVI'</span>, <span class="pystring">'LM'</span>, <span class="pystring">'LD'</span>, <span class="pystring">'LC'</span>):            self.assertRaises(roman.InvalidRomanNumeralError, roman.fromRoman, s)</pre> <a name="d42e16702"></a><table border="0" summary="Callout list"><tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.failure.2.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健↔읒 ��윈 ��ュ ↔鋼 그峀∽ �灑� 꿩ヴ; 健 ��鋼 �靴≠ <tt>toRoman</tt>읒 寧흴 建悚槪 �맑��ュ뎬 ���タ ��� 穢蟯�∽ � 　ヴ. 兩∽ 恍� �靴ュ � ヴ患 잇�況 ≠玲ヴ� 寧ュ 恍� ↔健ヴ: <tt>roman.InvalidRomanNumeralError</tt>. 그↔鋼  (<tt>roman.OutOfRangeError</tt> 그靴� <tt>roman.NotIntegerError</tt>잴 �幢) <tt>roman.py</tt>꿴읒 穢�� ��≠ �ュ � 뭐 ⌒� 會� 잇�況 梟�ヴ. �靴ュ 健壽� 會� 잇�≠ 穢��ュ 輛槪, 健 �� ��쇰읒밀 숩∽ � ↔健ヴ. 그 ┐ �靴ュ �靈頌 <tt>roman.py</tt>況 꾄� 맸虔� ↔健ヴ.</td></tr></table> <a name="roman.sanity"></a><h2><a name="roman.sanity"></a>5.5. 京�槪 胛� �맑�</h2> <p>腱�, 윈壽솥鋼 � �胛� ��≠, 숩� 순橒���� ��읒밀, �繇繇��乾 ���� 裔�槪 ���� �ュ ↔槪 烙¨� ↔健ヴ, ��읒밀 �寧ュ A況 B頌 순橒�� ヴ患 �寧ュ B況 A頌 순橒�ヴ.  健壽� ±��읒밀, 傑�� ↔鋼 &#8220;京� 瑩↑(sanity check)&#8221;況 虔뭡�윈 윈壽솥健 A 읒밀 B 頌 그靴� 을劍頌 A頌, 뱉�� 穢粱도況 楗��靴� 꿩�, �煌 읒壽況 件劍�� 꿩�, 玗鋼 ヴ患 �┱ 暎�� �그도 經烙맸�� 꿩�, 순橒� � �ヴュ ↔槪 蟯乾�ュ ↔健ヴ.</p><p>健塑 <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.requirements" title="roman.py requirements">�깬獵�</a>槪 휸、� 숩�</p> <ol start="6" type="1"><li>윈壽솥健 �寧� 밝腱況 ��밀, 그↔槪 頌譁 밝腱頌 순橒�ヴ�, 그靴�밀 ヴ맸 그↔槪 밝腱頌 순橒�ヴ�, 윈壽솥鋼 윈壽솥健 맸虔�タ 그 밝腱頌 ��≠ ��꺌 �ヴ.  그甦밀  <tt>1..3999</tt>읒 �ュ 匯�<tt>n</tt>읒 ��윈 '<tt>fromRoman(toRoman(n)) == n</tt> '健ヴ.</li></ol> <p><a name="roman.sanity.example"></a><b>Example 5.5. Testing <tt>toRoman</tt> against <tt>fromRoman</tt></b></p> <pre><span class="pykeyword">class</span><span class="pyclass"> SanityCheck</span>(unittest.TestCase):    <span class="pykeyword">def</span><span class="pyclass"> testSanity</span>(self):        <span class="pystring">"""fromRoman(toRoman(n))==n for all n"""</span>        <span class="pykeyword">for</span> integer <span class="pykeyword">in</span> range(1, 4000):        <a name="roman.sanity.1.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /> <a name="roman.sanity.1.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" />            numeral = roman.toRoman(integer)            result = roman.fromRoman(numeral)            self.assertEqual(integer, result) <a name="roman.sanity.1.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></pre> <a name="d42e16768"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.sanity.1.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�靴ュ �읒 <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.multiassign.range" title="Example 1.26. Assigning consecutive values"><tt>range</tt> ��</a> 況 셜 件健 �ヴ, 그壽寧 윈�읒밀 그↔鋼 듬 ⌒� 乾�頌 繇�들ヴ, 그↔鋼 穢��� 靴맑�況 �橒�ュ뎬 憬 纜櫻 乾� (<tt>1</tt>)읒밀 맸虔�윈 읓뱃�劍頌 듬 纜櫻 乾�(<tt>4000</tt>)�� <i>그壽寧 ���� 꿩�밀</i> 묾ヴ. 그靴�윈, <tt>1..3999</tt>, 그↔鋼 頌譁 밝腱頌 순橒�� 胛� 傑湧� �胛健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.sanity.1.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">蘆≠ �� 꿇급��腱 �ュ ↔鋼 (乾�) ����읒밀 <tt>integer(穢�)</tt>ュ �健�읒밀 ���≠ 껍レ�ュ ↔健ヴ; 윈�읒밀 그↔鋼 �� ヴ患 �┱ ↔� 譁�≠�頌 순�健華件 흣健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.sanity.1.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">윈�읒밀 �靈�乾 �맑� �靴ュ 曳밈�劍頌 꿱� 릴ヴ: �寧� 밝腱(<tt>integer</tt>)況 ��밀, 그↔槪 頌譁 밝腱(<tt>numeral</tt>)頌 순橒�ヴ, 그靴�묽 ヴ맸 그↔槪 밝腱(<tt>result</tt>)頌 순橒�� 그靴� 윈壽솥健 庚舡읒 맸虔�タ 그 　鋼 밝腱頌 怒撚ュ�況 蟯乾�ヴ. 그峀� 꿩ヴ�, <tt>assertEqual</tt>ュ 잇�況 件劍�� 그 �맑�ュ �맸 ��頌 。�� ↔健ヴ. 梟� 그 匯� 밝腱≠ 件���, <tt>assertEqual</tt>ュ �� 獵�尤 둥껍이 ↔健�, 그 �譴 <tt>testSanity</tt> 回��ュ �균 獵��∽ 둥껍이 ↔健ヴ, 그靴� 그 �맑�ュ ��들 ↔劍頌 。� � ↔健ヴ.</td></tr></table> <p><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.requirements" title="roman.py requirements">譁�恢 듬 ⌒� �깬獵�</a>鋼 ヴ患 ↔��ュ ヴ患뎬 ���� 그↔�鋼 � ヴ 巾��健� �뱉�� ┐珞健ヴ:</p> <ol start="7" type="1"> <li><tt>toRoman</tt>ュ �� �珞腱況 ���윈 頌譁 밝腱況 �橒�꺌 �ヴ, 그靴� <tt>fromRoman</tt>ュ 읫曳 �珞腱� 頌譁 밝腱梟槪 良껍 �윈꺌 �ヴ (<i>�, ヴ맸 恍��</i> 그↔鋼 뱉珞腱 建悚健 ���� ���꺌 �ヴ).</li> <li><tt>fromRoman</tt>鋼 읫曳 �珞腱� 頌譁 밝腱梟槪 良껍 �윈꺌 �ヴ (<i>�, ヴ맸 恍��</i> 그↔鋼 뱉珞腱 建悚健 ���� ���꺌 �ヴ).</li></ol> <p>��鋼, 그↔�鋼 �。鋼 巾��健ヴ. 잇況 ��, �靴ュ <tt>fromRoman</tt> 鋼 뱉珞腱잴 �뱉珞腱≠ 번乾 建悚槪 良껍�乾ヴ� ≠穢�ヴ. 그壽寧 그↔�鋼 잽�尤 巾��乾 ↔鋼 껍レヴ; 梟� <tt>toRoman</tt>健 �� �珞腱� �悚槪 �橒�ヴ�, 그壽� <tt>fromRoman</tt>鋼 ��도 �珞腱� 建悚槪 良껍�윈꺌梟 �ヴ, 그峀� 꿩劍� �靴� &#8220;京� 瑩↑(sanity check)&#8221; (�깬獵� #6)鋼 ��� ↔健ヴ. '그↔鋼 <i>읫曳(only)</i> �珞腱� 建悚梟槪 良껍 �乾ヴ'�� �ュ ��鋼 巾��健ヴ, 그壽寧 匯� 맸맑� ��耘頌≠ 윈壽솥읒∽ ±���健, �뱉珞腱ュ �� 珞靈�靴健ヴ, 그甦밀 그 �胛況 ��읒 �穢� ≠�≠ �ヴ. 그靴� 그↔健 �穢� 梟� ≠�≠ �ヴ�, �맑�� ≠�도 �ヴ</p> <p><a name="d42e16864"></a><b>Example 5.6. Testing for case</b></p> <pre><span class="pykeyword">class</span><span class="pyclass"> CaseCheck</span>(unittest.TestCase):    <span class="pykeyword">def</span><span class="pyclass"> testToRomanCase</span>(self):        <span class="pystring">"""toRoman should always return uppercase"""</span>        <span class="pykeyword">for</span> integer <span class="pykeyword">in</span> range(1, 4000):            numeral = roman.toRoman(integer)            self.assertEqual(numeral, numeral.upper()) <a name="roman.sanity.2.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" />    <span class="pykeyword">def</span><span class="pyclass"> testFromRomanCase</span>(self):        <span class="pystring">"""fromRoman should only accept uppercase input"""</span>        <span class="pykeyword">for</span> integer <span class="pykeyword">in</span> range(1, 4000):            numeral = roman.toRoman(integer)            roman.fromRoman(numeral.upper())           <a name="roman.sanity.2.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /> <a name="roman.sanity.2.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" />            self.assertRaises(roman.InvalidRomanNumeralError,                              roman.fromRoman, numeral.lower())</pre> <a name="d42e16875"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.sanity.2.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健 �맑� �健맑읒 ��윈 ≠� �藜頌� ↔鋼 그↔健 �맑��� 꿩ュ 匯� ↔健ヴ. 그↔鋼 <tt>toRoman</tt>劍頌쇰� �橒들 그 』健 <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.testtoromanknownvalues.example" title="Example 5.2. testToRomanKnownValues">�鋼�</a> 玗鋼 ��� <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.sanity.example" title="Example 5.5. Testing toRoman against fromRoman">件�뭡健 �ュ�</a> �맑��� 꿩ュヴ; 그壽� �珞�鋼 샥⌒� �맑� �健맑읒 ��윈 ��윈 玲ヴ. �靴ュ �� �珞腱-乾↔ 梟槪 �맑��ュ 장�� �맑� �健맑況 ≠玲ヴ. 윈壽솥鋼 健↔槪, 그 �譴 �胛� 』�槪 ���� <tt>toRoman</tt>槪 繇��劍頌�, <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.sanity.example" title="Example 5.5. Testing toRoman against fromRoman">京� 瑩↑ (sanity check)</a>� ���� 멸鋼 傑玗읒 �� �도 匯患ヴ.<sup>[<a name="d42e16894" href="http://kr.diveintopython.net/html/chapter5.htm#ftn.d42e16894">11</a>]</sup>  그壽寧 그↔鋼 <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.success" title="5.3. Testing for success">�셜�乾 깍��</a>槪 胛�� ↔健ヴ: 、 �맑� �健맑ュ 읫曳 �⌒� �珞읒梟 ��윈꺌 �ヴ. 윈壽솥健 健 �健맑 瑩↑槪 그 京� 瑩↑� ����, 그靴� 그 �맑� �健맑≠ ���ヴ� ��� 숩�. 윈壽솥鋼 � �鋼 솥묠槪 �밀 그 �맑� �健맑� �ニ 쇰솥健 그 珞靈≠ 朗�乾�況 �穢�ュ뎬 ���ュ� 읓깬�윈꺌 � ↔健ヴ. 梟� 윈壽솥健 傑� �맑�� ���槪 솥묠�윈 �� 그↔�健 朗�槪 ┥�ュ�況 읓깬�꺌 �ヴ�, 그↔鋼 윈壽솥健 �맑� �健맑況 剛鰥-뒵腱乾�ヴュ 蟯�� �맸健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.sanity.2.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">윈�읒밀 ��꺌� �며� 귑饒健 �ヴ: <tt>toRoman</tt>ュ �� �珞腱況 �橒�ヴュ ↔槪 &#8220;�靴≠ 꿱� �舡읒도&#8221; 숄깬��, �靴ュ �맸�劍頌 그↔� �橒 』槪 윈�읒밀 �珞腱頌 순橒�윈 <tt>fromRoman</tt>健 �珞腱 建悚槪 良껍�健ュ ↔槪 �맑��ヴ. �乾≠?  ���� '<tt>toRoman</tt>健 �� �珞腱況 �橒�ヴュ ↔'鋼 덱潢�乾 �깬獵�健� ┐珞健ヴ. 梟� �靴≠ 잇況 ��, 그↔健 �� 뱉珞腱況 �橒�도刷 �깬獵�槪 순±��, <tt>testToRomanCase</tt> �맑� �健맑ュ 순±��꺌 � ↔健ヴ, 그壽寧 健 �맑� �健맑ュ 윈�尤 虔돛� ↔健ヴ. 健↔鋼 � ヴ患 �靴� <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.success" title="5.3. Testing for success">�셜�乾 깍�</a>健ヴ: 、 �맑� �健맑ュ ヴ患 匯� ↔�ュ 샥⌒頌 虔돛� � ��꺌梟 �ヴ. 匯� �맑� �健맑ュ �潢들 묘健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.sanity.2.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�靴ュ <tt>fromRoman</tt>� �橒 』槪 �뒵읒도 ���� 꿩ュヴュ ↔槪 ����. �健�읒밀 健↔鋼 �閻� 깬珞健ヴ; 梟� � ��≠ 』槪 �橒�읒도 숄깬�� 껍朗도 ��槪 ��健� 꿩劍�, �健�鋼 �� 그 �橒 』槪 �禍ヴ. 健 ±�읒, 그↔健 �靴≠ 읏� 力健ヴ.  健 �맑� �健맑ュ 그 �橒 』읒 ��윈 껍朗↔도 �맑��� 꿩ュヴ; 그↔鋼 �� <tt>fromRoman</tt>健 껍朗塑 잇�꼬健 �珞腱 建悚槪 良껍�健ュ�況 �맑��ヴ.</td></tr></table> <a name="roman.stage1"></a><h2><a name="roman.stage1"></a>5.6. <tt>roman.py</tt>, 靈 1 ��</h2> <p>健靈 �靴� 傑� �맑�ュ 잽뭡��劍�頌, �靴� �맑� �健맑≠ �맑���況 맸도�� �ュ 力頌 그 ��況 虔뭡�� 맸虔� 맸。健ヴ. �靴ュ ��샥頌 健峀∽ �淞� �ヴ, 그甦밀 �靴ュ 匯� 傑� �맑�≠ ���ュ ↔槪 섰 � �ヴ  그靴�ュ �靴≠ <tt>roman.py</tt>꿴� ×��槪 回導� ＼읒 ��밀 �寧꼭 �寧꼭 그↔�健 ���ュ ↔槪 섰 � �ヴ.</p> <p><a name="d42e16952"></a><b>Example 5.7. <tt>roman1.py</tt></b></p> <p>윈壽솥健 껍曳 그峀∽ �� 꿩뀜ヴ�, 윈壽솥鋼 健↔� 健 甄읒밀 ���ュ ヴ患 잇靈�槪 蘆淞 良槪 � �ヴ (<a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.zip">Windows</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.tgz">UNIX</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.hqx">Mac OS</a>).</p> <pre><span class="pystring">"""Convert to and from Roman numerals"""</span><span class="pycomment">#Define exceptions</span><span class="pykeyword">class</span><span class="pyclass"> RomanError</span>(Exception): <span class="pykeyword">pass</span>                <a name="roman.stage1.1.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="pykeyword">class</span> OutOfRangeError(RomanError): <span class="pykeyword">pass</span>          <a name="roman.stage1.1.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /><span class="pykeyword">class</span> NotIntegerError(RomanError): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> InvalidRomanNumeralError</span>(RomanError): <span class="pykeyword">pass</span> <a name="roman.stage1.1.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /><span class="pykeyword">def</span><span class="pyclass"> toRoman</span>(n):    <span class="pystring">"""convert integer to Roman numeral"""</span>    <span class="pykeyword">pass</span>                                         <a name="roman.stage1.1.4"></a><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /><span class="pykeyword">def</span><span class="pyclass"> fromRoman</span>(s):    <span class="pystring">"""convert Roman numeral to integer"""</span>    <span class="pykeyword">pass</span></pre> <a name="d42e16982"></a><table border="0" summary="Callout list"><tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1.1.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健↔健 力頌 윈壽솥健 腱�梟� 會� 잇�況 �健�읒밀 穢��ュ 籃輛健ヴ. 잇�ュ �甦맑健ヴ, 그靴� 윈壽솥鋼 梧��ュ 잇��槪 �쇰�甦맑優 �劍頌� 腱�梟� 잇�況 휸뭡�ヴ. 윈壽솥健 <tt>Exception</tt>槪 (���乾 ↔鋼 껍レ�梟) �쇰�甦맑優 ��況 ∠悚尤 ���ヴ, 그↔鋼 匯� 蘆� 잇��健 �뱃�ュ �셜 �甦맑健ヴ.  윈�읒밀 寧ュ (<tt>Exception</tt>劍頌쇰� �뱃들) <tt>RomanError</tt>況 穢��ュ뎬, 그↔鋼 �셜 �甦맑頌 虔��윈 ヴ患 寧� 匯� 會� 잇��健 ��장ヴ. 健↔鋼 맑�件� 珞靈健ヴ; 寧ュ <tt>Exception</tt> �甦맑頌쇰� 曳閻�劍頌 껍� 릴∽ 、 ⌒샥�乾 잇�況 �뱃良槪 � ��ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1.1.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>OutOfRangeError</tt>� <tt>NotIntegerError</tt> 잇�ュ �균읒ュ <tt>toRoman</tt>읒 ��윈 ����葉, <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.tobadinput.example" title="Example 5.3. Testing bad input to toRoman"><tt>ToRomanBadInput</tt></a>읒 �穢들 �頌, ヴ�� ��� 朗湧� 建悚槪 ��이淞 �繇� ↔健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1.1.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>InvalidRomanNumeralError</tt> 잇�ュ �균 <tt>fromRoman</tt>읒 �� ����葉밀, <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.frombadinput.example" title="Example 5.4. Testing bad input to fromRoman"><tt>FromRomanBadInput</tt></a>읒 �穢들 �頌, 朗湧� 建悚槪 ��이淞 �繇� ↔健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1.1.4"><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健 ��읒밀, �靴ュ �靴� �� 、、槪 胛� API況 虔뭡��況 읏�ヴ, 그壽寧 �靴ュ 껍曳 그↔�槪 ����況 읏��ュ 꿩ュヴ, 그甦밀 �靴ュ �健�� 잇�� <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.class.simplest" title="Example 3.5. The simplest Python class"><tt>pass</tt></a>況 ���윈 그↔�槪 巾맸頌 뭐�ヴ.</td></tr></table> <p>健靈 그 �穢�乾 뮈。 (�韶槪 ��뭐� 듬듬듬~): �靴ュ �균 �靴� 傑� �맑�況 健 巾맸�乾 虔鋼 匯�읒 ��윈 ���淞� �ヴ.  健 맸瑩읒밀, 匯� �맑� �健맑ュ ���꺌 �ヴ. ��, 梟� �┱ �맑��도 靈 1 ��況 ���ヴ�, �靴ュ <tt>romantest.py</tt>頌 둥껍≠꺌梟 �� 그靴� � �靴≠ 껍朗↔도-��꿩ュ ���槪 ≠�� ��� 穢도頌 그峀∽ 껨匯 꼬ュ �맑�況 虔뭡�ュ�況 ��≠�꺌 �ヴ.</p> <p><tt>romantest1.py</tt>槪 <tt>-v</tt> ���-�乾 묽���劍頌 ����, 그↔鋼 �� 腱뭐� �悚槪 숩윈 娛 ↔健� 그甦밀 �靴ュ 、 �맑� �健맑≠ ���ュ 돛꿴 穢蟯�∽ 朗�健 玲��� �ュ 섰 � �ヴ. �健 霓ヴ�, 윈壽솥� �悚鋼 健↔� �며�꺌梟 �ヴ:</p> <p><a name="roman.stage1.output"></a><b>Example 5.8. Output of <tt>romantest1.py</tt> against <tt>roman1.py</tt></b></p> <pre><span class="computeroutput">fromRoman should only accept uppercase input ... ERRORtoRoman should always return uppercase ... ERRORfromRoman should fail with malformed antecedents ... FAILfromRoman should fail with repeated pairs of numerals ... FAILfromRoman should fail with too many repeated numerals ... FAILfromRoman should give known result with known input ... FAILtoRoman should give known result with known input ... FAILfromRoman(toRoman(n))==n for all n ... FAILtoRoman should fail with non-integer input ... FAILtoRoman should fail with negative input ... FAILtoRoman should fail with large input ... FAILtoRoman should fail with 0 input ... FAIL======================================================================ERROR: fromRoman should only accept uppercase input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage1\romantest1.py", line 154, in testFromRomanCase    roman1.fromRoman(numeral.upper())AttributeError: 'None' object has no attribute 'upper'</span><span class="computeroutput">======================================================================ERROR: toRoman should always return uppercase----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage1\romantest1.py", line 148, in testToRomanCase    self.assertEqual(numeral, numeral.upper())AttributeError: 'None' object has no attribute 'upper'</span><span class="computeroutput">======================================================================FAIL: fromRoman should fail with malformed antecedents----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage1\romantest1.py", line 133, in testMalformedAntecedent    self.assertRaises(roman1.InvalidRomanNumeralError, roman1.fromRoman, s)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should fail with repeated pairs of numerals----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage1\romantest1.py", line 127, in testRepeatedPairs    self.assertRaises(roman1.InvalidRomanNumeralError, roman1.fromRoman, s)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should fail with too many repeated numerals----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage1\romantest1.py", line 122, in testTooManyRepeatedNumerals    self.assertRaises(roman1.InvalidRomanNumeralError, roman1.fromRoman, s)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should give known result with known input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage1\romantest1.py", line 99, in testFromRomanKnownValues    self.assertEqual(integer, result)  File "c:\python21\lib\unittest.py", line 273, in failUnlessEqual    raise self.failureException, (msg or '%s != %s' % (first, second))AssertionError: 1 != None</span><span class="computeroutput">======================================================================FAIL: toRoman should give known result with known input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage1\romantest1.py", line 93, in testToRomanKnownValues    self.assertEqual(numeral, result)  File "c:\python21\lib\unittest.py", line 273, in failUnlessEqual    raise self.failureException, (msg or '%s != %s' % (first, second))AssertionError: I != None</span><span class="computeroutput">======================================================================FAIL: fromRoman(toRoman(n))==n for all n----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage1\romantest1.py", line 141, in testSanity    self.assertEqual(integer, result)  File "c:\python21\lib\unittest.py", line 273, in failUnlessEqual    raise self.failureException, (msg or '%s != %s' % (first, second))AssertionError: 1 != None</span><span class="computeroutput">======================================================================FAIL: toRoman should fail with non-integer input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage1\romantest1.py", line 116, in testDecimal    self.assertRaises(roman1.NotIntegerError, roman1.toRoman, 0.5)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: NotIntegerError</span><span class="computeroutput">======================================================================FAIL: toRoman should fail with negative input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage1\romantest1.py", line 112, in testNegative    self.assertRaises(roman1.OutOfRangeError, roman1.toRoman, -1)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: OutOfRangeError</span><span class="computeroutput">======================================================================FAIL: toRoman should fail with large input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage1\romantest1.py", line 104, in testTooLarge    self.assertRaises(roman1.OutOfRangeError, roman1.toRoman, 4000)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: OutOfRangeError</span><span class="computeroutput">======================================================================FAIL: toRoman should fail with 0 input                                 </span><a name="roman.stage1.2.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="computeroutput">----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage1\romantest1.py", line 108, in testZero    self.assertRaises(roman1.OutOfRangeError, roman1.toRoman, 0)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: OutOfRangeError                                        </span><a name="roman.stage1.2.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /><span class="computeroutput">----------------------------------------------------------------------Ran 12 tests in 0.040s                                                 </span><a name="roman.stage1.2.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /><span class="computeroutput">FAILED (failures=10, errors=2)                                         </span><a name="roman.stage1.2.4"></a><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /></pre> <a name="d42e17123"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1.2.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">그 맑�潢�況 ���� <tt>unittest.main()</tt>槪 ���ヴ, 그↔鋼 、 �맑� �健맑況 ���ヴ, 그↔鋼 <tt>romantest.py</tt>꿴� 、 �甦맑 꿴읒 穢�들 、 回��況 恍�ヴ. 、 �맑� �健맑읒 ��윈, 그↔鋼 그 回��� <tt>docstring</tt>� 그靴� �맑�≠ ���ュ� ���ュ�況 �悚�ヴ. 잇�� 力잴 　健, �靴� �맑� �健맑 �ニ ↔도 ���� 鰥�ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1.2.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">��� 、 �맑� �健맑읒 ��윈, <tt>unittest</tt> ュ 穢蟯�∽ 朗많 件健 件�撚ュ�況 숩윈�ュ 偈� 穢숩況 �悚�ヴ. 健 ±�읒, <tt>assertRaises</tt>읒 �� �靴� 繇�鋼  (also called <tt>failUnlessRaises</tt>) <tt>AssertionError</tt>況 件劍�ヴ ���� 그↔鋼  <tt>toRoman</tt>健 <tt>OutOfRangeError</tt>槪 件劍��況 잇��� ��劍寧 件�寧� 꿩뀜� ┐珞健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1.2.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">그 腱뭐� �悚 �읒, <tt>unittest</tt>ュ �譁寧 皇鋼 �맑�≠ ����ュ� 그靴� �譁寧 皇鋼 맸。健 �誦ュ�읒 �� ��穢숩況 숩윈影ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1.2.4"><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�譴�劍頌, 그 傑� �맑�ュ ���ヴ ���� ��도 �寧� �맑� �健맑ュ ���� 꿩� ┐珞健ヴ. �맑� �健맑≠ ���� 꿩槪 ┐, <tt>unittest</tt> ュ ��잴 읒壽 �健況 깬샥�ヴ. ��ュ <tt>assertEqual</tt> �ュ <tt>assertRaises</tt>잴 　鋼, <tt>assertXYZ</tt> 回��읒 �� 繇�頌밀, 묽꿇들 獵�健 �健 껍レ�寧 玗鋼 그 잇�들 잇�≠ 烙휸�� 꿩뀜� ┐珞읒 ���ヴ.읒壽ュ �靴≠ �맑��� �ュ �� 玗鋼 傑� �맑� �健맑 그 腱譴읒밀 件�寧ュ 匯� 暎�� 잇�健ヴ. 잇況 ��, <tt>testFromRomanCase</tt> 回��ュ (&#8220;<tt>fromRoman</tt>鋼 읫曳 �珞腱 建悚梟槪 閻��꺌梟 ��頌&#8221;) 읒壽윔ヴ, ���� <tt>numeral.upper()</tt>읒 �� 繇�健 <tt>AttributeError</tt> 잇�況 件劍�� ┐珞乾뎬, <tt>toRoman</tt>鋼 珞腱읽槪 �橒��頌 �� �劍寧 그峀� 꿩뀜� ┐珞健ヴ. 그壽寧 <tt>testZero</tt>ュ (&#8220;<tt>toRoman</tt>鋼 0 建悚劍頌ュ ���꺌 ��頌&#8221;) ��윔ヴ, ���� <tt>fromRoman</tt>읒 �� 繇�健 <tt>assertRaises</tt>≠ 黔� �ュ <tt>InvalidRomanNumeral</tt> 잇�況 件劍�� 꿩뀜� ┐珞健ヴ.</td></tr></table> <a name="roman.stage2"></a><h2><a name="roman.stage2"></a>5.7. <tt>roman.py</tt>,靈 2 ��</h2> <p>健靈 �靴ュ <tt>roman</tt> 匯�� �屬巾��≠ 影� ��劍�頌, ��況 虔뭡�� �맑� �健맑況 ��娛 맸。健ヴ.</p> <p><a name="roman.stage2.example"></a><b>Example 5.9. <tt>roman2.py</tt></b></p> <p>윈壽솥健 껍曳 그峀∽ �� 鰥�윔ヴ�, 윈壽솥鋼 健↔� 健 甄읒밀 ��들 ヴ患 잇靈�槪 蘆淞 良槪 � �ヴ (<a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.zip">Windows</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.tgz">UNIX</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.hqx">Mac OS</a>).</p> <pre><span class="pystring">"""Convert to and from Roman numerals"""</span><span class="pycomment">#Define exceptions</span><span class="pykeyword">class</span><span class="pyclass"> RomanError</span>(Exception): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> OutOfRangeError</span>(RomanError): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> NotIntegerError</span>(RomanError): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> InvalidRomanNumeralError</span>(RomanError): <span class="pykeyword">pass</span><span class="pycomment">#Define digit mapping</span>romanNumeralMap = ((<span class="pystring">'M'</span>,  1000), <a name="roman.stage2.1.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" />                   (<span class="pystring">'CM'</span>, 900),                   (<span class="pystring">'D'</span>,  500),                   (<span class="pystring">'CD'</span>, 400),                   (<span class="pystring">'C'</span>,  100),                   (<span class="pystring">'XC'</span>, 90),                   (<span class="pystring">'L'</span>,  50),                   (<span class="pystring">'XL'</span>, 40),                   (<span class="pystring">'X'</span>,  10),                   (<span class="pystring">'IX'</span>, 9),                   (<span class="pystring">'V'</span>,  5),                   (<span class="pystring">'IV'</span>, 4),                   (<span class="pystring">'I'</span>,  1))<span class="pykeyword">def</span><span class="pyclass"> toRoman</span>(n):    <span class="pystring">"""convert integer to Roman numeral"""</span>    result = <span class="pystring">""</span>    <span class="pykeyword">for</span> numeral, integer <span class="pykeyword">in</span> romanNumeralMap:        <span class="pykeyword">while</span> n &gt;= integer:      <a name="roman.stage2.1.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" />            result += numeral            n -= integer    <span class="pykeyword">return</span> result<span class="pykeyword">def</span><span class="pyclass"> fromRoman</span>(s):    <span class="pystring">"""convert Roman numeral to integer"""</span>    <span class="pykeyword">pass</span></pre> <a name="d42e17251"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage2.1.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>romanNumeralMap</tt>ュ ��� ��頌밀 뭐 ≠�況 穢��ヴ:<ol type="1"> <li>≠� �셜�乾 頌譁 밝腱� 珞腱 ���. ��� ↔鋼 健↔健 �� �⌒若靴-珞腱頌들 頌譁 밝腱≠ 껍レ�ュ ↔健ヴ; �靴ュ ��, <tt>CM</tt>� 　鋼, 듬-珞腱頌 들 �槪 穢��ヴ (&#8220;1000숩ヴ 100虔鋼 �&#8221;); 健↔鋼 健�읒 �靴� <tt>toRoman</tt> ��況 �� �뮈�∽ 梟� ↔健ヴ.</li> <li>頌譁 밝腱�� 뮈밀. 그↔�鋼, <tt>M</tt>劍頌쇰� 冶 <tt>I</tt>��, 蘆煌量뮈 』� 뮈밀頌 寧읽들ヴ.</li> <li>、 頌譁 밝腱� 』. 蘆쇰� 、 ��鋼 <tt>(<i>numeral</i>, <i>value</i>)</tt>� �健ヴ.</li></ol></td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage2.1.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">윈�≠ 力頌 �靴� �쇰� 뎬健� 깬獵≠ 健鋸槪 蘆ュ ≒健ヴ, ���� �靴ュ 그 홉� 깍�槪 庚靴�� 胛�윈 �┱ �샥� �靴도 ���� 꿩� ┐珞健ヴ. 頌譁 밝腱頌 순橒�� 胛�밀, �靴ュ �뮈�∽ <tt>romanNumeralMap</tt>槪 �손�윈 �靴� 建悚숩ヴ 虔�寧 　鋼 ≠� � 穢� 』槪 黔�梟 �� 들ヴ.  烙¨��, �靴ュ 그 頌譁 밝腱 ��槪 그 �悚� 譁�恢읒 偈≠��, 그 建悚劍頌쇰� 그 �皆�ュ 穢�況 훌ヴ, 그靴� ヴ맸 �손�ヴ.</td></tr></table> <p><a name="d42e17297"></a><b>Example 5.10. How <tt>toRoman</tt> works</b></p> <p>梟� 윈壽솥健 �┍∽ <tt>toRoman</tt>健 虔돛�ュ� 剛 匯花∫ヴ�, <tt>print</tt> 밀�珞槪  <tt>while</tt> 耘둥健� 譁�恢읒 偈≠��:</p> <pre>        <span class="pykeyword">while</span> n &gt;= integer:            result += numeral            n -= integer            <span class="pykeyword">print</span> <span class="pystring">'subtracting'</span>, integer, <span class="pystring">'from input, adding'</span>, numeral, <span class="pystring">'to output'</span></pre><pre><tt>&gt;&gt;&gt; </tt><span class="userinput"><span class="pykeyword">import</span> roman2</span><tt>&gt;&gt;&gt; </tt><span class="userinput">roman2.toRoman(1424)</span><span class="computeroutput">subtracting 1000 from input, adding M to outputsubtracting 400 from input, adding CD to outputsubtracting 10 from input, adding X to outputsubtracting 10 from input, adding X to outputsubtracting 4 from input, adding IV to output'MCDXXIV'</span></pre> <p>그甦밀 <tt>toRoman</tt>ュ ��도 �靴� 巾맸 �돛 瑩↑읒밀ュ, 虔돛�ュ �健 숩乾ヴ. 그壽寧 그↔健 傑� �맑�況 ����?  舡 껍レヴ, ��劍頌ュ 껍レヴ.</p> <p><a name="d42e17336"></a><b>Example 5.11. Output of <tt>romantest2.py</tt> against <tt>roman2.py</tt></b></p> <pre><span class="computeroutput">fromRoman should only accept uppercase input ... FAILtoRoman should always return uppercase ... ok                  </span><a name="roman.stage2.2.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="computeroutput">fromRoman should fail with malformed antecedents ... FAILfromRoman should fail with repeated pairs of numerals ... FAILfromRoman should fail with too many repeated numerals ... FAILfromRoman should give known result with known input ... FAILtoRoman should give known result with known input ... ok       </span><a name="roman.stage2.2.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /><span class="computeroutput">fromRoman(toRoman(n))==n for all n ... FAILtoRoman should fail with non-integer input ... FAIL            </span><a name="roman.stage2.2.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /><span class="computeroutput">toRoman should fail with negative input ... FAILtoRoman should fail with large input ... FAILtoRoman should fail with 0 input ... FAIL</span></pre> <a name="d42e17356"></a><table border="0" summary="Callout list"><tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage2.2.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>toRoman</tt>鋼, ��, �� �珞腱況 �橒�ヴ, ���� �靴� <tt>romanNumeralMap</tt>健 頌譁 밝腱 ���槪 �珞腱頌 穢��� ┐珞健ヴ. 그甦밀 健 �맑�ュ 健藜 ��� �寧 ヴ華꼬ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage2.2.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">윈�읒 �京祿 ゼ맑≠ �ヴ: <tt>toRoman</tt> ��� 健 ��鋼 <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.testtoromanknownvalues.example" title="Example 5.2. testToRomanKnownValues">꿱淞玲 』 �맑�</a>況 ���ヴ. ����, 그↔鋼 �□�健�ュ 꿩ヴ, 그壽寧 그↔鋼 ヴ�� 霓鋼 建悚槪 ≠��, 그 ��� �悚槪 �≠�ヴ. 그 建悚읒 ���ュ ↔鋼 �⌒若靴-珞腱� 匯� 頌譁 밝腱況 ���ュ 建悚�, ≠�� ≠� � 建悚 (<tt>3999</tt>), 그靴� ≠�� ≠� � 頌譁 밝腱 (<tt>3888</tt>)況 ���ュ 建悚健ヴ. 健 맸瑩읒밀, �靴ュ 그 ��≠ �靴≠ タ葉 �槪 � �ュ �─� 霓鋼 建悚』읒도 虔돛�ヴ� �靴�劍頌 蟯�� � �ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage2.2.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">그峀�梟 그 ��ュ  寧흴 』읒 ��윈ュ&#8220;虔돛��&#8221; 꿩ュヴ; 그↔鋼 匯� ⌒샥� <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.tobadinput.example" title="Example 5.3. Testing bad input to toRoman">寧흴 建悚 �맑�</a>읒 ���ヴ. 그↔鋼 �읓�ヴ, ���� �靴≠ 寧흴 建悚읒 ��윈 �┱ 瑩↑쇰도 ���� 꿩뀜� ┐珞健ヴ. 그壽� �맑� �健맑ュ (<tt>assertRaises</tt>況 ��윈) �穢� 잇�≠ 件�寧�況 �ヴ禍ヴ, 그靴� �靴ュ 그↔�槪 烙휸맸�� 꿩ュヴ. �靴ュ ヴ舡 ��읒밀 그峀∽ � ↔健ヴ.</td></tr></table><p>윈�읒 그 傑� �맑�� �悚��≠ ��밀, 그 匯� ���읒 �� 뭐쇰��槪 寧읽�ヴ. �靴ュ 10⌒� 읒壽況 會健�ヴ.</p> <pre><span class="computeroutput">======================================================================FAIL: fromRoman should only accept uppercase input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage2\romantest2.py", line 156, in testFromRomanCase    roman2.fromRoman, numeral.lower())  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should fail with malformed antecedents----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage2\romantest2.py", line 133, in testMalformedAntecedent    self.assertRaises(roman2.InvalidRomanNumeralError, roman2.fromRoman, s)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should fail with repeated pairs of numerals----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage2\romantest2.py", line 127, in testRepeatedPairs    self.assertRaises(roman2.InvalidRomanNumeralError, roman2.fromRoman, s)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should fail with too many repeated numerals----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage2\romantest2.py", line 122, in testTooManyRepeatedNumerals    self.assertRaises(roman2.InvalidRomanNumeralError, roman2.fromRoman, s)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should give known result with known input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage2\romantest2.py", line 99, in testFromRomanKnownValues    self.assertEqual(integer, result)  File "c:\python21\lib\unittest.py", line 273, in failUnlessEqual    raise self.failureException, (msg or '%s != %s' % (first, second))AssertionError: 1 != None</span><span class="computeroutput">======================================================================FAIL: fromRoman(toRoman(n))==n for all n----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage2\romantest2.py", line 141, in testSanity    self.assertEqual(integer, result)  File "c:\python21\lib\unittest.py", line 273, in failUnlessEqual    raise self.failureException, (msg or '%s != %s' % (first, second))AssertionError: 1 != None</span><span class="computeroutput">======================================================================FAIL: toRoman should fail with non-integer input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage2\romantest2.py", line 116, in testDecimal    self.assertRaises(roman2.NotIntegerError, roman2.toRoman, 0.5)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: NotIntegerError</span><span class="computeroutput">======================================================================FAIL: toRoman should fail with negative input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage2\romantest2.py", line 112, in testNegative    self.assertRaises(roman2.OutOfRangeError, roman2.toRoman, -1)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: OutOfRangeError</span><span class="computeroutput">======================================================================FAIL: toRoman should fail with large input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage2\romantest2.py", line 104, in testTooLarge    self.assertRaises(roman2.OutOfRangeError, roman2.toRoman, 4000)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: OutOfRangeError</span><span class="computeroutput">======================================================================FAIL: toRoman should fail with 0 input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage2\romantest2.py", line 108, in testZero    self.assertRaises(roman2.OutOfRangeError, roman2.toRoman, 0)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: OutOfRangeError</span><span class="computeroutput">----------------------------------------------------------------------Ran 12 tests in 0.320sFAILED (failures=10)</span></pre> <a name="roman.stage3"></a><h2><a name="roman.stage3"></a>5.8. <tt>roman.py</tt>, 靈 3 ��</h2> <p>健靈 <tt>toRoman</tt>健 (<tt>1</tt>읒밀 <tt>3999</tt>��� 穢��) 霓鋼 建悚劍頌ュ 穢蟯�∽ �돛��頌, 그↔槪 (ヴ患 匯� ↔乾) 寧흴 建悚』劍頌도 穢蟯�∽ �돛�도刷 梟� 맸。健ヴ.</p> <p><a name="d42e17456"></a><b>Example 5.12. <tt>roman3.py</tt></b></p> <p>윈壽솥健 껍曳 그峀∽ �� 鰥�윔ヴ�, 윈壽솥鋼 健↔� 健 甄읒밀 ��들 ヴ患 잇靈�槪 蘆淞 良槪 � �ヴ (<a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.zip">Windows</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.tgz">UNIX</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.hqx">Mac OS</a>).</p> <pre><span class="pystring">"""Convert to and from Roman numerals"""</span><span class="pycomment">#Define exceptions</span><span class="pykeyword">class</span><span class="pyclass"> RomanError</span>(Exception): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> OutOfRangeError</span>(RomanError): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> NotIntegerError</span>(RomanError): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> InvalidRomanNumeralError</span>(RomanError): <span class="pykeyword">pass</span><span class="pycomment">#Define digit mapping</span>romanNumeralMap = ((<span class="pystring">'M'</span>,  1000),                   (<span class="pystring">'CM'</span>, 900),                   (<span class="pystring">'D'</span>,  500),                   (<span class="pystring">'CD'</span>, 400),                   (<span class="pystring">'C'</span>,  100),                   (<span class="pystring">'XC'</span>, 90),                   (<span class="pystring">'L'</span>,  50),                   (<span class="pystring">'XL'</span>, 40),                   (<span class="pystring">'X'</span>,  10),                   (<span class="pystring">'IX'</span>, 9),                   (<span class="pystring">'V'</span>,  5),                   (<span class="pystring">'IV'</span>, 4),                   (<span class="pystring">'I'</span>,  1))<span class="pykeyword">def</span><span class="pyclass"> toRoman</span>(n):    <span class="pystring">"""convert integer to Roman numeral"""</span>    <span class="pykeyword">if</span> <span class="pykeyword">not</span> (0 &lt; n &lt; 4000):                                             <a name="roman.stage3.1.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" />        <span class="pykeyword">raise</span> OutOfRangeError, <span class="pystring">"number out of range (must be 1..3999)"</span> <a name="roman.stage3.1.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" />    <span class="pykeyword">if</span> int(n) &lt;&gt; n:                                                    <a name="roman.stage3.1.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" />        <span class="pykeyword">raise</span> NotIntegerError, <span class="pystring">"decimals can not be converted"</span>    result = <span class="pystring">""</span>                                                        <a name="roman.stage3.1.4"></a><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" />    <span class="pykeyword">for</span> numeral, integer <span class="pykeyword">in</span> romanNumeralMap:        <span class="pykeyword">while</span> n &gt;= integer:            result += numeral            n -= integer    <span class="pykeyword">return</span> result<span class="pykeyword">def</span><span class="pyclass"> fromRoman</span>(s):    <span class="pystring">"""convert Roman numeral to integer"""</span>    <span class="pykeyword">pass</span></pre> <a name="d42e17486"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3.1.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健↔鋼 獲�ュ �健�ヴ� �華굶健ヴ: �纜읒 ヴ燁 �귑.  健↔鋼 '<tt>if not ((0 &lt; n) and (n &lt; 4000))</tt>'� 돛��ヴ, 그壽寧 그↔健 雨꽉 � 居�읒 릴ヴ. 健↔鋼 �靴� �胛 瑩↑健ヴ, 그靴� 그↔鋼 樓朗 � 』, 舡�, �ュ 0乾 建悚』槪 寧��꺌梟 �ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3.1.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">윈壽솥鋼 맑맑頌 <tt>raise</tt> 밀�珞槪 ≠�� 잇�況 件劍�ヴ. 윈壽솥鋼 �─� 蘆� 잇�도 件劍� � �劍� �ュ 윈壽솥健 穢�� �─� 會� 잇�도 件劍� � �ヴ. 듬 纜櫻 �⌒순�, 그 읒壽 回맸�ュ, 묽��健ヴ; 梟� ��玲ヴ�, 그 잇�≠ 庚靴�� 꿩槪 ±�읒 �悚�ュ 을 偈� 回맸�읒 그↔鋼 �悚� ↔健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3.1.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健↔鋼 �靴� 뱉� 瑩↑健ヴ. 뱉�ュ 頌譁밝腱頌 순橒� � 꼬ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3.1.4"><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健 ��� 寧蛔�ュ 순±�� 꿩ュヴ.</td></tr></table> <p><a name="d42e17508"></a><b>Example 5.13. Watching <tt>toRoman</tt> handle bad input</b></p> <pre><tt>&gt;&gt;&gt; </tt><span class="userinput"><span class="pykeyword">import</span> roman3</span><tt>&gt;&gt;&gt; </tt><span class="userinput">roman3.toRoman(4000)</span><span class="traceback">Traceback (most recent call last):  File "&lt;interactive input&gt;", line 1, in ?  File "roman3.py", line 27, in toRoman    raise OutOfRangeError, "number out of range (must be 1..3999)"OutOfRangeError: number out of range (must be 1..3999)</span><tt>&gt;&gt;&gt; </tt><span class="userinput">roman3.toRoman(1.5)</span><span class="traceback">Traceback (most recent call last):  File "&lt;interactive input&gt;", line 1, in ?  File "roman3.py", line 29, in toRoman    raise NotIntegerError, "decimals can not be converted"NotIntegerError: decimals can not be converted</span></pre> <p><a name="d42e17537"></a><b>Example 5.14. Output of <tt>romantest3.py</tt> against <tt>roman3.py</tt></b></p> <pre><span class="computeroutput">fromRoman should only accept uppercase input ... FAILtoRoman should always return uppercase ... okfromRoman should fail with malformed antecedents ... FAILfromRoman should fail with repeated pairs of numerals ... FAILfromRoman should fail with too many repeated numerals ... FAILfromRoman should give known result with known input ... FAILtoRoman should give known result with known input ... ok </span><a name="roman.stage3.2.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="computeroutput">fromRoman(toRoman(n))==n for all n ... FAILtoRoman should fail with non-integer input ... ok        </span><a name="roman.stage3.2.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /><span class="computeroutput">toRoman should fail with negative input ... ok           </span><a name="roman.stage3.2.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /><span class="computeroutput">toRoman should fail with large input ... oktoRoman should fail with 0 input ... ok</span></pre> <a name="d42e17557"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3.2.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>toRoman</tt>鋼 윈�尤 <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.testtoromanknownvalues.example" title="Example 5.2. testToRomanKnownValues">꿱淞玲 』 �맑�</a>況 ���ュ뎬, 그↔鋼 ��� 件健ヴ.  <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage2" title="5.7. roman.py, stage 2">靈 2 ��</a>읒밀 ��들 匯� �맑�도 윈�尤 ���ヴ, 그甦밀 �靴� 譁�恢 ��ュ 껍朗↔도 淮≠�靴� 꿩뀜ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3.2.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�� �寧ュ 件鋼 �靴� 匯� <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.tobadinput.example" title="Example 5.3. Testing bad input to toRoman">寧흴 建悚 �맑�≠</a> 健靈 ���ヴュ ↔健ヴ.  健 �맑�, <tt>testDecimal</tt>鋼  <tt>int(n) &lt;&gt; n</tt>� 瑩↑쇰 ┐珞읒 ���ヴ. 뱉�≠ <tt>toRoman</tt>읒 ��� ┐, <tt>int(n) &lt;&gt; n</tt> 瑩↑쇰ュ 그↔槪 꿱껍梗� <tt>NotIntegerError</tt> 잇�況 件劍�ュ뎬, 그↔健 力頌 <tt>testDecimal</tt>健 �ヴ靴� �ュ ↔健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3.2.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健 �맑�, <tt>testNegative</tt>ュ <tt>not (0 &lt; n &lt; 4000)</tt> 瑩↑쇰 ┐珞읒 ���ヴ, 그↔鋼 <tt>OutOfRangeError</tt> 잇�況 件劍�ュ뎬, 그↔健 力頌 <tt>testNegative</tt>≠ �ヴ靴� �ュ ↔健ヴ.</td></tr></table> <pre><span class="computeroutput">======================================================================FAIL: fromRoman should only accept uppercase input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage3\romantest3.py", line 156, in testFromRomanCase    roman3.fromRoman, numeral.lower())  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should fail with malformed antecedents----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage3\romantest3.py", line 133, in testMalformedAntecedent    self.assertRaises(roman3.InvalidRomanNumeralError, roman3.fromRoman, s)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should fail with repeated pairs of numerals----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage3\romantest3.py", line 127, in testRepeatedPairs    self.assertRaises(roman3.InvalidRomanNumeralError, roman3.fromRoman, s)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should fail with too many repeated numerals----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage3\romantest3.py", line 122, in testTooManyRepeatedNumerals    self.assertRaises(roman3.InvalidRomanNumeralError, roman3.fromRoman, s)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should give known result with known input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage3\romantest3.py", line 99, in testFromRomanKnownValues    self.assertEqual(integer, result)  File "c:\python21\lib\unittest.py", line 273, in failUnlessEqual    raise self.failureException, (msg or '%s != %s' % (first, second))AssertionError: 1 != None</span><span class="computeroutput">======================================================================FAIL: fromRoman(toRoman(n))==n for all n----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage3\romantest3.py", line 141, in testSanity    self.assertEqual(integer, result)  File "c:\python21\lib\unittest.py", line 273, in failUnlessEqual    raise self.failureException, (msg or '%s != %s' % (first, second))AssertionError: 1 != None</span><span class="computeroutput">----------------------------------------------------------------------Ran 12 tests in 0.401sFAILED (failures=6)</span> <a name="roman.stage3.3.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></pre> <a name="d42e17637"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3.3.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�靴ュ 6 ⌒� 읒壽況 會健�ヴ, 그靴� 그� 匯듬ュ <tt>fromRoman</tt>읒 읓�들ヴ: 꿱淞玲 』 �맑�, 뭐⌒� ⌒샥�乾 寧흴 建悚 �맑�, �뱉珞腱 瑩↑, 그靴� 京� 瑩↑. 그↔鋼 <tt>toRoman</tt>健 맑맑頌 ��� � �ュ 匯� �맑�況 ���윔ヴュ ↔槪 �藜�ヴ. (그↔鋼 京� 瑩↑� 읓�들ヴ, 그壽寧 그↔鋼 �� <tt>fromRoman</tt>健 虔뭡��況 �깬�ヴ, 그↔鋼 껍曳 虔뭡�� 꿩뀜ヴ.) 그↔鋼 �靴≠ �� <tt>toRoman</tt>槪 ����況 丸偈�꺌 �ヴュ ↔槪 �藜�ヴ. �─� ���도, �─� 獵虔도, &#8220;梟件읒 ���&#8221; �─� 偈≠�乾 瑩↑도 匯듬ヴ ����.  燁���.  ��.  �숩�頌쇰� �靴 ┮�葉�.</td></tr></table> <a name="d42e17656"></a><table class="note" border="0"> <tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr> <tr><td colspan="2" align="left" valign="top">�□�乾 傑� �맑�≠ 윈壽솥읒∽ 꿱淞娛 � �ュ ≠� 燁�� ↔鋼 꿇靈 ��槪 丸偈ュ≠健ヴ. � ��況 胛� 匯� 傑� �맑�≠ ��� ┐, 그 ��況 ���ュ ↔槪 燁���. �譴 匯�읒 �� 匯� 傑� �맑�≠ ��� ┐, 그 匯�槪 ���ュ ↔槪 燁���.</td></tr></table> <a name="roman.stage4"></a><h2><a name="roman.stage4"></a>5.9. <tt>roman.py</tt>, 靈 4 ��</h2> <p>健靈 <tt>toRoman</tt>健 잽뭡��劍�頌, <tt>fromRoman</tt>槪 ��� 맸。健ヴ. ⌒샥�乾 頌譁 밝腱況 穢� 』劍頌 羊�� �ュ �靴� �쇰� 뎬健� 깬獵 �솥읒, 健↔鋼 <tt>toRoman</tt> ��잴 譁�≠�頌 �貰� 꿩ヴ.</p> <p><a name="d42e17680"></a><b>Example 5.15. <tt>roman4.py</tt></b></p> <p>윈壽솥健 껍曳 그峀∽ �� 鰥�ヴ�, 윈壽솥鋼 健↔� 健 甄읒밀 ��들 ヴ患 잇靈�槪 蘆淞 良槪 � �ヴ (<a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.zip">Windows</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.tgz">UNIX</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.hqx">Mac OS</a>).</p> <pre><span class="pystring">"""Convert to and from Roman numerals"""</span><span class="pycomment">#Define exceptions</span><span class="pykeyword">class</span><span class="pyclass"> RomanError</span>(Exception): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> OutOfRangeError</span>(RomanError): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> NotIntegerError</span>(RomanError): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> InvalidRomanNumeralError</span>(RomanError): <span class="pykeyword">pass</span><span class="pycomment">#Define digit mapping</span>romanNumeralMap = ((<span class="pystring">'M'</span>,  1000),                   (<span class="pystring">'CM'</span>, 900),                   (<span class="pystring">'D'</span>,  500),                   (<span class="pystring">'CD'</span>, 400),                   (<span class="pystring">'C'</span>,  100),                   (<span class="pystring">'XC'</span>, 90),                   (<span class="pystring">'L'</span>,  50),                   (<span class="pystring">'XL'</span>, 40),                   (<span class="pystring">'X'</span>,  10),                   (<span class="pystring">'IX'</span>, 9),                   (<span class="pystring">'V'</span>,  5),                   (<span class="pystring">'IV'</span>, 4),                   (<span class="pystring">'I'</span>,  1))<span class="pycomment"># toRoman function omitted for clarity (it hasn't changed)</span><span class="pykeyword">def</span><span class="pyclass"> fromRoman</span>(s):    <span class="pystring">"""convert Roman numeral to integer"""</span>    result = 0    index = 0    <span class="pykeyword">for</span> numeral, integer <span class="pykeyword">in</span> romanNumeralMap:        <span class="pykeyword">while</span> s[index:index+len(numeral)] == numeral: <a name="roman.stage4.1.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" />            result += integer            index += len(numeral)    <span class="pykeyword">return</span> result</pre> <a name="d42e17704"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage4.1.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">윈�읒밀� ��鋼 <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage2.example" title="Example 5.9. roman2.py"><tt>toRoman</tt></a>� 돛件�ヴ. �靴ュ 頌譁 밝腱 뎬健� 깬獵(���� ��)況 耘둥健 �ヴ, 그靴� ≠��� ≠� �鋼 穢� 』읒 羊��ュ ��읒, �靴ュ ≠��� &#8220;≠� �鋼&#8221; 頌譁 밝腱 珞腱읽읒 羊��ヴ.</td></tr></table> <p><a name="d42e17715"></a><b>Example 5.16. How <tt>fromRoman</tt> works</b></p> <p>윈壽솥健 �┍∽ <tt>fromRoman</tt>健 虔돛�ュ� 健��� 鰥�∫ヴ�, <tt>print</tt> 밀�珞槪  <tt>while</tt> 耘둥健� 딘읒ヴ≠ 偈≠��:</p> <pre>        <span class="pykeyword">while</span> s[index:index+len(numeral)] == numeral:            result += integer            index += len(numeral)            <span class="pykeyword">print</span> <span class="pystring">'found'</span>, numeral, <span class="pystring">', adding'</span>, integer</pre><pre><tt>&gt;&gt;&gt; </tt><span class="userinput"><span class="pykeyword">import</span> roman4</span><tt>&gt;&gt;&gt; </tt><span class="userinput">roman4.fromRoman(<span class="pystring">'MCMLXXII'</span>)</span><span class="computeroutput">found M , adding 1000found CM , adding 900found L , adding 50found X , adding 10found X , adding 10found I , adding 1found I , adding 11972</span></pre> <p><a name="d42e17748"></a><b>Example 5.17. Output of <tt>romantest4.py</tt> against <tt>roman4.py</tt></b></p> <pre><span class="computeroutput">fromRoman should only accept uppercase input ... FAILtoRoman should always return uppercase ... okfromRoman should fail with malformed antecedents ... FAILfromRoman should fail with repeated pairs of numerals ... FAILfromRoman should fail with too many repeated numerals ... FAILfromRoman should give known result with known input ... ok </span><a name="roman.stage4.2.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="computeroutput">toRoman should give known result with known input ... okfromRoman(toRoman(n))==n for all n ... ok                  </span><a name="roman.stage4.2.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /><span class="computeroutput">toRoman should fail with non-integer input ... oktoRoman should fail with negative input ... oktoRoman should fail with large input ... oktoRoman should fail with 0 input ... ok</span></pre> <a name="d42e17765"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage4.2.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">윈�읒 듬 ⌒� �寧ュ 뱉�健 �ヴ. 憬 櫻ュ <tt>fromRoman</tt>健 霓鋼 建悚읒,  ��도 �靴≠ �맑��ュ 그 <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.testtoromanknownvalues.example" title="Example 5.2. testToRomanKnownValues">꿱淞玲 』�</a>읒 ��윈, 虔돛�ヴュ ↔健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage4.2.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">� 櫻ュ �靴� <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.sanity.example" title="Example 5.5. Testing toRoman against fromRoman">京� 瑩↑(sanity check)</a> 을맸 ���ヴュ ↔健ヴ. 그 꿱淞玲 』 �맑�잴 ���숩�, �靴ュ <tt>toRoman</tt>� <tt>fromRoman</tt> � ヴ, ≠�� 匯� 霓鋼 』�읒 ��윈 �據尤 虔돛� ↔健�� �靴�劍頌 蟯�� � �ヴ.  (健↔健 숩���ュ 꿩ュヴ; 健速�劍頌 ≠�� ↔鋼 <tt>toRoman</tt>健 �그況 ≠�� ��밀 �샥� 建悚� 裔�읒 ��윈 剛鰥들 頌譁 밝腱況 ��� �도 �ヴュ ↔健�, <i>그靴�</i> <tt>fromRoman</tt>健 �繇繇��乾 �그況 ≠�� ��밀, <tt>toRoman</tt>健 쇰�據�∽ 휸뭡� 頌譁 밝腱� 裔�� 穢蟯�∽ �　健, 剛鰥들 穢� 』槪 ����도 匯患ヴュ ↔健ヴ. 윈壽솥� ��靴�健�� �깬獵�읒 ��밀, 健 ≠�뭡鋼 윈壽솥槪 권灑� �도 �ヴ; 梟� 그峀ヴ�, 그↔健 윈壽솥槪 권灑尤� 꿩槪 ┐�� 숩ヴ � �□�乾 �맑� �健맑況 虔뭡��.)</td></tr></table> <pre><span class="computeroutput">======================================================================FAIL: fromRoman should only accept uppercase input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage4\romantest4.py", line 156, in testFromRomanCase    roman4.fromRoman, numeral.lower())  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should fail with malformed antecedents----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage4\romantest4.py", line 133, in testMalformedAntecedent    self.assertRaises(roman4.InvalidRomanNumeralError, roman4.fromRoman, s)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should fail with repeated pairs of numerals----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage4\romantest4.py", line 127, in testRepeatedPairs    self.assertRaises(roman4.InvalidRomanNumeralError, roman4.fromRoman, s)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">======================================================================FAIL: fromRoman should fail with too many repeated numerals----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage4\romantest4.py", line 122, in testTooManyRepeatedNumerals    self.assertRaises(roman4.InvalidRomanNumeralError, roman4.fromRoman, s)  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">----------------------------------------------------------------------Ran 12 tests in 1.222sFAILED (failures=4)</span></pre> <a name="roman.stage5"></a><h2><a name="roman.stage5"></a>5.10. <tt>roman.py</tt>, 靈 5 ��</h2> <p>健靈 <tt>fromRoman</tt>健 霓鋼 建悚劍頌ュ �據�∽ 虔돛��頌, 그 ��� 譁�恢 獵、槪 會偈� ��꺌 � 맸。健ヴ: 寧흴 建悚劍頌 그↔槪 �據尤 虔돛�도刷 �ュ ↔. 그↔鋼 珞腱읽槪 숩ュ 籃輛槪 黔ュ ↔槪 �藜�� 그靴� 그↔健 傑湧� 頌譁 밝腱乾�況 �穢�ュ 籃輛槪 黔ュ ↔槪 �藜�ヴ. 健↔鋼 <tt>toRoman</tt>읒밀 <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3" title="5.8. roman.py, stage 3">�� 建悚槪 �≠�ュ ↔숩ヴ</a> 셜��劍頌 � �貰ヴ, 그壽寧 �靴읒∽ュ 譁舡�頌 ��� � �ュ ∠悚� 도깬≠ �ヴ: 穢깍 ���.</p> <p>梟� 윈壽솥健 穢깍 ���읒 鋸밍�� 鰥�� 그靴�  <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.re" title="4.9. Regular expressions 101"><i>穢깍 ��� 101</i></a>槪 居� 꿩뀜ヴ�, ��健 力頌 霓鋼 �耘≠ � ↔健ヴ.</p> <p>�靴≠ <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.divein" title="5.1. Diving in">健 �� 밀�</a>읒 셜 力잴 　健, 頌譁 밝腱 �寧況 깬뭡�ュ 뎬읒ュ �。� 。�� 깍�健 �ヴ. 憬 纜櫻ュ 絹�胛 腱靴ュ, 梟� �ヴ�, 件蘇� <tt>M</tt> 珞腱읒 ��밀 ��들ヴ.</p> <p><a name="d42e17849"></a><b>Example 5.18. Checking for thousands</b></p> <pre><tt>&gt;&gt;&gt; </tt><span class="userinput"><span class="pykeyword">import</span> re</span><tt>&gt;&gt;&gt; </tt><span class="userinput">pattern = <span class="pystring">'^M?M?M?$'</span></span>       <a name="roman.stage5.1.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><tt>&gt;&gt;&gt; </tt><span class="userinput">re.search(pattern, <span class="pystring">'M'</span>)</span>    <a name="roman.stage5.1.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /><span class="computeroutput">&lt;SRE_Match object at 0106FB58&gt;</span><tt>&gt;&gt;&gt; </tt><span class="userinput">re.search(pattern, <span class="pystring">'MM'</span>)</span>   <a name="roman.stage5.1.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /><span class="computeroutput">&lt;SRE_Match object at 0106C290&gt;</span><tt>&gt;&gt;&gt; </tt><span class="userinput">re.search(pattern, <span class="pystring">'MMM'</span>)</span>  <a name="roman.stage5.1.4"></a><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /><span class="computeroutput">&lt;SRE_Match object at 0106AA38&gt;</span><tt>&gt;&gt;&gt; </tt><span class="userinput">re.search(pattern, <span class="pystring">'MMMM'</span>)</span> <a name="roman.stage5.1.5"></a><img src="http://kr.diveintopython.net/images/callouts/5.png" alt="5" border="0" width="12" height="12" /><tt>&gt;&gt;&gt; </tt><span class="userinput">re.search(pattern, <span class="pystring">''</span>)</span>     <a name="roman.stage5.1.6"></a><img src="http://kr.diveintopython.net/images/callouts/6.png" alt="6" border="0" width="12" height="12" /><span class="computeroutput">&lt;SRE_Match object at 0106F4A8&gt;</span></pre> <a name="d42e17912"></a><table border="0" summary="Callout list"><tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.1.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健 ��鋼 뭐 ⌒� 쇰솥槪 ≠玲ヴ:<ol type="1"> <li><tt>^</tt> - 그 珞腱읽� � 꽜읒밀 ��읫ュ ↔읒 件��ヴ. 梟� 健↔健 �穢�� 꿩劍�, 그 ��鋼 <tt>M</tt> 珞腱≠ �뒵읒 ��� 。읒 件�� ↔健ヴ, 그↔鋼 �靴≠ 읏�ュ ↔健 껍レヴ. �靴ュ <tt>M</tt> 珞腱≠, 梧���梟 �ヴ�, 그 珞腱읽� � 꽜읒 �ヴュ ↔槪 蟯乾��況 읏�ヴ.</li> <li><tt>M?</tt> - 묽��劍頌 �⌒� <tt>M</tt> 珞腱읒 件��ヴ. 健↔健 뭐 纜 �손��頌, �靴ュ � 娛읒 0읒밀 3⌒��� <tt>M</tt> 珞腱≠ �ュ ≒健� �ニ ≒健寧 件�맸�ヴ.</li> <li><tt>$</tt> - 그 珞腱읽� � 딘읒밀 꽜밀 �ュ ↔읒 件��ヴ.  � 꽜� <tt>^</tt> 珞腱잴 ����, 健↔鋼 그 ��健 그 �譴 珞腱읽읒, <tt>M</tt> 珞腱� 꽜健寧 딘읒 껍朗塑 珞腱꼬健, 件��꺌 �ヴュ ↔槪 ┥�ヴ.</li></ol></td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.1.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>re</tt> 匯�� ��鋼 <tt>search</tt> ��健ヴ, 그↔鋼 穢깍 ���(<tt>pattern</tt>)� 그靴� 珞腱읽(<tt>'M'</tt>)槪 ��밀 그 穢깍 ���� 羊�� 숩淞� 맸도�ヴ. 梟� 件�≠ 烙¨��, <tt>search</tt>ュ �寧� ∥譴況 �橒�ヴ; 그 ∥譴ュ 그 件�況 腱뭐尤 ��� �ュ ヴ�� 回��況 ≠玲ヴ; 梟� 件�≠ 烙¨�� 꿩劍�, <tt>search</tt>ュ �健�� 朗湧 』乾, <tt>None</tt>槪 �橒�ヴ. (�刷 그↔健 �藜��ュ ��梟), �靴ュ <tt>search</tt>≠ �橒�ュ 그 ∥譴읒 ��윈 뭐쇰�劍頌 ��≠�ュ 꿩∫ヴ. ���� 健 뮈。읒 �靴≠ ��槪 ≠�ュ 匯� ↔鋼 그 ��健 件��ュ≠� 윈쇰健� ┐珞健ヴ, 그↔槪 �靴ュ �� <tt>search</tt>� 그 �橒』槪 ��섯劍頌� 恍� � �ヴ.  <tt>'M'</tt>ュ 健 穢깍 ���읒 件��ヴ, ���� 그 憬 纜櫻 묽��乾 <tt>M</tt>健 件��� 그靴� 그 듬纜櫻 그靴� 그 뭐纜櫻� 묽��乾 <tt>M</tt> 珞腱�鋼 朗맸�� ┐珞健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.1.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>'MM'</tt>ュ 件��ヴ ���� 그 憬纜櫻 그靴� 듬 纜櫻 묽��乾 <tt>M</tt> 珞腱≠ 件��� 그 뭐纜櫻 <tt>M</tt>鋼 朗맸�� ┐珞健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.1.4"><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>'MMM'</tt>鋼 件��ヴ ���� 뭐 ⌒� 匯� <tt>M</tt> 珞腱≠ 件��� ┐珞健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.1.5"><img src="http://kr.diveintopython.net/images/callouts/5.png" alt="5" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>'MMMM'</tt>鋼 件��� 꿩ュヴ. 뭐 ⌒� 匯� <tt>M</tt> 珞腱ュ 件��ヴ, 그壽寧 그靴� 寧밀 그 穢깍 ���鋼 (<tt>$</tt> 珞腱 ┐珞읒) 그 珞腱읽� 怒槪 ���ヴ, 그靴� 그 珞腱읽鋼 (弄纜櫻� <tt>M</tt> ┐珞읒) 껍曳 怒寧� 꿩ュヴ.  그甦밀 <tt>search</tt>ュ <tt>None</tt>槪 �橒�ヴ.</td></tr><tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.1.6"><img src="http://kr.diveintopython.net/images/callouts/6.png" alt="6" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�藜�∽도, � 珞腱읽 �� 健 穢깍 ���읒 件��ヴ, ���� 匯� <tt>M</tt> 珞腱�健 묽��健� ┐珞健ヴ. 健 ��槪 웩듬읒 듬��; 그↔鋼 ヴ舡 뭏�읒밀 �� 燁��∽ � ↔健ヴ.</td></tr></table> <p>�� 腱靴ュ 絹� 腱靴숩ヴ �� �貰ヴ, ����, 그 』읒 ��밀, �繇 ���劍頌 ��� � �ュ 윈壽 籃輛�健 �� ┐珞健ヴ.</p> <ul> <li><tt>100</tt> = <tt>C</tt></li> <li><tt>200</tt> = <tt>CC</tt></li> <li><tt>300</tt> = <tt>CCC</tt></li> <li><tt>400</tt> = <tt>CD</tt></li> <li><tt>500</tt> = <tt>D</tt></li> <li><tt>600</tt> = <tt>DC</tt></li> <li><tt>700</tt> = <tt>DCC</tt></li> <li><tt>800</tt> = <tt>DCCC</tt></li> <li><tt>900</tt> = <tt>CM</tt></li></ul> <p>그甦밀 弄 ⌒� ≠�� ��健 �ヴ:</p> <ol type="1"> <li><tt>CM</tt></li> <li><tt>CD</tt></li> <li>0 읒밀 3⌒ ��� <tt>C</tt> 珞腱� (梟� �� 腱靴≠ 0健� 0⌒)</li> <li><tt>D</tt>, ヴ舡읒 0읒밀 3⌒ ��� <tt>C</tt> 珞腱�健 �患ヴ</li></ol> <p>譁�恢 듬 ⌒� ��鋼 獵�� � �ヴ:</p><ul><li>� ⌒� 묽��乾 <tt>D</tt>, ヴ舡읒 0읒밀 3⌒��� <tt>C</tt> 珞腱≠ �患ヴ</li></ul> <p><a name="roman.stage5.hundreds"></a><b>Example 5.19. Checking for hundreds</b></p> <pre><tt>&gt;&gt;&gt; </tt><span class="userinput"><span class="pykeyword">import</span> re</span><tt>&gt;&gt;&gt; </tt><span class="userinput">pattern = <span class="pystring">'^M?M?M?(CM|CD|D?C?C?C?)$'</span></span> <a name="roman.stage5.2.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><tt>&gt;&gt;&gt; </tt><span class="userinput">re.search(pattern, <span class="pystring">'MCM'</span>)</span>            <a name="roman.stage5.2.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /><span class="computeroutput">&lt;SRE_Match object at 01070390&gt;</span><tt>&gt;&gt;&gt; </tt><span class="userinput">re.search(pattern, <span class="pystring">'MD'</span>)</span>             <a name="roman.stage5.2.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /><span class="computeroutput">&lt;SRE_Match object at 01073A50&gt;</span><tt>&gt;&gt;&gt; </tt><span class="userinput">re.search(pattern, <span class="pystring">'MMMCCC'</span>)</span>         <a name="roman.stage5.2.4"></a><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /><span class="computeroutput">&lt;SRE_Match object at 010748A8&gt;</span><tt>&gt;&gt;&gt; </tt><span class="userinput">re.search(pattern, <span class="pystring">'MCMC'</span>)</span>           <a name="roman.stage5.2.5"></a><img src="http://kr.diveintopython.net/images/callouts/5.png" alt="5" border="0" width="12" height="12" /><tt>&gt;&gt;&gt; </tt><span class="userinput">re.search(pattern, <span class="pystring">''</span>)</span>               <a name="roman.stage5.2.6"></a><img src="http://kr.diveintopython.net/images/callouts/6.png" alt="6" border="0" width="12" height="12" /><span class="computeroutput">&lt;SRE_Match object at 01071D98&gt;</span></pre> <a name="d42e18203"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.2.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健 ��鋼, 그 珞腱읽� � 꽜槪 瑩↑�� (<tt>^</tt>), 그靴�ュ �� 腱靴 (<tt>M?M?M?</tt>)況 瑩↑�ュ 健�� �靴� ��� � 　健 맸虔�ヴ. 그靴� �靴ュ, □繇꿴읒, �頌� 쇰솥槪 ≠玲ヴ, 그↔鋼 件�� 뭐⌒� �繇 ���乾 ��槪, �曳 恢�頌 솥靴�윈, 穢��ヴ: <tt>CM</tt>, <tt>CD</tt>, 그靴� <tt>D?C?C?C?</tt> (그↔鋼 묽��乾 <tt>D</tt>頌밀ヴ舡읒 0읒밀 3⌒��� 묽��乾 <tt>C</tt> 珞腱≠ �患ヴ). 그 穢깍 ��� �묠�(PARSER)ュ 健壽� ��� 、、槪 (잗臆읒밀 읫患臆劍頌) 뮈밀�頌 瑩↑�윈, 件��ュ 憬 纜櫻 ↔槪 ���, 그 寧蛔�ュ 朗맸�ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.2.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>'MCM'</tt>鋼 件��ヴ ���� 憬 纜櫻 <tt>M</tt>健 件���, 듬纜櫻잴 뭐纜櫻 <tt>M</tt> 珞腱�鋼 朗맸�� ┐珞健ヴ, 그靴� <tt>CM</tt>鋼 件��ヴ (그甦밀 <tt>CD</tt>잴 <tt>D?C?C?C?</tt> ��鋼 �淞獵量 �� 꿩ュヴ).  <tt>MCM</tt>鋼 <tt>1900</tt>� 頌譁밝腱 ��健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.2.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>'MD'</tt>≠ 件��ヴ ���� 그 憬纜櫻 <tt>M</tt>健 件��� ┐珞健ヴ, 그 듬 纜櫻잴 뭐 纜櫻 <tt>M</tt> 珞腱�鋼 朗맸들ヴ, 그靴�  <tt>D?C?C?C?</tt> ��鋼 <tt>D</tt>읒 件��ヴ (그 3⌒� <tt>C</tt> 珞腱�鋼 묽��健� 朗맸들ヴ).  <tt>MD</tt>ュ <tt>1500</tt>� 頌譁 밝腱 ��健ヴ. <tt>'MD'</tt>≠ 件��ヴ ���� 그 憬纜櫻 <tt>M</tt>健 件���, 듬纜櫻잴 뭐纜櫻 <tt>M</tt> 珞腱ュ 朗맸�� ┐珞健ヴ, 그靴� <tt>D?C?C?C?</tt> ��鋼 <tt>D</tt>읒 件��ヴ (3⌒� <tt>C</tt> 珞腱� 、、鋼 묽��健�밀 朗맸들ヴ).  <tt>MD</tt>ュ <tt>1500</tt>� 頌譁 밝腱 ��健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.2.4"><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>'MMMCCC'</tt>≠ 件��ヴ ���� 3⌒� <tt>M</tt> 珞腱 匯듬≠ 件��� ┐珞健ヴ, 그靴� <tt>D?C?C?C?</tt> ��鋼 <tt>CCC</tt>읒 件��ヴ (<tt>D</tt>ュ 묽��健� 朗맸들ヴ) <tt>MMMCCC</tt>ュ <tt>3300</tt>� 頌譁 밝腱 ��健ヴ.<tt>'MMMCCC'</tt>鋼 件��ヴ ���� 3⌒� 匯� <tt>M</tt> 珞腱�健 件��� ┐珞健ヴ, 그靴� <tt>D?C?C?C?</tt> ��鋼 <tt>CCC</tt>읒 件��ヴ ( <tt>D</tt>ュ 묽��健�밀 朗맸들ヴ).  <tt>MMMCCC</tt>ュ <tt>3300</tt>� 頌譁 밝腱 ��健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.2.5"><img src="http://kr.diveintopython.net/images/callouts/5.png" alt="5" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>'MCMC'</tt>ュ 件��� 꿩ュヴ. 憬 纜櫻 <tt>M</tt>鋼 件��ヴ, 듬纜櫻잴 뭐纜櫻 <tt>M</tt> 珞腱ュ 朗맸들ヴ, 그靴�  <tt>CM</tt>鋼 件��ヴ, 그壽寧 <tt>'MCMC'</tt>ュ 件��� 꿩ュヴ.  憬纜櫻 <tt>M</tt>鋼 件��ヴ, 듬纜櫻잴 뭐纜櫻 <tt>M</tt> 珞腱�鋼 朗맸들ヴ, 그靴� <tt>CM</tt>鋼 件��ヴ, 그壽寧 그壽� <tt>$</tt>ュ 件��� 꿩ュ뎬 ���� �靴ュ 그 珞腱읽� 譁�恢읒 껍曳 도恙�� 꿩뀜� ┐珞健ヴ (�靴ュ 윈�尤 件��� 꿩鋼 <tt>C</tt> 珞腱況 ≠玲ヴ).  <tt>C</tt>ュ <tt>D?C?C?C?</tt> ��� 쇰솥劍頌 件��� <i>꿩ュヴ</i> , ���� 그 �繇 �靈�乾 <tt>CM</tt> ��健 健藜 件��� ┐珞健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.2.6"><img src="http://kr.diveintopython.net/images/callouts/6.png" alt="6" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�藜�∽도, � 珞腱읽鋼 윈�尤 健 ��읒 件��ヴ, ���� 匯� <tt>M</tt> 珞腱�鋼 묽��健� 朗맸�� ┐珞健ヴ, 그靴� 그 � 珞腱읽鋼 <tt>D?C?C?C?</tt> ��읒 件��ヴ ��읒밀ュ 匯� 珞腱�健 묽��健� 朗맸�� ┐珞健ヴ.</td></tr></table> <p>祐�! 穢깍 ���健 �譁寧 횰靴 ��껍�� � �ュ� 꿱∫ュ≠?  그靴� �靴ュ �� �� 腱靴잴 絹� 腱靴梟槪 ヴ��槪 흣健ヴ.  (健 �� ��쇰읒밀, �靴ュ 穢깍 ���槪 虔뭡�ュ �。 ヴ患 깬珞槪 숩∽ � ↔健ヴ, � 　健 손���ュ �∫�梟, ��도 그↔鋼 그 ���� ヴ患 쇰솥읒 �乾-꿴 珞밀優況 ���ヴ.)  ヴ�맑笹∽도, 梟� 윈壽솥健 그 匯� ↔槪 ��。ヴ�, 멩� 腱靴잴 件� 腱靴ュ 릴ヴ, ���� 그↔�鋼 穢蟯尤 　鋼 ��健� ┐珞健ヴ.</p> <p><a name="d42e18346"></a><b>Example 5.20. <tt>roman5.py</tt></b></p> <p>윈壽솥健 껍曳 그峀∽ �� 꿩뀜ヴ�, 윈壽솥鋼 健↔� 健 甄읒밀 ��들 ヴ患 잇靈�槪 蘆淞 良槪 � �ヴ (<a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.zip">Windows</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.tgz">UNIX</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.hqx">Mac OS</a>).</p> <pre><span class="pystring">"""Convert to and from Roman numerals"""</span><span class="pykeyword">import</span> re<span class="pycomment">#Define exceptions</span><span class="pykeyword">class</span><span class="pyclass"> RomanError</span>(Exception): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> OutOfRangeError</span>(RomanError): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> NotIntegerError</span>(RomanError): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> InvalidRomanNumeralError</span>(RomanError): <span class="pykeyword">pass</span><span class="pycomment">#Define digit mapping</span>romanNumeralMap = ((<span class="pystring">'M'</span>,  1000),                   (<span class="pystring">'CM'</span>, 900),                   (<span class="pystring">'D'</span>,  500),                   (<span class="pystring">'CD'</span>, 400),                   (<span class="pystring">'C'</span>,  100),                   (<span class="pystring">'XC'</span>, 90),                   (<span class="pystring">'L'</span>,  50),                   (<span class="pystring">'XL'</span>, 40),                   (<span class="pystring">'X'</span>,  10),                   (<span class="pystring">'IX'</span>, 9),                   (<span class="pystring">'V'</span>,  5),                   (<span class="pystring">'IV'</span>, 4),                   (<span class="pystring">'I'</span>,  1))<span class="pykeyword">def</span><span class="pyclass"> toRoman</span>(n):    <span class="pystring">"""convert integer to Roman numeral"""</span>    <span class="pykeyword">if</span> <span class="pykeyword">not</span> (0 &lt; n &lt; 4000):        <span class="pykeyword">raise</span> OutOfRangeError, <span class="pystring">"number out of range (must be 1..3999)"</span>    <span class="pykeyword">if</span> int(n) &lt;&gt; n:        <span class="pykeyword">raise</span> NotIntegerError, <span class="pystring">"decimals can not be converted"</span>    result = <span class="pystring">""</span>    <span class="pykeyword">for</span> numeral, integer <span class="pykeyword">in</span> romanNumeralMap:        <span class="pykeyword">while</span> n &gt;= integer:            result += numeral            n -= integer    <span class="pykeyword">return</span> result<span class="pycomment">#Define pattern to detect valid Roman numerals</span>romanNumeralPattern = <span class="pystring">'^M?M?M?(CM|CD|D?C?C?C?)(XC|XL|L?X?X?X?)(IX|IV|V?I?I?I?)$'</span> <a name="roman.stage5.3.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="pykeyword">def</span><span class="pyclass"> fromRoman</span>(s):    <span class="pystring">"""convert Roman numeral to integer"""</span>    <span class="pykeyword">if</span> <span class="pykeyword">not</span> re.search(romanNumeralPattern, s):                                    <a name="roman.stage5.3.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" />        <span class="pykeyword">raise</span> InvalidRomanNumeralError, <span class="pystring">'Invalid Roman numeral: %s'</span> % s    result = 0    index = 0    <span class="pykeyword">for</span> numeral, integer <span class="pykeyword">in</span> romanNumeralMap:        <span class="pykeyword">while</span> s[index:index+len(numeral)] == numeral:            result += integer            index += len(numeral)    <span class="pykeyword">return</span> result</pre> <a name="d42e18372"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.3.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健↔鋼 �� �靴≠ 셜, 絹� 腱靴잴 �� 腱靴況 庚靴�タ 그 ��� 읓뱃健ヴ. 멩� 腱靴ュ <tt>XC</tt> (<tt>90</tt>), <tt>XL</tt> (<tt>40</tt>)健�寧 , 玗鋼 묽��乾 <tt>L</tt>頌밀 ヴ舡읒 0⌒읒밀 3⌒��� 묽��乾 <tt>X</tt> 珞腱≠ �患ヴ.  件� 腱靴ュ <tt>IX</tt> (<tt>9</tt>), <tt>IV</tt> (<tt>4</tt>)健�寧, 玗鋼 묽��乾 <tt>V</tt>頌밀 ヴ舡읒 0⌒읒밀 3⌒��� 묽��乾 <tt>I</tt> 珞腱≠ �患ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.3.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">그 匯� �靴況 �靴� 穢깍 ���읒 ��� ��劍�頌, 朗湧� 頌譁 밝腱況 瑩↑�ュ ��ュ �뱉� 件健 들ヴ. 梟� <tt>re.search</tt>≠ ∥譴況 �橒��, 그壽� 그 穢깍 ���鋼 件��� 그靴� �靴� 建悚鋼 傑湧�ヴ; 그峀� 꿩劍�, �靴� 建悚鋼 朗湧�ヴ.</td></tr></table> <p>健 맸瑩읒밀, 그 ��� 鰥휸� 穢깍 ���健 匯� 暎�� 朗湧� 頌譁 밝腱況 寧�� � �ヴュ ↔槪 윈壽솥鋼 ���도 霓ヴ.  그壽寧 蘆 恍槪 ◎健 ◎�頌 礪� 譁�, 그 ���槪 �� 숩�:</p> <p><a name="d42e18420"></a><b>Example 5.21. Output of <tt>romantest5.py</tt> against <tt>roman5.py</tt></b></p> <pre><span class="computeroutput">fromRoman should only accept uppercase input ... ok          </span><a name="roman.stage5.4.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="computeroutput">toRoman should always return uppercase ... okfromRoman should fail with malformed antecedents ... ok      </span><a name="roman.stage5.4.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /><span class="computeroutput">fromRoman should fail with repeated pairs of numerals ... ok </span><a name="roman.stage5.4.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /><span class="computeroutput">fromRoman should fail with too many repeated numerals ... okfromRoman should give known result with known input ... oktoRoman should give known result with known input ... okfromRoman(toRoman(n))==n for all n ... oktoRoman should fail with non-integer input ... oktoRoman should fail with negative input ... oktoRoman should fail with large input ... oktoRoman should fail with 0 input ... ok----------------------------------------------------------------------Ran 12 tests in 2.864sOK                                                           </span><a name="roman.stage5.4.4"></a><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /></pre> <a name="d42e18441"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.4.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">穢깍 ���읒 ��윈 蘆≠ 꿇급�� 꿩鋼 � ≠�ュ, �셜�劍頌, 穢깍 ���鋼 �뱉珞腱-濾＼ �ヴュ ↔健ヴ. �靴� 穢깍 ��� <tt>romanNumeralPattern</tt>健 �珞腱頌 ����劍�頌, �靴� <tt>re.search</tt> 瑩↑鋼 잽��∽ �珞腱≠ 껍� �┱ 建悚도 �쇰� ↔健ヴ. 그甦밀 �靴� �珞腱 建悚 �맑�ュ ���ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.4.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�� 燁��∽도, �靴� 寧흴 建悚 �맑�ュ ���ヴ. 잇況 ��, 그 鰥휸� 獵� �맑� �健맑ュ <tt>MCMC</tt>잴 　鋼 �健맑況 瑩↑�ヴ. <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.hundreds" title="Example 5.19. Checking for hundreds">윈壽솥健 셜 力잴 　健</a>, 健↔鋼 �靴� 穢깍 ���읒 件��� 꿩ュヴ, 그甦밀 <tt>fromRoman</tt>鋼 <tt>InvalidRomanNumeralError</tt> 잇�況 件劍�ヴ, 그↔鋼 그 鰥휸� 獵� �맑� �健맑≠ �ヴ靴タ ↔健�, 그甦밀 그 �맑�ュ ���ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.4.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">��, 匯� 寧흴 建悚 �맑�ュ ���ヴ. 健 穢깍 ���鋼 �靴≠ �맑� �健맑況 梟� ┐ �靴≠ 휸、� � ��タ 匯� ↔槪 寧��ヴ .</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.4.4"><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">그靴� 이�� �暎 맸�鋼 그 �� &#8220;<tt>OK</tt>&#8221; 읒∽頌 둥껍 。ヴ; 그↔鋼 匯� �맑�≠ ��� ┐ <tt>unittest</tt> 匯�읒 ��윈 �悚들ヴ.</td></tr></table> <a name="d42e18479"></a><table class="note" border="0"> <tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">윈壽솥� 匯� �맑�≠ ��� ┐, ��槪 燁���.</td></tr></table> <a name="roman.bugs"></a><h2><a name="roman.bugs"></a>5.11. �그況 庚靴��</h2> <p>윈壽솥健 �묽槪 ヴ�윈 �□�乾 傑� �맑�況 虔뭡�淞� �윔舡읒도 숄깬��, �그ュ 件�祿ヴ.寧ュ &#8220;bug&#8221;頌 朗�槪 �藜�ュ≠?  �그ュ 윈壽솥健 껍曳�� 虔뭡� �健 꼬ュ �맑� �健맑健ヴ.</p> <p><a name="d42e18495"></a><b>Example 5.22. The bug</b></p> <pre><tt>&gt;&gt;&gt; </tt><span class="userinput"><span class="pykeyword">import</span> roman5</span><tt>&gt;&gt;&gt; </tt><span class="userinput">roman5.fromRoman(<span class="pystring">""</span>)</span> <a name="roman.bugs.1.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="computeroutput">0</span></pre> <a name="d42e18513"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.bugs.1.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">���ュ≠? <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5" title="5.10. roman.py, stage 5">健�� 뭏�</a>읒밀 �靴ュ � 珞腱읽健 傑湧� 頌譁 밝腱況 瑩↑�� 胛� 그 穢깍 ���읒 件��ュ ↔槪 숩뀜ヴ.  腱, ��祿 ↔鋼 健↔鋼 그 穢깍 ���� �暎 ��읒 ��윈 윈�尤 �健�ュ ↔健ヴ. 그靴� 그↔鋼 �그健ヴ; 傑湧� 頌譁 밝腱況 ���� 꿩ュ ヴ患 �┱ 읓뱃�乾 珞腱�� 譁�≠�頌 � 　健 <tt>InvalidRomanNumeralError</tt> 잇�況 件劍�, � 珞腱읽槪 �靴ュ 읏�ヴ.</td></tr></table> <p>그 �그況 �휸�� �읒, 그靴� 그↔槪 �穢�� �읒, 윈壽솥鋼 ��況 �ュ, 그靴�윈 그 �그況 잇맸� �ュ �맑� �健맑況 虔뭡�윈꺌梟 �ヴ.</p> <p><a name="d42e18525"></a><b>Example 5.23. Testing for the bug (<tt>romantest61.py</tt>)</b></p> <pre><span class="pykeyword">class</span><span class="pyclass"> FromRomanBadInput</span>(unittest.TestCase):    <span class="pycomment"># previous test cases omitted for clarity (they haven't changed)</span>    <span class="pykeyword">def</span><span class="pyclass"> testBlank</span>(self):        <span class="pystring">"""fromRoman should fail with blank string"""</span>        self.assertRaises(roman.InvalidRomanNumeralError, roman.fromRoman, <span class="pystring">""</span>) <a name="roman.bugs.2.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></pre> <a name="d42e18535"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.bugs.2.1"> <img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td> <td valign="top" align="left">윈�읒 ��尤 。�� ��≠ �ヴ.  <tt>fromRoman</tt>槪 � 珞腱읽頌 繇���그靴� 그↔健 <tt>InvalidRomanNumeralError</tt> 잇�況 件劍�ュ� 蟯乾��.�淞� 쇰솥健�� �그況 黔ュ ↔健ヴ; 健靈 �靴ュ 그↔읒 ��윈 꿱� �劍�頌, 그↔槪 胛� �맑�ュ 맞� 쇰솥健ヴ.</td></tr></table> <p>�靴� ��ュ �그況 ≠�� �劍�頌, 그靴� 健靈 �靴ュ 健 �그況 �맑��ュ �맑� �健맑況 ≠�� �劍�頌, 그 �맑� �健맑ュ ��� ↔健ヴ:</p> <p><a name="d42e18547"></a><b>Example 5.24. Output of <tt>romantest61.py</tt> against <tt>roman61.py</tt></b></p> <pre><span class="computeroutput">fromRoman should only accept uppercase input ... oktoRoman should always return uppercase ... okfromRoman should fail with blank string ... FAILfromRoman should fail with malformed antecedents ... okfromRoman should fail with repeated pairs of numerals ... okfromRoman should fail with too many repeated numerals ... okfromRoman should give known result with known input ... oktoRoman should give known result with known input ... okfromRoman(toRoman(n))==n for all n ... oktoRoman should fail with non-integer input ... oktoRoman should fail with negative input ... oktoRoman should fail with large input ... oktoRoman should fail with 0 input ... ok======================================================================FAIL: fromRoman should fail with blank string----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage6\romantest61.py", line 137, in testBlank    self.assertRaises(roman61.InvalidRomanNumeralError, roman61.fromRoman, "")  File "c:\python21\lib\unittest.py", line 266, in failUnlessRaises    raise self.failureException, excNameAssertionError: InvalidRomanNumeralError</span><span class="computeroutput">----------------------------------------------------------------------Ran 13 tests in 2.864sFAILED (failures=1)</span></pre> <p><i>健靈</i> �靴ュ 그 �그況 �� � �ヴ.</p> <p><a name="d42e18566"></a><b>Example 5.25. Fixing the bug (<tt>roman62.py</tt>)</b></p> <pre><span class="pykeyword">def</span><span class="pyclass"> fromRoman</span>(s):    <span class="pystring">"""convert Roman numeral to integer"""</span>    <span class="pykeyword">if</span> <span class="pykeyword">not</span> s: <a name="roman.bugs.4.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" />        <span class="pykeyword">raise</span> InvalidRomanNumeralError, <span class="pystring">'Input can not be blank'</span>    <span class="pykeyword">if</span> <span class="pykeyword">not</span> re.search(romanNumeralPattern, s):        <span class="pykeyword">raise</span> InvalidRomanNumeralError, <span class="pystring">'Invalid Roman numeral: %s'</span> % s    result = 0    index = 0    <span class="pykeyword">for</span> numeral, integer <span class="pykeyword">in</span> romanNumeralMap:        <span class="pykeyword">while</span> s[index:index+len(numeral)] == numeral:            result += integer            index += len(numeral)    <span class="pykeyword">return</span> result</pre> <a name="d42e18576"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.bugs.4.1"> <img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td> <td valign="top" align="left">읫曳 듬 娛� ��梟健 ���ヴ: � 珞腱읽槪 胛� �맸�乾 瑩↑, 그靴� <tt>raise</tt> 밀�珞.</td></tr></table> <p><a name="d42e18583"></a><b>Example 5.26. Output of <tt>romantest62.py</tt> against <tt>roman62.py</tt></b></p> <pre><span class="computeroutput">fromRoman should only accept uppercase input ... oktoRoman should always return uppercase ... okfromRoman should fail with blank string ... ok </span><a name="roman.bugs.5.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="computeroutput">fromRoman should fail with malformed antecedents ... okfromRoman should fail with repeated pairs of numerals ... okfromRoman should fail with too many repeated numerals ... okfromRoman should give known result with known input ... oktoRoman should give known result with known input ... okfromRoman(toRoman(n))==n for all n ... oktoRoman should fail with non-integer input ... oktoRoman should fail with negative input ... oktoRoman should fail with large input ... oktoRoman should fail with 0 input ... ok----------------------------------------------------------------------Ran 13 tests in 2.834sOK</span> <a name="roman.bugs.5.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></pre> <a name="d42e18599"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.bugs.5.1"> <img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td> <td valign="top" align="left">그 ×� 珞腱읽 �맑� �健맑ュ 健靈 ���ヴ, 그甦밀 그 �그ュ ��倪ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.bugs.5.2"> <img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td> <td valign="top" align="left">ヴ患 匯� �맑� �健맑�鋼 윈�尤 ���ヴ, 그↔鋼 健 �그 �穢健 ヴ患 �┱ ↔도 淮≠├靴� 꿩뀜舡槪 �藜�ヴ.  ��槪 燁���.</td></tr></table> <p>健塑 籃�劍頌 ���ヴ� �밀 �그況 ��ュ ↔健 � 릴∽ ��ュ 꿩ュヴ.  (健↔� 　鋼) 。�� �그�鋼 。�� �맑� �健맑況 �깬�ヴ; 손�� �그�鋼 손�� �맑� �健맑況 �깬� ↔健ヴ.�맑�-燁� 橒±읒밀ュ, �그況 �穢�ュ ↔健 맸。健 皇健 �靴ュ �健 <i>숩件�도</i> 匯患ヴ,���� 윈壽솥鋼 (�맑� �健맑況 虔뭡�� 胛�윈) 그 �그≠ 朗�乾� ��頌 獵�獵� 寧읽�꺌梟 ��그 �그 腱譴況 �穢�꺌�� ┐珞健ヴ.그靴� 寧밀 梟� 그 �맑� �健맑≠ �、 ���� 꿩ュヴ�, 윈壽솥鋼 그 �穢健 剛鰥��ュ� 껍レ� 그 �맑� �健맑 腱譴≠ �그況 ≠�� �ュ� 꿱껍 숩껍꺌梟 �ヴ.그峀�梟, �균읒ュ, 健 �맑��ュ ��잴 �맑� 良ュ �� �健� 꽜劍頌-그靴�-딘頌 �簫鋼 그 腱譴頌 健鋸健 �ヴ,���� 그↔鋼 �그�健 � 纜읒 穢蟯�∽ �穢� ≠�뭡健 � 皇도刷 �윈 �� ┐珞健ヴ.��, 윈壽솥鋼 <i>匯�</i> �맑� �健맑況 윈壽솥� �頌� �健맑頌, 릴∽ �-��� � �劍�頌윈壽솥鋼 �頌� ��況 �穢� ┐ 잇�� ��況 淮≠�奐 ≠�뭡健 雨꽉 � �∽들ヴ.읫ヌ� 傑� �맑�ュ 蘆件� 耘깃 �맑�健ヴ.</p> <a name="roman.change"></a><h2><a name="roman.change"></a>5.12. �깬獵� 순±槪 庚靴��</h2> <p>윈壽솥� �∥槪 ┫ 力ヲ읒 꾄壽├靴� ≠胛 그靴� �� �ュ 잼맑 　鋼 뱉華臘�∽ 朗밀� ↔�頌 �珞�윈 穢蟯� �깬獵�槪 그�읒∽밀 淡�蘆ュ 윈壽솥� �묽� �悚읒도 숄깬��, �깬獵�鋼 순±� ↔健ヴ. �쇰솥� �∥�鋼 그�健 �靈頌 숩� ���ュ 그�健 읏�ュ ↔槪 꿱� 鰥�ヴ, 그靴� 꿱��도, 그�鋼 읏�ュ ↔槪 獵�獵� 穢蟯�∽ ��� 梟� 穢도頌 寧읽�ュ ↔읒 鋸밍�� 鰥�ヴ. 그靴� 鋸밍�ヴ� ���도, 그�鋼 ヴ舡 ��┐읒ュ �倻� � 皇鋼 ↔槪 읏� ↔健ヴ. 그甦밀 �깬獵�健 순±득읒 會偈� 윈壽솥� �맑� �健맑況 ″�� � �도刷 影���.</p> <p>잇況 ��, �靴� 頌譁 밝腱 순橒 ��� �胛況 蟯���況 읏�ヴ� ≠穢�숩�. �─� 珞腱도 뭐纜槪 競��윈 �손� � 꼬ヴュ <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.divein" title="5.1. Diving in">그 깍�</a>槪 ���ュ≠? 腱, 그 頌譁乾�鋼 �湍健 그 깍�읒 잇�況 梟��밀 4⌒� <tt>M</tt> 珞腱況 件�頌 寧읽�윈 <tt>4000</tt>槪 ���淞� �윔ヴ. 梟� �靴≠ 健峀∽ 순±槪 ��, �靴ュ 순橒≠�� 밝腱� �胛況 <tt>1..3999</tt>읒밀 <tt>1..4999</tt>劍頌 蟯�� � �槪 ↔健ヴ. 그壽寧 晄�, �靴ュ �靴� �맑� �健맑읒 �。� 순±槪 � ��≠ �ヴ.</p> <p><a name="d42e18639"></a><b>Example 5.27. Modifying test cases for new requirements (<tt>romantest71.py</tt>)</b></p> <p>윈壽솥健 껍曳 그峀∽ �� 鰥�ヴ�, 윈壽솥鋼 健↔� 健 甄읒밀 ��들 ヴ患 잇靈�槪 蘆淞 良槪 � �ヴ (<a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.zip">Windows</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.tgz">UNIX</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.hqx">Mac OS</a>).</p> <pre><span class="pykeyword">import</span> roman71<span class="pykeyword">import</span> unittest<span class="pykeyword">class</span><span class="pyclass"> KnownValues</span>(unittest.TestCase):    knownValues = ( (1, <span class="pystring">'I'</span>),                    (2, <span class="pystring">'II'</span>),                    (3, <span class="pystring">'III'</span>),                    (4, <span class="pystring">'IV'</span>),                    (5, <span class="pystring">'V'</span>),                    (6, <span class="pystring">'VI'</span>),                    (7, <span class="pystring">'VII'</span>),                    (8, <span class="pystring">'VIII'</span>),                    (9, <span class="pystring">'IX'</span>),                    (10, <span class="pystring">'X'</span>),                    (50, <span class="pystring">'L'</span>),                    (100, <span class="pystring">'C'</span>),                    (500, <span class="pystring">'D'</span>),                    (1000, <span class="pystring">'M'</span>),                    (31, <span class="pystring">'XXXI'</span>),                    (148, <span class="pystring">'CXLVIII'</span>),                    (294, <span class="pystring">'CCXCIV'</span>),                    (312, <span class="pystring">'CCCXII'</span>),                    (421, <span class="pystring">'CDXXI'</span>),                    (528, <span class="pystring">'DXXVIII'</span>),                    (621, <span class="pystring">'DCXXI'</span>),                    (782, <span class="pystring">'DCCLXXXII'</span>),                    (870, <span class="pystring">'DCCCLXX'</span>),                    (941, <span class="pystring">'CMXLI'</span>),                    (1043, <span class="pystring">'MXLIII'</span>),                    (1110, <span class="pystring">'MCX'</span>),                    (1226, <span class="pystring">'MCCXXVI'</span>),                    (1301, <span class="pystring">'MCCCI'</span>),                    (1485, <span class="pystring">'MCDLXXXV'</span>),                    (1509, <span class="pystring">'MDIX'</span>),                    (1607, <span class="pystring">'MDCVII'</span>),                    (1754, <span class="pystring">'MDCCLIV'</span>),                    (1832, <span class="pystring">'MDCCCXXXII'</span>),                    (1993, <span class="pystring">'MCMXCIII'</span>),                    (2074, <span class="pystring">'MMLXXIV'</span>),                    (2152, <span class="pystring">'MMCLII'</span>),                    (2212, <span class="pystring">'MMCCXII'</span>),                    (2343, <span class="pystring">'MMCCCXLIII'</span>),                    (2499, <span class="pystring">'MMCDXCIX'</span>),                    (2574, <span class="pystring">'MMDLXXIV'</span>),                    (2646, <span class="pystring">'MMDCXLVI'</span>),                    (2723, <span class="pystring">'MMDCCXXIII'</span>),                    (2892, <span class="pystring">'MMDCCCXCII'</span>),                    (2975, <span class="pystring">'MMCMLXXV'</span>),                    (3051, <span class="pystring">'MMMLI'</span>),                    (3185, <span class="pystring">'MMMCLXXXV'</span>),                    (3250, <span class="pystring">'MMMCCL'</span>),                    (3313, <span class="pystring">'MMMCCCXIII'</span>),                    (3408, <span class="pystring">'MMMCDVIII'</span>),                    (3501, <span class="pystring">'MMMDI'</span>),                    (3610, <span class="pystring">'MMMDCX'</span>),                    (3743, <span class="pystring">'MMMDCCXLIII'</span>),                    (3844, <span class="pystring">'MMMDCCCXLIV'</span>),                    (3888, <span class="pystring">'MMMDCCCLXXXVIII'</span>),                    (3940, <span class="pystring">'MMMCMXL'</span>),                    (3999, <span class="pystring">'MMMCMXCIX'</span>),                    (4000, <span class="pystring">'MMMM'</span>),                                       <a name="roman.change.1.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" />                    (4500, <span class="pystring">'MMMMD'</span>),                    (4888, <span class="pystring">'MMMMDCCCLXXXVIII'</span>),                    (4999, <span class="pystring">'MMMMCMXCIX'</span>))    <span class="pykeyword">def</span><span class="pyclass"> testToRomanKnownValues</span>(self):        <span class="pystring">"""toRoman should give known result with known input"""</span>        <span class="pykeyword">for</span> integer, numeral <span class="pykeyword">in</span> self.knownValues:            result = roman71.toRoman(integer)            self.assertEqual(numeral, result)    <span class="pykeyword">def</span><span class="pyclass"> testFromRomanKnownValues</span>(self):        <span class="pystring">"""fromRoman should give known result with known input"""</span>        <span class="pykeyword">for</span> integer, numeral <span class="pykeyword">in</span> self.knownValues:            result = roman71.fromRoman(numeral)            self.assertEqual(integer, result)<span class="pykeyword">class</span><span class="pyclass"> ToRomanBadInput</span>(unittest.TestCase):    <span class="pykeyword">def</span><span class="pyclass"> testTooLarge</span>(self):        <span class="pystring">"""toRoman should fail with large input"""</span>        self.assertRaises(roman71.OutOfRangeError, roman71.toRoman, 5000) <a name="roman.change.1.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" />    <span class="pykeyword">def</span><span class="pyclass"> testZero</span>(self):        <span class="pystring">"""toRoman should fail with 0 input"""</span>        self.assertRaises(roman71.OutOfRangeError, roman71.toRoman, 0)    <span class="pykeyword">def</span><span class="pyclass"> testNegative</span>(self):        <span class="pystring">"""toRoman should fail with negative input"""</span>        self.assertRaises(roman71.OutOfRangeError, roman71.toRoman, -1)    <span class="pykeyword">def</span><span class="pyclass"> testDecimal</span>(self):        <span class="pystring">"""toRoman should fail with non-integer input"""</span>        self.assertRaises(roman71.NotIntegerError, roman71.toRoman, 0.5)<span class="pykeyword">class</span><span class="pyclass"> FromRomanBadInput</span>(unittest.TestCase):    <span class="pykeyword">def</span><span class="pyclass"> testTooManyRepeatedNumerals</span>(self):        <span class="pystring">"""fromRoman should fail with too many repeated numerals"""</span>        <span class="pykeyword">for</span> s <span class="pykeyword">in</span> (<span class="pystring">'MMMMM'</span>, <span class="pystring">'DD'</span>, <span class="pystring">'CCCC'</span>, <span class="pystring">'LL'</span>, <span class="pystring">'XXXX'</span>, <span class="pystring">'VV'</span>, <span class="pystring">'IIII'</span>):     <a name="roman.change.1.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" />            self.assertRaises(roman71.InvalidRomanNumeralError, roman71.fromRoman, s)    <span class="pykeyword">def</span><span class="pyclass"> testRepeatedPairs</span>(self):        <span class="pystring">"""fromRoman should fail with repeated pairs of numerals"""</span>        <span class="pykeyword">for</span> s <span class="pykeyword">in</span> (<span class="pystring">'CMCM'</span>, <span class="pystring">'CDCD'</span>, <span class="pystring">'XCXC'</span>, <span class="pystring">'XLXL'</span>, <span class="pystring">'IXIX'</span>, <span class="pystring">'IVIV'</span>):            self.assertRaises(roman71.InvalidRomanNumeralError, roman71.fromRoman, s)    <span class="pykeyword">def</span><span class="pyclass"> testMalformedAntecedent</span>(self):        <span class="pystring">"""fromRoman should fail with malformed antecedents"""</span>        <span class="pykeyword">for</span> s <span class="pykeyword">in</span> (<span class="pystring">'IIMXCC'</span>, <span class="pystring">'VX'</span>, <span class="pystring">'DCM'</span>, <span class="pystring">'CMM'</span>, <span class="pystring">'IXIV'</span>,                  <span class="pystring">'MCMC'</span>, <span class="pystring">'XCX'</span>, <span class="pystring">'IVI'</span>, <span class="pystring">'LM'</span>, <span class="pystring">'LD'</span>, <span class="pystring">'LC'</span>):            self.assertRaises(roman71.InvalidRomanNumeralError, roman71.fromRoman, s)    <span class="pykeyword">def</span><span class="pyclass"> testBlank</span>(self):        <span class="pystring">"""fromRoman should fail with blank string"""</span>        self.assertRaises(roman71.InvalidRomanNumeralError, roman71.fromRoman, <span class="pystring">""</span>)<span class="pykeyword">class</span><span class="pyclass"> SanityCheck</span>(unittest.TestCase):    <span class="pykeyword">def</span><span class="pyclass"> testSanity</span>(self):        <span class="pystring">"""fromRoman(toRoman(n))==n for all n"""</span>        <span class="pykeyword">for</span> integer <span class="pykeyword">in</span> range(1, 5000):                                    <a name="roman.change.1.4"></a><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" />            numeral = roman71.toRoman(integer)            result = roman71.fromRoman(numeral)            self.assertEqual(integer, result)<span class="pykeyword">class</span><span class="pyclass"> CaseCheck</span>(unittest.TestCase):    <span class="pykeyword">def</span><span class="pyclass"> testToRomanCase</span>(self):        <span class="pystring">"""toRoman should always return uppercase"""</span>        <span class="pykeyword">for</span> integer <span class="pykeyword">in</span> range(1, 5000):            numeral = roman71.toRoman(integer)            self.assertEqual(numeral, numeral.upper())    <span class="pykeyword">def</span><span class="pyclass"> testFromRomanCase</span>(self):        <span class="pystring">"""fromRoman should only accept uppercase input"""</span>        <span class="pykeyword">for</span> integer <span class="pykeyword">in</span> range(1, 5000):            numeral = roman71.toRoman(integer)            roman71.fromRoman(numeral.upper())            self.assertRaises(roman71.InvalidRomanNumeralError,                              roman71.fromRoman, numeral.lower())<span class="pykeyword">if</span> __name__ == <span class="pystring">"__main__"</span>:    unittest.main()</pre> <a name="d42e18671"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change.1.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">그 梧��ュ 꿱淞玲 』�鋼 순±�� 꿩ュヴ (그↔�鋼 윈�尤 �맑�� 健傑≠ �ュ 』�健ヴ), 그壽寧 �靴ュ <tt>4000</tt> �胛읒밀 �。槪 � 偈≠� ��≠ �ヴ. 윈�읒 寧ュ (≠� 兩鋼) <tt>4000</tt>, (듬纜�頌 兩鋼) <tt>4500</tt>, (≠� �) <tt>4888</tt>, 그靴� (≠� �) <tt>4999</tt>況 �� 맸�ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change.1.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">&#8220;�』 建悚&#8221;� 穢�ュ 순±��ヴ. 健 �맑�ュ  <tt>toRoman</tt>槪 <tt>4000</tt>劍頌 繇��� 그靴� 읒壽況 �ヴ誦�ヴ; 健靈 <tt>4000-4999</tt>ュ 霓鋼 』�健�頌, �靴ュ 健↔槪 <tt>5000</tt>�� 粱� 이奐 ��≠ �ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change.1.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">&#8220;樓朗 皇鋼 �손들 밝腱�&#8221;� 穢� �� 순±��ヴ. 健 �맑�ュ <tt>fromRoman</tt>槪 <tt>'MMMM'</tt>劍頌 繇��� 읒壽況 �ヴ誦�ヴ; 健靈 <tt>MMMM</tt>ュ 傑湧� 頌譁 밝腱頌 윈���頌, �靴ュ 健↔槪 <tt>'MMMMM'</tt>�� 粱� 이奐 ��≠ �ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change.1.4"><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">京� 瑩↑� �뱉珞腱 瑩↑鋼, <tt>1</tt>읒밀 <tt>3999</tt>��� �胛꿴읒 �ュ 匯� 밝腱�槪 耘둥健�ヴ. 그 �胛ュ 健靈 蟯���劍�頌, 健壽� <tt>for</tt> 耘둥健�鋼 �� <tt>4999</tt>�� 이�≠도刷 ″�� ��≠ �ヴ.</td></tr></table> <p>健靈 �靴� �맑� �健맑ュ �靴� �頌� �깬獵�劍頌 �頌�倪ヴ, 그壽寧 �靴� ��ュ 그峀� 꿩ヴ, 그甦밀 �靴ュ �靴� �맑� �健맑燁 �。鋼 ���靴�� 잇��ヴ.</p> <p><a name="d42e18743"></a><b>Example 5.28. Output of <tt>romantest71.py</tt> against <tt>roman71.py</tt></b></p> <pre><span class="computeroutput">fromRoman should only accept uppercase input ... ERROR        </span><a name="roman.change.2.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="computeroutput">toRoman should always return uppercase ... ERRORfromRoman should fail with blank string ... okfromRoman should fail with malformed antecedents ... okfromRoman should fail with repeated pairs of numerals ... okfromRoman should fail with too many repeated numerals ... okfromRoman should give known result with known input ... ERROR </span><a name="roman.change.2.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /><span class="computeroutput">toRoman should give known result with known input ... ERROR   </span><a name="roman.change.2.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /><span class="computeroutput">fromRoman(toRoman(n))==n for all n ... ERROR                  </span><a name="roman.change.2.4"></a><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /><span class="computeroutput">toRoman should fail with non-integer input ... oktoRoman should fail with negative input ... oktoRoman should fail with large input ... oktoRoman should fail with 0 input ... ok</span></pre> <a name="d42e18766"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change.2.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�靴� �뱉珞腱 瑩↑鋼 健靈 ���ヴ. ���� 그↔鋼 <tt>1</tt>쇰� <tt>4999</tt>�� 耘둥健 ��梟, <tt>toRoman</tt>鋼 읫曳 <tt>1</tt>읒밀 <tt>3999</tt>��� 밝腱梟槪 良껍�健� ┐珞健ヴ, 그甦밀 그 �맑� �健맑≠ <tt>4000</tt>읒 도マ�腱 譁腱 그↔鋼 ��� ↔健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change.2.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>fromRoman</tt>� 꿱淞玲 』 �맑�ュ <tt>'MMMM'</tt>읒 도マ�腱 譁腱 ��� ↔健ヴ, ���� <tt>fromRoman</tt>鋼 윈�尤 健↔健 朗湧� 頌譁 밝腱�� 휸、�� ┐珞健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change.2.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>toRoman</tt>� 꿱淞玲 』 �맑�ュ <tt>4000</tt>읒 도マ�腱 譁腱 ��� ↔健ヴ, ���� <tt>toRoman</tt>鋼 윈�尤 健↔健 �胛況 諒�祿 ↔健�� 휸、�� ┐珞健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change.2.4"><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">京� 瑩↑ 을맸 <tt>4000</tt>읒 도マ�腱 譁腱 ��� ↔健ヴ, ���� <tt>toRoman</tt>鋼 윈�尤 健↔健 �胛況 諒�祿 ↔健�� 휸、�� ┐珞健ヴ.</td></tr></table> <pre><span class="computeroutput">======================================================================ERROR: fromRoman should only accept uppercase input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage7\romantest71.py", line 161, in testFromRomanCase    numeral = roman71.toRoman(integer)  File "roman71.py", line 28, in toRoman    raise OutOfRangeError, "number out of range (must be 1..3999)"OutOfRangeError: number out of range (must be 1..3999)</span><span class="computeroutput">======================================================================ERROR: toRoman should always return uppercase----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage7\romantest71.py", line 155, in testToRomanCase    numeral = roman71.toRoman(integer)  File "roman71.py", line 28, in toRoman    raise OutOfRangeError, "number out of range (must be 1..3999)"OutOfRangeError: number out of range (must be 1..3999)</span><span class="computeroutput">======================================================================ERROR: fromRoman should give known result with known input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage7\romantest71.py", line 102, in testFromRomanKnownValues    result = roman71.fromRoman(numeral)  File "roman71.py", line 47, in fromRoman    raise InvalidRomanNumeralError, 'Invalid Roman numeral: %s' % sInvalidRomanNumeralError: Invalid Roman numeral: MMMM</span><span class="computeroutput">======================================================================ERROR: toRoman should give known result with known input----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage7\romantest71.py", line 96, in testToRomanKnownValues    result = roman71.toRoman(integer)  File "roman71.py", line 28, in toRoman    raise OutOfRangeError, "number out of range (must be 1..3999)"OutOfRangeError: number out of range (must be 1..3999)</span><span class="computeroutput">======================================================================ERROR: fromRoman(toRoman(n))==n for all n----------------------------------------------------------------------</span><span class="traceback">Traceback (most recent call last):  File "C:\docbook\dip\py\roman\stage7\romantest71.py", line 147, in testSanity    numeral = roman71.toRoman(integer)  File "roman71.py", line 28, in toRoman    raise OutOfRangeError, "number out of range (must be 1..3999)"OutOfRangeError: number out of range (must be 1..3999)</span><span class="computeroutput">----------------------------------------------------------------------Ran 13 tests in 2.213sFAILED (errors=5)</span></pre> <p>健靈 �靴ュ 그 �頌� �깬獵�┐珞읒 ���ュ �맑� �健맑況 ≠�� �劍�頌, �靴ュ 그 ��況 �穢�윈 그 �맑� �健맑잴 獵優맸�ュ ↔읒 ��윈 휸、� � �ヴ.  (윈壽솥健 庚舡劍頌 傑� �맑�況 ���� 맸虔� ┐ ���꺌� � ≠�ュ �맑� � 그 ��ュ 그 �맑� �健맑숩ヴ 據�頌  &#8220;晄�(ahead)&#8221;≠ 껍レ�ュ ↔健ヴ. 그 ��ュ 윈�尤 딘健�ュ ��梟, 윈壽솥鋼 윈�尤 欖≠況 虔돛맸�� �劍�, 그↔健 그 �맑� �健맑況 �� �ュ 뮈。, 윈壽솥鋼 ��槪 燁��ヴ.)</p> <p><a name="d42e18849"></a><b>Example 5.29. Coding the new requirements (<tt>roman72.py</tt>)</b></p> <pre><span class="pystring">"""Convert to and from Roman numerals"""</span><span class="pykeyword">import</span> re<span class="pycomment">#Define exceptions</span><span class="pykeyword">class</span><span class="pyclass"> RomanError</span>(Exception): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> OutOfRangeError</span>(RomanError): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> NotIntegerError</span>(RomanError): <span class="pykeyword">pass</span><span class="pykeyword">class</span><span class="pyclass"> InvalidRomanNumeralError</span>(RomanError): <span class="pykeyword">pass</span><span class="pycomment">#Define digit mapping</span>romanNumeralMap = ((<span class="pystring">'M'</span>,  1000),                   (<span class="pystring">'CM'</span>, 900),                   (<span class="pystring">'D'</span>,  500),                   (<span class="pystring">'CD'</span>, 400),                   (<span class="pystring">'C'</span>,  100),                   (<span class="pystring">'XC'</span>, 90),                   (<span class="pystring">'L'</span>,  50),                   (<span class="pystring">'XL'</span>, 40),                   (<span class="pystring">'X'</span>,  10),                   (<span class="pystring">'IX'</span>, 9),                   (<span class="pystring">'V'</span>,  5),                   (<span class="pystring">'IV'</span>, 4),                   (<span class="pystring">'I'</span>,  1))<span class="pykeyword">def</span><span class="pyclass"> toRoman</span>(n):    <span class="pystring">"""convert integer to Roman numeral"""</span>    <span class="pykeyword">if</span> <span class="pykeyword">not</span> (0 &lt; n &lt; 5000):                                                         <a name="roman.change.3.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" />        <span class="pykeyword">raise</span> OutOfRangeError, <span class="pystring">"number out of range (must be 1..4999)"</span>    <span class="pykeyword">if</span> int(n) &lt;&gt; n:        <span class="pykeyword">raise</span> NotIntegerError, <span class="pystring">"decimals can not be converted"</span>    result = <span class="pystring">""</span>    <span class="pykeyword">for</span> numeral, integer <span class="pykeyword">in</span> romanNumeralMap:        <span class="pykeyword">while</span> n &gt;= integer:            result += numeral            n -= integer    <span class="pykeyword">return</span> result<span class="pycomment">#Define pattern to detect valid Roman numerals</span>romanNumeralPattern = <span class="pystring">'^M?M?M?M?(CM|CD|D?C?C?C?)(XC|XL|L?X?X?X?)(IX|IV|V?I?I?I?)$'</span> <a name="roman.change.3.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /><span class="pykeyword">def</span><span class="pyclass"> fromRoman</span>(s):    <span class="pystring">"""convert Roman numeral to integer"""</span>    <span class="pykeyword">if</span> <span class="pykeyword">not</span> s:        <span class="pykeyword">raise</span> InvalidRomanNumeralError, <span class="pystring">'Input can not be blank'</span>    <span class="pykeyword">if</span> <span class="pykeyword">not</span> re.search(romanNumeralPattern, s):        <span class="pykeyword">raise</span> InvalidRomanNumeralError, <span class="pystring">'Invalid Roman numeral: %s'</span> % s    result = 0    index = 0    <span class="pykeyword">for</span> numeral, integer <span class="pykeyword">in</span> romanNumeralMap:        <span class="pykeyword">while</span> s[index:index+len(numeral)] == numeral:            result += integer            index += len(numeral)    <span class="pykeyword">return</span> result</pre> <a name="d42e18861"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change.3.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>toRoman</tt>鋼, �胛 瑩↑읒밀, 읫曳 �寧� 虔鋼 순±梟槪 ��頌 �ヴ. �靴≠ <tt>0 &lt; n &lt; 4000</tt>槪 瑩↑�タ ≒읒밀, �靴ュ 健靈 <tt>0 &lt; n &lt; 5000</tt>況 瑩↑�ヴ. 그靴� �靴ュ �靴≠ <tt>件劍�ュ (raise)</tt> 그 읒壽 回맸�況 순±�윈 그 �頌� 閻�≠�� �胛(<tt>1..3999</tt>��읒 <tt>1..4999</tt>)況 �윳�ヴ. �靴ュ 그 ��� 寧蛔� ��읒 ��밀ュ 껍朗塑 순±도 � ��≠꼬ヴ; 그↔鋼 健藜 그 �頌� �健맑�槪 庚靴�ヴ.  (그↔鋼 腱�健 烙¨� 、、� 絹읒 ��윈 �寧∽ <tt>'M'</tt>槪 偈≠�ヴ; <tt>4000</tt>健 ��, 그↔鋼 <tt>'MMMM'</tt>槪 �껍 冷 ↔健ヴ. 健�읒ュ 그↔健 健峀∽ �� 꿩鋼 傑件� 健傑ュ �靴≠ �胛 瑩↑劍頌 �맸�劍頌 그↔槪 燁��윔� ┐珞健ヴ.)</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change.3.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�靴ュ <tt>fromRoman</tt>읒 �� 순±槪 ≠� ��≠ 꼬ヴ. 傑件� 순±健�� <tt>romanNumeralPattern</tt>읒 �� ↔乾뎬; 梟� 윈壽솥健 腱뭐尤 ��숩�, �靴≠ � ヴ患 묽��乾 <tt>M</tt>槪 그 穢깍 ���� 憬 纜櫻 뭏�읒 偈≠�ヴュ ↔槪 꿱∽ � ↔健ヴ. 健↔鋼 3 ��읒 4⌒� <tt>M</tt> 珞腱�� ��� ↔健ヴ, 그↔鋼 �靴≠ <tt>3999</tt> ��읒 <tt>4999</tt>� 돛�� 頌譁 밝腱況 ��� ↔健�ュ ↔槪 ┥�ヴ. �靈� <tt>fromRoman</tt> ��ュ 잽�尤 件��健ヴ; 그↔鋼 �� �손�ュ 頌譁 밝腱�槪 �ヴ淞밀, �譁寧 皇健 그↔�健 �손�ュ� �濾�� 꿩�밀, 그↔�槪 偈≠� �ュヴ.  그↔健 健�읒ュ <tt>'MMMM'</tt>槪 庚靴�� 꿩鋼 傑件� 健傑ュ �靴≠ 그 穢깍 ��� �� 羊禮�頌 �맸�劍頌 그↔槪 燁��윔� ┐珞健ヴ.</td></tr></table> <p>健 듬 ⌒� 虔鋼 순±健 �靴≠ ��� 匯� ↔健�ュ ↔健 윈壽솥鋼 ��맑壽� � �ヴ. 腱, 蘆恍槪 ◎健 ◎�頌 礪� 譁�; 윈壽솥 맑맑頌 꿱껍숩�:</p> <p><a name="roman.roman72.output"></a><b>Example 5.30. Output of <tt>romantest72.py</tt> against <tt>roman72.py</tt></b></p> <pre><span class="computeroutput">fromRoman should only accept uppercase input ... oktoRoman should always return uppercase ... okfromRoman should fail with blank string ... okfromRoman should fail with malformed antecedents ... okfromRoman should fail with repeated pairs of numerals ... okfromRoman should fail with too many repeated numerals ... okfromRoman should give known result with known input ... oktoRoman should give known result with known input ... okfromRoman(toRoman(n))==n for all n ... oktoRoman should fail with non-integer input ... oktoRoman should fail with negative input ... oktoRoman should fail with large input ... oktoRoman should fail with 0 input ... ok----------------------------------------------------------------------Ran 13 tests in 3.685sOK</span> <a name="roman.change.4.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></pre> <a name="d42e18933"></a><table border="0" summary="Callout list"><tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change.4.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">匯� �맑� �健맑ュ ���ヴ.  ��槪 丸偈��.</td></tr></table><p>�□�乾 傑� �맑�≠ ┥�ュ ↔鋼 &#8220;寧況 礪劍맸읫&#8221;�� 恍�ュ �頌그甦蛔읒∽ �梧� ��≠ 꼬ヴュ ↔健ヴ.</p><a name="roman.refactoring"></a><h2><a name="roman.refactoring"></a>5.13. �솥�</h2> <p>�□�乾 傑� �맑�읒 ��윈 ≠� 霓鋼 ↔鋼 윈壽솥� 匯� �맑� �健맑≠ ���윔槪 ┐ 윈壽솥健 ニ臘ュ ＼穢健 껍レ�, ���ュ �┱ ヴ患 �┶健 그�� ��況 淮��뀜ヴ� 윈壽솥槪 �祿� ┐읒 그靴� 윈壽솥鋼 �靈頌 윈壽솥健 그塑 ↔健 껍レ�ュ ↔槪 <i>���</i> � ��槪 ┐ ニ臘ュ 그 ＼穢도 껍レヴ. 傑� �맑�읒 ��윈 ≠� 霓鋼 ↔鋼 그↔健, 駑玗�∽ �솥�� � �ュ 腱傑況 윈壽솥읒∽ 影ヴュ ↔健ヴ.</p> <p>�솥�ュ 虔돛�� �ュ ��況 ��밀, 그↔槪 �� 剛 虔돛�도刷 �ュ 庚靴�穢健ヴ. 숩�, &#8220;� 霓鋼 (better)&#8221; 健�ュ ↔鋼 &#8220;� �患 (faster)&#8221;槪 �藜�ュ뎬, 그峀�梟 그↔鋼 �� &#8220;� �鋼 回匯靴況 ���&#8221;槪 �藜� �도 ��, �ュ &#8220;� �鋼 뒵맑� �歲槪 ���&#8221;槪 �藜��寧, 玗鋼 �뮈�∽ &#8220;� �껍�∽&#8221;況 �藜� � �ヴ. 윈壽솥읒∽, 윈壽솥� �頌鹽�읒, 윈壽솥� ⌒烙橒±읒, 그↔健 �┱ �藜健�� 。읒, �솥�ュ 匯� �頌그少� ���乾 �∠읒 燁��ヴ.</p> <p>윈�읒밀, &#8220;� 霓鋼 (better)&#8221;ュ &#8220;� �患 (faster)&#8221;槪 �藜�ヴ. 깬譴�劍頌 恍��, <tt>fromRoman</tt> ��ュ �靈頌 ��� 뱃도 숩ヴュ � ニ靴ヴ, 頌譁 밝腱況 ↑��� 胛�윈 �靴≠ ���, 그 ���� 뭡≠� 穢깍 ��� ┐珞健ヴ. 그 穢깍 ���槪 껍잇 꼬� �靴淞� �悚�ュ ↔鋼 껍譁도 ≠�≠ 꼬槪 ↔ 　ヴ (그↔鋼 ��� 虔꾑件 �도 ��, 그靴� 그 뭡�≠ � �花∽ 들ヴュ 숩�도 꼬ヴ), 그壽寧 �靴ュ 그 穢깍 ���槪 藜靴 �裔�(precompile)劍頌� 그 ��� 뱃도況 �件 � �ヴ.</p> <p><a name="d42e18980"></a><b>Example 5.31. Compiling regular expressions</b></p> <pre><tt>&gt;&gt;&gt; </tt><span class="userinput"><span class="pykeyword">import</span> re</span><tt>&gt;&gt;&gt; </tt><span class="userinput">pattern = <span class="pystring">'^M?M?M?$'</span></span><tt>&gt;&gt;&gt; </tt><span class="userinput">re.search(pattern, <span class="pystring">'M'</span>)</span>               <a name="roman.refactoring.1.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="computeroutput">&lt;SRE_Match object at 01090490&gt;</span><tt>&gt;&gt;&gt; </tt><span class="userinput">compiledPattern = re.compile(pattern)</span> <a name="roman.refactoring.1.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /><tt>&gt;&gt;&gt; </tt><span class="userinput">compiledPattern</span><span class="computeroutput">&lt;SRE_Pattern object at 00F06E28&gt;</span><tt>&gt;&gt;&gt; </tt><span class="userinput">dir(compiledPattern)</span>                  <a name="roman.refactoring.1.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /><span class="computeroutput">['findall', 'match', 'scanner', 'search', 'split', 'sub', 'subn']</span><tt>&gt;&gt;&gt; </tt><span class="userinput">compiledPattern.search(<span class="pystring">'M'</span>)</span>           <a name="roman.refactoring.1.4"></a><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /><span class="computeroutput">&lt;SRE_Match object at 01104928&gt;</span></pre> <a name="d42e19039"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.1.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健↔鋼 �靴≠ 健�읒 셜 그 깬珞健ヴ: <tt>re.search</tt>ュ 穢깍 ���槪 �寧� 珞腱읽(<tt>pattern</tt>)頌 그靴� 그↔� 件�맸�섰 珞腱읽(<tt>'M'</tt>)槪 ��ヴ  .  梟� 그 ��健 件���, 그 ��ュ 件� ∥譴況 �橒�ュ뎬 그 ∥譴읒∽ 蘿�숩� 穢蟯�∽ 朗�健 件���� �┍∽ 件���ュ� 꿱껍 섰 � �ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.1.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健↔鋼 그 �頌� 깬珞健ヴ: <tt>re.compile</tt>鋼 穢깍 ���槪 珞腱읽頌 ��� �� ∥譴況 �橒�ヴ. 윈�읒ュ 件��ュ 껍朗塑 珞腱읽도 꼬舡槪 ����.  穢깍 ���槪 �裔�ュ ↔鋼 그↔槪 (<tt>'M'</tt>� 　鋼) �┱ �穢� 珞腱읽읒 件�맸�ュ ↔�ュ 껍朗塑 ��健 꼬ヴ; 그↔鋼 읫頌� 그 穢깍 ��� 腱譴읒 �蘇들ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.1.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>re.compile</tt>頌쇰� �橒들, 그 �裔들 �� ∥譴ュ �。� 傑��-숩健ュ ���槪 ≠玲ヴ. (<tt>search</tt>잴 <tt>sub</tt>　鋼) <tt>re</tt> 匯�읒밀 曳閻�劍頌 ��≠�� ↔�健 ��들ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.1.4"><img src="http://kr.diveintopython.net/images/callouts/4.png" alt="4" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">그 �裔들 �� ∥譴� <tt>search</tt> ��況  珞腱읽 <tt>'M'</tt>劍頌 繇��ュ ↔鋼 <tt>re.search</tt>況 그 穢깍 ���� 그 珞腱읽 <tt>'M'</tt> 듬 ⌒況 ≠�� 繇��ュ ↔� 　鋼 件槪 マ뭡�ヴ. 읫曳 �� �, �花∽.  (��, <tt>re.search</tt> ��ュ �뮈�∽ 그 穢깍 ���槪 �裔�� 그靴� 그 ��頌 寧장 �� ∥譴� <tt>search</tt> 回��況 윈壽솥 ��읒 繇��ヴ.)</td></tr></table> <a name="d42e19097"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">윈壽솥健 � 纜健� 穢깍 ���槪 ���淞� � ┐譁ヴ, 윈壽솥鋼 그↔槪 �裔�윈 �� ∥譴況 寓돗�도刷 �윈꺌梟 ��, 그靴�ュ 그 �� ∥譴읒 �ュ 回���槪 曳閻�劍頌 繇��윈꺌梟 �ヴ.</td></tr></table> <p><a name="d42e19102"></a><b>Example 5.32. Compiled regular expressions in <tt>roman81.py</tt></b></p> <p>윈壽솥健 껍曳 그峀∽ �� 꿩뀜ヴ�, 윈壽솥鋼 健↔� 健 甄읒밀 ��들 ヴ患 잇靈�槪 蘆淞 良槪 � 꼬ヴ (<a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.zip">Windows</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.tgz">UNIX</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.hqx">Mac OS</a>).</p> <pre><span class="pycomment"># toRoman and rest of module omitted for clarity</span>romanNumeralPattern = \    re.compile(<span class="pystring">'^M?M?M?M?(CM|CD|D?C?C?C?)(XC|XL|L?X?X?X?)(IX|IV|V?I?I?I?)$'</span>) <a name="roman.refactoring.2.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="pykeyword">def</span><span class="pyclass"> fromRoman</span>(s):    <span class="pystring">"""convert Roman numeral to integer"""</span>    <span class="pykeyword">if</span> <span class="pykeyword">not</span> s:        <span class="pykeyword">raise</span> InvalidRomanNumeralError, <span class="pystring">'Input can not be blank'</span>    <span class="pykeyword">if</span> <span class="pykeyword">not</span> romanNumeralPattern.search(s):                                    <a name="roman.refactoring.2.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" />        <span class="pykeyword">raise</span> InvalidRomanNumeralError, <span class="pystring">'Invalid Roman numeral: %s'</span> % s    result = 0    index = 0    <span class="pykeyword">for</span> numeral, integer <span class="pykeyword">in</span> romanNumeralMap:        <span class="pykeyword">while</span> s[index:index+len(numeral)] == numeral:            result += integer            index += len(numeral)    <span class="pykeyword">return</span> result</pre> <a name="d42e19129"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.2.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健↔鋼 ��尤 �며� 숩乾ヴ, 그壽寧 ��鋼 皇鋼 ↔健 순±��ヴ. <tt>romanNumeralPattern</tt>ュ 健靈 珞腱읽健 껍レヴ; 그↔鋼 <tt>re.compile</tt>劍頌쇰� �橒들 �� ∥譴健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.2.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">그↔鋼 �靴≠ <tt>romanNumeralPattern</tt>읒 �ュ 回��況 曳閻�劍頌 繇�� � �ヴュ ↔槪 �藜�ヴ. 健↔鋼 <tt>re.search</tt>槪 �纜 繇��ュ ↔숩ヴ ��, � �花∽ � ↔健ヴ. 그 穢깍 ���鋼 그 匯�健 庚舡劍頌 �建� ┐ �纜 �裔�� <tt>romanNumeralPattern</tt>읒 ��들ヴ; 그靴�ュ, �靴≠ <tt>fromRoman</tt>槪 繇�� ┐譁ヴ, �靴ュ 蘿 亂읒밀 件�寧ュ �┱ 。閻�乾 ��도 �� 꼬健, �맸 그 建悚 珞腱읽槪 그 穢깍 ���읒 會偈� 섰 � �ヴ.</td></tr></table><p>그甦밀 �靴� 穢깍 ���槪 �裔�� �譁寧 � �患≠?  윈壽솥 맑맑頌 꿱껍숩�:</p> <p><a name="roman.stage8.1.output"></a><b>Example 5.33. Output of <tt>romantest81.py</tt> against <tt>roman81.py</tt></b></p> <pre><span class="computeroutput">.............          </span><a name="roman.refactoring.3.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="computeroutput">----------------------------------------------------------------------Ran 13 tests in 3.385s </span><a name="roman.refactoring.3.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /><span class="computeroutput">OK</span>                     <a name="roman.refactoring.3.3"></a><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></pre> <a name="d42e19175"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.3.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">윈�� �弄��읒밀 ����: 健 纜읒, 寧ュ 그 傑� �맑�況 <tt>-v</tt> 묽��� <i>꼬健</i> ���ヴ, 그甦밀 、 �맑�읒 �� 잽�� <tt>珞밀優 珞腱읽 (docstring)</tt> ��읒, �靴ュ ���ュ 、 �맑�읒 ��윈 � ⌒� 瑩梟槪 �ュヴ.  (梟� �맑�≠ ����, �靴ュ <tt>F</tt>況 寓돗�∽ � ↔健ヴ, 그靴� 梟� 그↔健 읒壽況 ≠玲ヴ�, �靴ュ <tt>E</tt>況 �∽ � ↔健ヴ.  �靴ュ 、、� ��잴 읒壽읒 ��윈 윈�尤 잽�� 을 偈�槪 傑�� ↔健�, 그甦밀 �靴ュ �─� 珞靈도 偈�� 蘆淞〈 �≠ �ヴ.)</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.3.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�靴ュ <tt>13</tt>⌒� �맑�況 그 穢깍 ���槪 藜靴 �裔�� 꿩鋼 <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.roman72.output" title="Example 5.30. Output of romantest72.py against roman72.py"><tt>3.685</tt>競</a> 잴 �귑�윈, <tt>3.385</tt>競 梟읒 ���ヴ.  그↔鋼 ���劍頌 <tt>8%</tt>� ⌒묽健ヴ, 그靴� ��� ↔鋼 그 傑� �맑� 돛꿴읒 뱉��ュ �쇰솥� 맸。鋼 ヴ患 件�槪 �ュ뎬읒 뱉�들ヴュ ↔健ヴ.  (⌒샥�劍頌, 寧ュ 그 穢깍 ���槪 그 腱譴頌, 그 傑� �맑�� 寧蛔�잴 ┨�밀, 맸。 結穢槪 �윔ヴ, 그靴� 蘆≠ 烙¨� ↔鋼 健 穢깍 ���槪 �裔�� 그 <tt>search</tt>況 �귀�劍頌 <tt>54%</tt>穢도 뱃도 �≠맸�ヴュ ↔健�ヴ.)  그塑 。�� �穢劍頌ュ 霓鋼 ��健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.3.3"><img src="http://kr.diveintopython.net/images/callouts/3.png" alt="3" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">읫!, 그靴� 윈壽솥健 ±�� 譁� 꿩槪 ±�頌, �靴� 穢깍 ���槪 藜靴 �裔�ヴ� �밀 �┱ ↔도 �권�� 꿩뀜ヴ, 그靴� �靴ュ 그↔槪 ��� 숩윔ヴ.</td></tr></table> <p>蘆≠ 맸도�숩� 멸鋼 � �寧� �� ��優≠ �ヴ.  穢깍 ��� 깬珞� 손�뭡槪 �腱�, 　鋼 ��槪 虔뭡�ュ뎬 � ⌒ 健�� 籃輛健 �ヴ� �도 ��梟� 件鋼 껍ヱ ↔健ヴ. <a href="http://kr.diveintopython.net/groups?group=comp.lang.python">comp.lang.python</a>읒밀 健 匯�읒 �� �。� �速�읒, �┱ �┶� 靈꿴槪 良껍�윈밀 寧ュ 그 묽��乾 �손들 珞腱읽 ��읒 <tt>{<i>m</i>,<i>n</i>}</tt> 깬珞槪 ����況 맸도�윔ヴ.</p> <p><a name="d42e19234"></a><b>Example 5.34. <tt>roman82.py</tt></b></p> <p>윈壽솥健 껍曳 그峀∽ �� 鰥�ヴ�, 윈壽솥鋼 健↔� 健 甄읒밀 ��들 ヴ患 잇靈�槪 蘆淞 良槪 � �ヴ (<a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.zip">Windows</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.tgz">UNIX</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.hqx">Mac OS</a>).</p> <pre><span class="pycomment"># rest of program omitted for clarity</span><span class="pycomment">#old version</span><span class="pycomment">#romanNumeralPattern = \</span><span class="pycomment">#   re.compile('^M?M?M?M?(CM|CD|D?C?C?C?)(XC|XL|L?X?X?X?)(IX|IV|V?I?I?I?)$')</span><span class="pycomment">#new version</span>romanNumeralPattern = \    re.compile(<span class="pystring">'^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$'</span>) <a name="roman.refactoring.4.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></pre> <a name="d42e19258"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.4.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�靴ュ <tt>M?M?M?M?</tt>況 <tt>M{0,4}</tt>頌 ���윔ヴ.  � ヴ 　鋼 ↔槪 �藜�ヴ: &#8220;0읒밀 4⌒ ��� <tt>M</tt> 珞腱況 件�맸�ヴ&#8221;.  �며�∽, <tt>C?C?C?</tt> ュ <tt>C{0,3}</tt>健 ��ヴ (&#8220;0 읒밀 4 ⌒��� <tt>C</tt> 珞腱況 件�맸�ヴ&#8221;) 그靴� �� <tt>X</tt> 그靴� <tt>I</tt>읒 譁�≠�ヴ.</td></tr></table> <p>그 穢깍 ���� 健塑 ��ュ �。 � 兩ヴ (그峀�梟 居�ュ 릴� 꿩ヴ). � 珞靈ュ, 그↔鋼 �譁寧 � �患≠?</p> <p><a name="d42e19294"></a><b>Example 5.35. Output of <tt>romantest82.py</tt> against <tt>roman82.py</tt></b> </p><pre><span class="computeroutput">.............----------------------------------------------------------------------Ran 13 tests in 3.315s </span><a name="roman.refactoring.5.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="computeroutput">OK</span>                     <a name="roman.refactoring.5.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></pre> <a name="d42e19310"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.5.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">���劍頌, 그 傑� �맑�ュ 健塑 ��� 穢깍���劍頌 2% � �花∽ ��들ヴ. 그 穢도꺌 �寧∽ 숩健�ュ 꿩ュヴ, 그壽寧 ��� ↔鋼 <tt>search</tt> ��ュ �譴 傑� �맑�읒밀 虔鋼 쇰솥健�ュ ↔健ヴ; �쇰솥� 맸。鋼 ヴ患 件�槪 �ュ뎬 뱉�들ヴ. (⌒샥�劍頌 , 寧ュ 그 穢깍 ���梟槪 맸。-結穢� 숩뀜ヴ, 그靴� <tt>search</tt> ��≠ 健 깬珞劍頌 <tt>11%</tt> �花ヴュ ↔槪 꿱뀜ヴ.) 그 穢깍 ���槪 藜靴 �裔�듬� 健 �頌� 깬珞槪 ���� 胛�윈 그↔� 件쇰솥槪 �虔뭡�劍頌�, �靴ュ 그 穢깍 ���� ���悚槪 60% 健� ⌒묽�윔�, 그靴� 그 �譴 傑� �맑�� ��� 뭡�槪 10% 健� ⌒묽�윔ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.5.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">�� 뭡� �≠ 숩ヴ도 �� 燁�� ↔鋼 그 匯�健 윈�尤 잽섀�∽ 虔돛�ヴュ ��健ヴ. 健↔健 力頌 健�읒 蘆≠ 健꺌� �タ 그 腱傑健ヴ: ���� 腱傑, 순±��寧, 玗鋼 그 �┱ 獵、도 �虔뭡� 腱傑 그靴� 그 �穢燁읒 윈壽솥健 ヴ患 �┱ ↔도 ��靴� 꿩뀜ヴュ ↔槪 蟯乾�ュ 腱傑.  健↔鋼 ��� 그 腱譴 梟槪 胛�밀 棠巾꼬健 윈壽솥� ��況 ����ュ 籃暎健 껍レヴ; �靴ュ (&#8220;<tt>fromRoman</tt>槪 � �花∽ 梟�ュ&#8221;) 껍� �穢� ��槪 ≠倪劍�, 그靴�  �靴≠ 그 �穢燁읒 �頌� �그況 健淡� �健�ュ 꿩뀜ュ�읒 ��윈 � 瑩� ��도 錄�� 꿩� �靴ュ 그 ��槪 マ뭡� � ��ヴ. .</td></tr></table> <p>寧ュ ヴ患 �寧梟 � ��� 숩� 멸ヴ, 그靴� 寧밀 寧ュ �솥�況 丸偈� 健 匯�槪 꿴穢맸� ↔健�� �뱃�ヴ. �靴≠ �손�밀 숩뀜�健, 穢깍 ���鋼 ��尤 祿휭�� � �� 그靴� ��尤 �花∽ �덱 숄≠��� � �ヴ. 寧ュ 6⌒�健 �祿�읒 ヴ맸 健 匯�읒 둥껍잴 그↔槪 숩��淞� �悚�� 멸�ュ 꿩ヴ. 蘿速, 그 �맑� �健맑ュ ���ヴ, 그甦밀 寧ュ 그↔健 虔돛�ヴュ ↔槪 꿴ヴ, 그壽寧 梟� 蘆≠ <i>�┍∽</i> 그↔健 虔돛�ュ� 健��� 鰥�ヴ�, 寧ュ �頌� ��槪 偈≠��도, �頌� �그況 �穢��도, 그峀� 꿩劍� 그↔槪 傑�숩�� �도 꼬槪 ↔健ヴ.  珞밀優ュ ���劍頌 燁��ヴ, 그靴� �健�鋼 윈壽솥� 穢깍 ���槪 腱뭐�∽ 珞밀優�ュ 籃輛槪 靈×�ヴ.</p> <p><a name="d42e19346"></a><b>Example 5.36. <tt>roman83.py</tt></b></p> <p>윈壽솥健 껍曳 그峀∽ �� 鰥�ヴ�, 윈壽솥鋼 健↔≠ 健 甄읒밀 ��들 ヴ患 잇靈�槪 蘆淞 良槪 � �ヴ (<a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.zip">Windows</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.tgz">UNIX</a>, <a href="http://kr.diveintopython.net/download/diveintopython-examples-3.4-1.hqx">Mac OS</a>).</p> <pre><span class="pycomment"># rest of program omitted for clarity</span><span class="pycomment">#old version</span><span class="pycomment">#romanNumeralPattern = \</span><span class="pycomment">#   re.compile('^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$')</span><span class="pycomment">#new version</span>romanNumeralPattern = re.compile(<span class="pystring">'''    ^                   # beginning of string    M{0,4}              # thousands - 0 to 4 M's    (CM|CD|D?C{0,3})    # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 C's),                        #            or 500-800 (D, followed by 0 to 3 C's)    (XC|XL|L?X{0,3})    # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 X's),                        #        or 50-80 (L, followed by 0 to 3 X's)    (IX|IV|V?I{0,3})    # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 I's),                        #        or 5-8 (V, followed by 0 to 3 I's)    $                   # end of string    '''</span>, re.VERBOSE) <a name="roman.refactoring.6.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></pre> <a name="d42e19370"></a><table border="0" summary="Callout list"><tr> <td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.6.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left"><tt>re.compile</tt> ��ュ 묽��乾 듬 纜櫻 ��況 �� � �ヴ, 그↔鋼 �寧 健�� �甦그� 裔�劍頌 그 �裔들 穢깍 ���읒 �� ヴ�� 묽���槪 靈��ヴ. 윈�읒 �靴ュ <tt>re.VERBOSE</tt> �甦그況 �穢�ュ뎬, 그↔鋼 �健�읒∽ 그 穢깍 ��� 腱譴 꿴읒 �乾-꿴 �묠健 �ヴュ ↔槪 �맸�ヴ. �묠�� 그 �순� ×�鋼 그 穢깍 ���� 쇰솥劍頌 。��� <i>꿩ュヴ</i>; <tt>re.compile</tt> ��ュ 그 ���槪 �裔� ┐ �뮈�∽ 그↔� 匯듬況 諒�蘆 �禍ヴ. 健 �頌�, &#8220;밈��乾 (verbose)&#8221; ��鋼 잇� ��� 돛件�ヴ, 그壽寧 그↔鋼 솥�尤 �� 居� 릴ヴ.</td></tr></table> <p><a name="d42e19392"></a><b>Example 5.37. Output of <tt>romantest83.py</tt> against <tt>roman83.py</tt></b></p> <pre><span class="computeroutput">.............----------------------------------------------------------------------Ran 13 tests in 3.315s </span><a name="roman.refactoring.7.1"></a><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /><span class="computeroutput">OK</span>                     <a name="roman.refactoring.7.2"></a><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></pre> <a name="d42e19408"></a><table border="0" summary="Callout list"> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.7.1"><img src="http://kr.diveintopython.net/images/callouts/1.png" alt="1" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健 �頌�, &#8220;밈��乾 (verbose)&#8221; ��鋼 健� ��� 穢蟯�∽ � 　鋼 뱃도頌 ��들ヴ. ��, 그 �裔들 �� ∥譴ュ 돛件� ↔健ヴ, ���� <tt>re.compile</tt> ��ュ �靴≠ 偈≠� 匯� ↔�槪 諒�蘆 �靴� ┐珞健ヴ.</td></tr> <tr><td width="12" valign="top" align="left"><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring.7.2"><img src="http://kr.diveintopython.net/images/callouts/2.png" alt="2" border="0" width="12" height="12" /></a> </td><td valign="top" align="left">健 �頌�, &#8220;밈��乾 (verbose)&#8221; ��鋼 잇� ��� 譁�≠�頌 　鋼 �맑� 匯듬況 ���ヴ.  껍朗↔도 순�� 꿩뀜ヴ, 6⌒� �읒 健 匯�읒 ヴ맸 둥껍장 그 �頌그甦蛔≠  그 ��≠ �┍∽ 虔돛�ュ� 健��淞ュ ��� �耘읒 曳��ヴュ 瑩梟 홉�ュ 恍健ヴ.</td></tr></table> <a name="roman.summary"></a><h2><a name="roman.summary"></a>5.14. �  � </h2> <p>傑� �맑�ュ ∠悚� ⌒�劍頌, �據尤 깬���, 傑� ��槪 娛件 �도 �劍� 그靴� 匯� �� �頌鹽�읒밀 傑읓뭡槪 �≠맸� � �ヴ. �� 燁�� ↔鋼 傑� �맑�ュ 梟섐���도, ��맑壽� 珞靈 ���도, �ュ 鋼� �꿱도 껍レ�ュ ↔槪 健� �ュ ↔健ヴ. �禾� �맑� �健맑況 虔뭡�ュ ↔鋼 �貰ヴ, 그靴頌 그↔�槪 ��劍頌 傑��ュ ↔鋼 �� 깍喀槪 ��頌 �ヴ (�尤寧 믹ワ健 ���乾 �그 �穢槪 獪읽尤 �깬� ┐). 傑� �맑�ュ, ���乾 �맑�, �� �맑�, 그靴� ��腱 멨乾 �맑�況 ���, ヴ患 ��� �맑�� ��蘿健 껍レヴ. 그壽寧 傑� �맑�ュ 그騷 ��ヴ, 그靴� 剛 虔돛�ヴ, 그靴� 그↔健 虔돛�ュ ↔槪 숩∽ �� 윈壽솥鋼 그↔꼬健 도뎬譴 �┍∽ �屢ュ� ��∽ � ↔健ヴ.</p><p>健 �鋼 皇鋼 �셜槪 ヴ��ヴ, 그靴� ��� 皇鋼 쇰솥鋼 �健�-�穢�健� 꿩뀜ヴ. 皇鋼 꿇��槪 胛� 傑� �맑� �屬巾���健 �ヴ, 그 匯듬ュ 윈壽솥�健 　鋼 �셜� ⌒��槪 健���況 �깬�ヴ:</p> <a name="d42e19437"></a><ul><li>�穢�健�, 腱돛優��, 그靴� 덱潢�乾 �맑� �健맑況 뒵腱乾��</li><li>�맑�� ��숩ヴ <i>晄�(before)</i> �맑� �健맑況 虔뭡��</li> <li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.success" title="5.3. Testing for success">霓鋼 建悚槪 �맑� ��</a> 그靴� �據� ���槪 瑩↑�ュ �맑� �健맑況 虔뭡��</li> <li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.failure" title="5.4. Testing for failure">寧흴 建悚槪 �맑���</a> 그靴� �據� ���槪 瑩↑�ュ �맑� �健맑況 虔뭡��</li> <li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.bugs" title="5.11. Handling bugs">�그�槪 잇맸��寧</a> 玗鋼or <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change" title="5.12. Handling changing requirements">�頌� �깬獵�槪 �윳�ュ</a> �맑� �健맑況 虔뭡�� ″���</li> <li>駑玗�∽ <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring" title="5.13. Refactoring">�솥��윈</a> ��槪 ⌒묽��, 蟯�뭡, ≠덱뭡, 傑�숩�뭡, �ュ 윈壽솥健 ��� ヴ患 匯� -≠�뭡槪 ⌒묽��</li></ul> <p>��, 윈壽솥鋼 �꿴�∽ ヴ舡� �健�-�穢� ↔�槪 �� �윈꺌 �ヴ:</p><a name="d42e19478"></a><ul> <li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.testtoromanknownvalues.example" title="Example 5.2. testToRomanKnownValues"><tt>unittest.TestCase</tt>況 �쇰�甦맑優 ��</a> 그靴� ⌒샥�乾 �맑� �健맑況 胛� 回��況 虔뭡��</li> <li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.testtoromanknownvalues.example" title="Example 5.2. testToRomanKnownValues"><tt>assertEqual</tt></a>況 ���윈 ��≠ 꿱淞玲 』槪 �橒�ュ� 瑩↑��</li> <li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.tobadinput.example" title="Example 5.3. Testing bad input to toRoman"><tt>assertRaises</tt></a>況 ���윈 ��≠ 꿱淞玲 잇�況 件劍�ュ� 瑩↑��</li> <li>윈壽솥� <tt>if __name__</tt>據읒밀 <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1.output" title="Example 5.8. Output of romantest1.py against roman1.py"><tt>unittest.main()</tt></a>況 繇��윈 윈壽솥� 匯� �맑� �健맑況 �纜읒 ����</li> <li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1.output" title="Example 5.8. Output of romantest1.py against roman1.py">밈��乾(verbose)</a> �ュ <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage8.1.output" title="Example 5.33. Output of romantest81.py against roman81.py">件��乾(regular)</a> 匯�</li>頌 傑� �맑�況 ����</ul> <p><b>� 居�꺌 � ↔</b></p><ul> <li><a href="http://kr.diveintopython.net/">XProgramming.com</a>읒ュ ヴ患 皇鋼 꿇��槪 胛� <a href="http://kr.diveintopython.net/software.htm">傑� �맑� �屬巾��況 蘆淞 良槪 � �ュ </a>換��健 �ヴ.</li></ul> <br /><hr width="100" align="left" /><p><sup>[<a name="ftn.d42e16894" href="http://kr.diveintopython.net/html/chapter5.htm#d42e16894">11</a>] </sup>&#8220;寧ュ 匯� ↔槪 �쇰� � �ヴ, 傑玗梟 홉�ュ.&#8221; --Oscar Wilde</p> <hr /> <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr> <td valign="top" width="35%"><a href="http://kr.diveintopython.net/html/chapter4.htm"><<&nbsp;靈 4 � HTML 庚靴</a></td> <td align="center" valign="top" width="30%"><a href="http://kr.diveintopython.net/html/index.htm">�    量</a></td> <td align="right" valign="top" width="35%"><a href="http://kr.diveintopython.net/html/appendix.htm">쇰    刷&nbsp;>></a></td> </tr></table> <hr /> </body></html>
