<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> <html><head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> <title>Dive Into Python</title><link rel="stylesheet" href="/css/diveintopython.css" type="text/css" /><link rev="made" href="josh@servercobra.com" /><meta name="generator" content="DocBook XSL Stylesheets V1.36" /> <meta name="keywords" content="Python, Dive Into Python, tutorial, object-oriented, programming, documentation, book, free" /> <meta name="description" content="a free Python tutorial for experienced programmers" /><script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-9740779-18']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script></head> <body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<hr /> <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr> <td valign="top" width="35%"><a href="http://kr.diveintopython.net/html/chapter5.htm"><<&nbsp;靈 5 � 傑� �맑�</a></td> <td align="center" valign="top" width="30%"><a href="http://kr.diveintopython.net/html/index.htm">�    量</a></td> <td align="right" valign="top" width="35%"><a href="http://kr.diveintopython.net/html/gnufdl.htm">Gnu Free Document License&nbsp;>></a></td> </tr></table> <hr /> <h2><a name="furtherreading"></a>Appendix A. Further reading</h2><p><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper">Chapter 1. Getting To Know Python</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.docstring">1.3. Documenting functions</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/essays/styleguide.html"><i>Python Style Guide</i></a> discusses how to write a good <tt>docstring</tt>.</li><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> discusses conventions for <a href="http://kr.diveintopython.net/doc/current/tut/node6.html#SECTION006750000000000000000">spacing in <tt>docstring</tt>s</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.objects">1.4. Everything is an object</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/ref/"><i>Python Reference Manual</i></a> explains exactly what it means to say that <a href="http://kr.diveintopython.net/doc/current/ref/objects.html">everything in Python is an object</a>.</li><li><a href="http://kr.diveintopython.net/~u13208596/guides/">eff-bot</a> summarizes <a href="http://kr.diveintopython.net/~u13208596/guides/python-objects.htm">Python objects</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.indenting">1.5. Indenting code</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/ref/"><i>Python Reference Manual</i></a> discusses cross-platform indentation issues and <a href="http://kr.diveintopython.net/doc/current/ref/indentation.html">shows various indentation errors</a>.</li><li><a href="http://kr.diveintopython.net/doc/essays/styleguide.html"><i>Python Style Guide</i></a> discusses good indentation style.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.testing">1.6. Testing modules</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/ref/"><i>Python Reference Manual</i></a> discusses the low-level details of <a href="http://kr.diveintopython.net/doc/current/ref/import.html">importing modules</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.dict">1.7. Dictionaries 101</a><p></p><ul><li><a href="http://kr.diveintopython.net/obp/thinkCSpy/"><i>How to Think Like a Computer Scientist</i></a> teaches about dictionaries and shows how to <a href="http://kr.diveintopython.net/obp/thinkCSpy/chap10.htm">use dictionaries to model sparse matrices</a>.</li><li><a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/199/">Python Knowledge Base</a> has lots of <a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/541">example code using dictionaries</a>.</li><li><a href="http://kr.diveintopython.net/ASPN/Python/Cookbook/">Python Cookbook</a> discusses <a href="http://kr.diveintopython.net/ASPN/Python/Cookbook/Recipe/52306">how to sort the values of a dictionary by key</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> summarizes <a href="http://kr.diveintopython.net/doc/current/lib/typesmapping.html">all the dictionary methods</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.list">1.8. Lists 101</a><p></p><ul><li><a href="http://kr.diveintopython.net/obp/thinkCSpy/"><i>How to Think Like a Computer Scientist</i></a> teaches about lists and makes an important point about <a href="http://kr.diveintopython.net/obp/thinkCSpy/chap08.htm">passing lists as function arguments</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> shows how to <a href="http://kr.diveintopython.net/doc/current/tut/node7.html#SECTION007110000000000000000">use lists as stacks and queues</a>.</li><li><a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/199/">Python Knowledge Base</a> answers <a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/534">common questions about lists</a> and has lots of <a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/540">example code using lists</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> summarizes <a href="http://kr.diveintopython.net/doc/current/lib/typesseq-mutable.html">all the list methods</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.tuple">1.9. Tuples 101</a><p></p><ul><li><a href="http://kr.diveintopython.net/obp/thinkCSpy/"><i>How to Think Like a Computer Scientist</i></a> teaches about tuples and shows how to <a href="http://kr.diveintopython.net/obp/thinkCSpy/chap10.htm">concatenate tuples</a>.</li><li><a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/199/">Python Knowledge Base</a> shows how to <a href="http://kr.diveintopython.net/knowledge-base/view.phtml/aid/4553/fid/587">sort a tuple</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> shows how to <a href="http://kr.diveintopython.net/doc/current/tut/node7.html#SECTION007300000000000000000">define a tuple with one element</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.vardef">1.10. Defining variables</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/ref/"><i>Python Reference Manual</i></a> shows examples of <a href="http://kr.diveintopython.net/doc/current/ref/implicit-joining.html">when you can skip the line continuation character</a> and <a href="http://kr.diveintopython.net/doc/current/ref/explicit-joining.html">when you have to use it</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.multiassign">1.11. Assigning multiple values at once</a><p></p><ul><li><a href="http://kr.diveintopython.net/obp/thinkCSpy/"><i>How to Think Like a Computer Scientist</i></a> shows how to use multi-variable assignment to <a href="http://kr.diveintopython.net/obp/thinkCSpy/chap10.htm">swap the values of two variables</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.stringformatting">1.12. Formatting strings</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> summarizes <a href="http://kr.diveintopython.net/doc/current/lib/typesseq-strings.html">all the string formatting format characters</a>.</li><li><a href="http://kr.diveintopython.net/cgi-bin/info2www?(gawk)Top"><i>Effective AWK Programming</i></a> discusses <a href="http://kr.diveintopython.net/cgi-bin/info2www?(gawk)Control+Letters">all the format characters</a> and advanced string formatting techniques like <a href="http://kr.diveintopython.net/cgi-bin/info2www?(gawk)Format+Modifiers">specifying width, precision, and zero-padding</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.map">1.13. Mapping lists</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> discusses another way to map lists <a href="http://kr.diveintopython.net/doc/current/tut/node7.html#SECTION007130000000000000000">using the built-in <tt>map</tt> function</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> shows how to <a href="http://kr.diveintopython.net/doc/current/tut/node7.html#SECTION007140000000000000000">do nested list comprehensions</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.join">1.14. Joining lists and splitting strings</a><p></p><ul><li><a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/199/">Python Knowledge Base</a> answers <a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/480">common questions about strings</a> and has lots of <a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/539">example code using strings</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> summarizes <a href="http://kr.diveintopython.net/doc/current/lib/string-methods.html">all the string methods</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> documents the <a href="http://kr.diveintopython.net/doc/current/lib/module-string.html"><tt>string</tt> module</a>.</li><li><a href="http://kr.diveintopython.net/doc/FAQ.html"><i>The Whole Python FAQ</i></a> explains <a href="http://kr.diveintopython.net/cgi-bin/faqw.py?query=4.96&amp;querytype=simple&amp;casefold=yes&amp;req=search">why <tt>join</tt> is a string method</a> instead of a list method.</li></ul><p></p></li></ul><p><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper">Chapter 2. The Power Of Introspection</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.optional">2.2. Optional and named arguments</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> discusses exactly <a href="http://kr.diveintopython.net/doc/current/tut/node6.html#SECTION006710000000000000000">when and how default arguments are evaluated</a>, which matters when the default value is a list or an expression with side effects.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.builtin">2.3. <tt>type</tt>, <tt>str</tt>, <tt>dir</tt>, and other built-in functions</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> documents <a href="http://kr.diveintopython.net/doc/current/lib/built-in-funcs.html">all the built-in functions</a> and <a href="http://kr.diveintopython.net/doc/current/lib/module-exceptions.html">all the built-in exceptions</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.filter">2.5. Filtering lists</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> discusses another way to filter lists <a href="http://kr.diveintopython.net/doc/current/tut/node7.html#SECTION007130000000000000000">using the built-in <tt>filter</tt> function</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.andor">2.6. The peculiar nature of <tt>and</tt> and <tt>or</tt></a><p></p><ul><li><a href="http://kr.diveintopython.net/ASPN/Python/Cookbook/">Python Cookbook</a> discusses <a href="http://kr.diveintopython.net/ASPN/Python/Cookbook/Recipe/52310">alternatives to the <tt>and-or</tt> trick</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.lambda">2.7. Using <tt>lambda</tt> functions</a><p></p><ul><li><a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/199/">Python Knowledge Base</a> discusses using <tt>lambda</tt> to <a href="http://kr.diveintopython.net/knowledge-base/view.phtml/aid/6081/fid/241">call functions indirectly</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> shows how to <a href="http://kr.diveintopython.net/doc/current/tut/node6.html#SECTION006740000000000000000">access outside variables from inside a <tt>lambda</tt> function</a>.  (<a href="http://kr.diveintopython.net/peps/pep-0227.html">PEP 227</a> explains how this will change in future versions of Python.)</li><li><a href="http://kr.diveintopython.net/doc/FAQ.html"><i>The Whole Python FAQ</i></a> has examples of <a href="http://kr.diveintopython.net/doc/FAQ.html#4.15">obfuscated one-liners using <tt>lambda</tt></a>.</li></ul><p></p></li></ul><p><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo">Chapter 3. An Object-Oriented Framework</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.fromimport">3.2. Importing modules using <tt>from <i>module</i> import</tt></a><p></p><ul><li><a href="http://kr.diveintopython.net/~u13208596/guides/">eff-bot</a> has more to say on <a href="http://kr.diveintopython.net/~u13208596/guides/import-confusion.htm"><tt>import <i>module</i></tt> <i>vs.</i> <tt>from <i>module</i> import</tt></a>.</li><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> discusses advanced import techniques, including <a href="http://kr.diveintopython.net/doc/current/tut/node8.html#SECTION008410000000000000000"><tt>from <i>module</i> import *</tt></a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.class">3.3. Defining classes</a><p></p><ul><li><a href="http://kr.diveintopython.net/~agauld/"><i>Learning to Program</i></a> has a gentler <a href="http://kr.diveintopython.net/~agauld/tutclass.htm">introduction to classes</a>.</li><li><a href="http://kr.diveintopython.net/obp/thinkCSpy/"><i>How to Think Like a Computer Scientist</i></a> shows how to <a href="http://kr.diveintopython.net/obp/thinkCSpy/chap11.htm">use classes to model compound datatypes</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> has an in-depth look at <a href="http://kr.diveintopython.net/doc/current/tut/node11.html">classes, namespaces, and inheritance</a>.</li><li><a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/199/">Python Knowledge Base</a> answers <a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/242">common questions about classes</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.create">3.4. Instantiating classes</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> summarizes <a href="http://kr.diveintopython.net/doc/current/lib/specialattrs.html">built-in attributes like <tt>__class__</tt></a>.</li><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> documents the <a href="http://kr.diveintopython.net/doc/current/lib/module-gc.html"><tt>gc</tt> module</a>, which gives you low-level control over Python's garbage collection.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.userdict">3.5. <tt>UserDict</tt>: a wrapper class</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> documents the <a href="http://kr.diveintopython.net/doc/current/lib/module-UserDict.html"><tt>UserDict</tt> module</a> and the <a href="http://kr.diveintopython.net/doc/current/lib/module-copy.html"><tt>copy</tt> module</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.morespecial">3.7. Advanced special class methods</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/ref/"><i>Python Reference Manual</i></a> documents <a href="http://kr.diveintopython.net/doc/current/ref/specialnames.html">all the special class methods</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.private">3.9. Private functions</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> discusses the inner workings of <a href="http://kr.diveintopython.net/doc/current/tut/node11.html#SECTION0011600000000000000000">private variables</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.exception">3.10. Handling exceptions</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> discusses exceptions, including <a href="http://kr.diveintopython.net/doc/current/tut/node10.html#SECTION0010400000000000000000">raising your own exceptions and handling multiple exceptions at once</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> summarizes <a href="http://kr.diveintopython.net/doc/current/lib/module-exceptions.html">all the built-in exceptions</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> documents the <a href="http://kr.diveintopython.net/doc/current/lib/module-getpass.html">getpass</a> module.</li><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> documents the <a href="http://kr.diveintopython.net/doc/current/lib/module-traceback.html"><tt>traceback</tt> module</a>, which provides low-level access to exception attributes after an exception is raised.</li><li><a href="http://kr.diveintopython.net/doc/current/ref/"><i>Python Reference Manual</i></a> discusses the inner workings of the <a href="http://kr.diveintopython.net/doc/current/ref/try.html"><tt>try...except</tt> block</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.files">3.11. File objects</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> discusses reading and writing files, including how to <a href="http://kr.diveintopython.net/doc/current/tut/node9.html#SECTION009210000000000000000">read a file one line at a time into a list</a>.</li><li><a href="http://kr.diveintopython.net/~u13208596/guides/">eff-bot</a> discusses efficiency and performance of <a href="http://kr.diveintopython.net/~u13208596/guides/readline-performance.htm">various ways of reading a file</a>.</li><li><a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/199/">Python Knowledge Base</a> answers <a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/552">common questions about files</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> summarizes <a href="http://kr.diveintopython.net/doc/current/lib/bltin-file-objects.html">all the file object methods</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.modules">3.13. More on modules</a><p></p><ul><li><a href="http://kr.diveintopython.net/doc/current/tut/tut.html"><i>Python Tutorial</i></a> discusses exactly <a href="http://kr.diveintopython.net/doc/current/tut/node6.html#SECTION006710000000000000000">when and how default arguments are evaluated</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> documents the <a href="http://kr.diveintopython.net/doc/current/lib/module-sys.html"><tt>sys</tt></a> module.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.os">3.14. The <tt>os</tt> module</a><p></p><ul><li><a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/199/">Python Knowledge Base</a> answers <a href="http://kr.diveintopython.net/knowledge-base/index.phtml/fid/240">questions about the <tt>os</tt> module</a>.</li><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> documents the <a href="http://kr.diveintopython.net/doc/current/lib/module-os.html"><tt>os</tt></a> module and the <a href="http://kr.diveintopython.net/doc/current/lib/module-os.path.html"><tt>os.path</tt></a> module.</li></ul><p></p></li></ul><p><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect">Chapter 4. HTML Processing</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.re">4.9. Regular expressions 101</a><p></p><ul><li><a href="http://kr.diveintopython.net/regex/regex.html">Regular Expression HOWTO</a> teaches about regular expressions and how to use them in Python.</li><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> summarizes <a href="http://kr.diveintopython.net/doc/current/lib/module-re.html">the <tt>re</tt> module</a>.</li></ul><p></p></li></ul><p><a href="http://kr.diveintopython.net/html/chapter5.htm#roman">Chapter 5. Unit Testing</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.divein">5.1. Diving in</a><p></p><ul><li><a href="http://kr.diveintopython.net/roman/front.htm">This site</a> has more on Roman numerals, including a fascinating <a href="http://kr.diveintopython.net/roman/intro.htm">history</a> of how Romans and other civilizations really used them (short answer: haphazardly and inconsistently).</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.romantest">5.2. Introducing <tt>romantest.py</tt></a><p></p><ul><li><a href="http://kr.diveintopython.net/">The PyUnit home page</a> has an in-depth discussion of <a href="http://kr.diveintopython.net/pyunit.html">using the <tt>unittest</tt> framework</a>, including advanced features not covered in this chapter.</li><li><a href="http://kr.diveintopython.net/doc/current/lib/"><i>Python Library Reference</i></a> summarizes the <a href="http://kr.diveintopython.net/doc/current/lib/module-unittest.html"><tt>unittest</tt></a> module.</li><li><a href="http://kr.diveintopython.net/">ExtremeProgramming.org</a> discusses <a href="http://kr.diveintopython.net/rules/unittests.html">why you should write unit tests</a>.</li><li><a href="http://kr.diveintopython.net/cgi/wiki">The Portland Pattern Repository</a> has an ongoing discussion of <a href="http://kr.diveintopython.net/cgi/wiki?UnitTests">unit tests</a>, including a <a href="http://kr.diveintopython.net/cgi/wiki?StandardDefinitionOfUnitTest">standard definition</a>, why you should <a href="http://kr.diveintopython.net/cgi/wiki?CodeUnitTestFirst">code unit tests first</a>, and several in-depth <a href="http://kr.diveintopython.net/cgi/wiki?UnitTestTrial">case studies</a>.</li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.summary">5.14. Summary</a><p></p><ul><li><a href="http://kr.diveintopython.net/">XProgramming.com</a> has links to <a href="http://kr.diveintopython.net/software.htm">download unit testing frameworks</a> for many different languages.</li></ul><p></p></li></ul> <h2><a name="abstracts"></a>Appendix B. A 5-minute review</h2><p><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper">Chapter 1. Getting To Know Python</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.divein">1.1. Diving in</a><blockquote><p>Here is a complete, working Python program.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.funcdef">1.2. Declaring functions</a><blockquote><p>Python has functions like most other languages, but it does not have separate header files like C++ or <tt>interface</tt>/<tt>implementation</tt> sections like Pascal.  When you need a function, just declare it and code it.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.docstring">1.3. Documenting functions</a><blockquote><p>You can document a Python function by giving it a <tt>docstring</tt>.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.objects">1.4. Everything is an object</a><blockquote><p>A function, like everything else in Python, is an object.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.indenting">1.5. Indenting code</a><blockquote><p>Python functions have no explicit <tt>begin</tt> or <tt>end</tt>, no curly braces that would mark where the function code starts and stops.  The only delimiter is a colon (&#8220;<tt>:</tt>&#8221;) and the indentation of the code itself.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.testing">1.6. Testing modules</a><blockquote><p>Python modules are objects and have several useful attributes.  You can use this to easily test your modules as you write them.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.dict">1.7. Dictionaries 101</a><blockquote><p>One of Python's built-in datatypes is the dictionary, which defines one-to-one relationships between keys and values.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.list">1.8. Lists 101</a><blockquote><p>Lists are Python's workhorse datatype.  If your only experience with lists is arrays in Visual Basic or (God forbid) the datastore in Powerbuilder, brace yourself for Python lists.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.tuple">1.9. Tuples 101</a><blockquote><p>A tuple is an immutable list.  A tuple can not be changed in any way once it is created.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.vardef">1.10. Defining variables</a><blockquote><p>Python has local and global variables like most other languages, but it has no explicit variable declarations.  Variables spring into existence by being assigned a value, and are automatically destroyed when they go out of scope.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.multiassign">1.11. Assigning multiple values at once</a><blockquote><p>One of the cooler programming shortcuts in Python is using sequences to assign multiple values at once.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.stringformatting">1.12. Formatting strings</a><blockquote><p>Python supports formatting values into strings.  Although this can include very complicated expressions, the most basic usage is to insert values into a string with the <tt>%s</tt> placeholder.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.map">1.13. Mapping lists</a><blockquote><p>One of the most powerful features of Python is the list comprehension, which provides a compact way of mapping a list into another list by applying a function to each of the elements of the list.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.join">1.14. Joining lists and splitting strings</a><blockquote><p>You have a list of key-value pairs in the form <tt><i>key</i>=<i>value</i></tt>, and you want to join them into a single string.  To join any list of strings into a single string, use the <tt>join</tt> method of a string object.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.summary">1.15. Summary</a><blockquote><p>The <tt>odbchelper.py</tt> program and its output should now make perfect sense.</p></blockquote></li></ul><p><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper">Chapter 2. The Power Of Introspection</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.divein">2.1. Diving in</a><blockquote><p>Here is a complete, working Python program.  You should understand a good deal about it just by looking at it.  The numbered lines illustrate concepts covered in <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper" title="Chapter 1. Getting To Know Python"><i>Getting To Know Python</i></a>.  Don't worry if the rest of the code looks intimidating; you'll learn all about it throughout this chapter.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#apihelper.optional">2.2. Optional and named arguments</a><blockquote><p>Python allows function arguments to have default values; if the function is called without the argument, the argument gets its default value.  Futhermore, arguments can be specified in any order by using named arguments.  Stored procedures in SQL Server Transact/SQL can do this; if you're a SQL Server scripting guru, you can skim this part.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.builtin">2.3. <tt>type</tt>, <tt>str</tt>, <tt>dir</tt>, and other built-in functions</a><blockquote><p>Python has a small set of extremely useful built-in functions.  All other functions are partitioned off into modules.  This was actually a conscious design decision, to keep the core language from getting bloated like other scripting languages (cough cough, Visual Basic).</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.getattr">2.4. Getting object references with <tt>getattr</tt></a><blockquote><p>You already know that <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.objects" title="1.4. Everything is an object">Python functions are objects</a>.  What you don't know is that you can get a reference to a function without knowing its name until run-time, using the <tt>getattr</tt> function.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.filter">2.5. Filtering lists</a><blockquote><p>As you know, Python has powerful capabilities for mapping lists into other lists, via list comprehensions.  This can be combined with a filtering mechanism, where some elements in the list are mapped while others are skipped entirely.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.andor">2.6. The peculiar nature of <tt>and</tt> and <tt>or</tt></a><blockquote><p>In Python, <tt>and</tt> and <tt>or</tt> perform boolean logic as you would expect, but they do not return boolean values; they return one of the actual values they are comparing.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.lambda">2.7. Using <tt>lambda</tt> functions</a><blockquote><p>Python supports an interesting syntax that lets you define one-line mini-functions on the fly.  Borrowed from Lisp, these so-called <tt>lambda</tt> functions can be used anywhere a function is required.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.alltogether">2.8. Putting it all together</a><blockquote><p>The last line of code, the only one we haven't deconstructed yet, is the one that does all the work.  But by now the work is easy, because everything we need is already set up just the way we need it.  All the dominoes are in place; it's time to knock them down.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.summary">2.9. Summary</a><blockquote><p>The <tt>apihelper.py</tt> program and its output should now make perfect sense.</p></blockquote></li></ul><p><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo">Chapter 3. An Object-Oriented Framework</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.divein">3.1. Diving in</a><blockquote><p>Here is a complete, working Python program.  Read the <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.docstring" title="1.3. Documenting functions"><tt>docstring</tt>s</a> of the module, the classes, and the functions to get an overview of what this program does and how it works.  As usual, don't worry about the stuff you don't understand; that's what the rest of the chapter is for.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.fromimport">3.2. Importing modules using <tt>from <i>module</i> import</tt></a><blockquote><p>Python has two ways of importing modules.  Both are useful, and you should know when to use each.  One way, <tt>import <i>module</i></tt>, you've already seen in chapter 1.  The other way accomplishes the same thing but works in subtlely and importantly different ways.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.class">3.3. Defining classes</a><blockquote><p>Python is fully object-oriented: you can define your own classes, inherit from your own or built-in classes, and instantiate the classes you've defined.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.create">3.4. Instantiating classes</a><blockquote><p>Instantiating classes in Python is straightforward.  To instantiate a class, simply call the class as if it were a function, passing the arguments that the <tt>__init__</tt> method defines.  The return value will be the newly created object.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.userdict">3.5. <tt>UserDict</tt>: a wrapper class</a><blockquote><p>As you've seen, <tt>FileInfo</tt> is a class that acts like a dictionary.  To explore this further, let's look at the <tt>UserDict</tt> class in the <tt>UserDict</tt> module, which is the ancestor of our <tt>FileInfo</tt> class.  This is nothing special; the class is written in Python and stored in a <tt>.py</tt> file, just like our code.  In particular, it's stored in the <tt>lib</tt> directory in your Python installation.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.specialmethods">3.6. Special class methods</a><blockquote><p>In addition to normal class methods, there are a number of special methods which Python classes can define.  Instead of being called directly by your code (like normal methods), special methods are called for you by Python in particular circumstances or when specific syntax is used.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.morespecial">3.7. Advanced special class methods</a><blockquote><p>There are more special methods than just <tt>__getitem__</tt> and <tt>__setitem__</tt>.  Some of them let you emulate functionality that you may not even know about.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.classattributes">3.8. Class attributes</a><blockquote><p>You already know about <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.userdict.init.example" title="Example 3.11. Defining the UserDict class">data attributes</a>, which are variables owned by a specific instance of a class.  Python also supports class attributes, which are variables owned by the class itself.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.private">3.9. Private functions</a><blockquote><p>Like most languages, Python has the concept of private functions, which can not be called from outside their module; private class methods, which can not be called from outside their class; and private attributes, which can not be accessed from outside their class.  Unlike most languages, whether a Python function, method, or attribute is private or public is determined entirely by its name.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.exception">3.10. Handling exceptions</a><blockquote><p>Like many object-oriented languages, Python has exception handling via <tt>try...except</tt> blocks.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.files">3.11. File objects</a><blockquote><p>Python has a built-in function, <tt>open</tt>, for opening a file on disk.  <tt>open</tt> returns a file object, which has methods and attributes for getting information about and manipulating the opened file.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.for">3.12. <tt>for</tt> loops</a><blockquote><p>Like most other languages, Python has <tt>for</tt> loops.  The only reason you haven't seen them until now is that Python is good at so many other things that you don't need them as often.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.modules">3.13. More on modules</a><blockquote><p>Modules, like everything else in Python, are objects.  Once imported, you can always get a reference to a module through the global dictionary <tt></tt><tt>sys</tt>.modules.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.os">3.14. The <tt>os</tt> module</a><blockquote><p>The <tt>os</tt> module has lots of useful functions for manipulating files and processes, and <tt>os.path</tt> has functions for manipulating file and directory paths.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.alltogether">3.15. Putting it all together</a><blockquote><p>Once again, all the dominoes are in place.  We've seen how each line of code works.  Now let's step back and see how it all fits together.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.summary">3.16. Summary</a><blockquote><p>The <tt>fileinfo.py</tt> program should now make perfect sense.</p></blockquote></li></ul><p><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect">Chapter 4. HTML Processing</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.divein">4.1. Diving in</a><blockquote><p>I often see questions on <a href="http://kr.diveintopython.net/groups?group=comp.lang.python">comp.lang.python</a> like &#8220;How can I list all the [headers|images|links] in my HTML document?&#8221;  &#8220;How do I [parse|translate|munge] the text of my HTML document but leave the tags alone?&#8221;  &#8220;How can I [add|remove|quote] attributes of all my HTML tags at once?&#8221;  This chapter will answer all of these questions.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.sgmllib">4.2. Introducing <tt>sgmllib.py</tt></a><blockquote><p>HTML processing is broken into three steps: breaking down the HTML into its constituent pieces, fiddling with the pieces, and reconstructing the pieces into HTML again.  The first step is done by <tt>sgmllib.py</tt>, a part of the standard Python library.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.extract">4.3. Extracting data from HTML documents</a><blockquote><p>To extract data from HTML documents, subclass the <tt>SGMLParser</tt> class and define methods for each tag or entity you want to capture.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.basehtml">4.4. Introducing <tt>BaseHTMLProcessor.py</tt></a><blockquote><p><tt>SGMLParser</tt> doesn't produce anything by itself.  It parses and parses and parses, and it calls a method for each interesting thing it finds, but the methods don't do anything.  <tt>SGMLParser</tt> is an HTML <i>consumer</i>: it takes HTML and breaks it down into small, structured pieces.  As you saw in the <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.extract" title="4.3. Extracting data from HTML documents">previous section</a>, you can subclass <tt>SGMLParser</tt> to define classes that catch specific tags and produce useful things, like a list of all the links on a web page.  Now we'll take this one step further by defining a class that catches everything <tt>SGMLParser</tt> throws at it and reconstructs the complete HTML document.  In technical terms, this class will be an HTML <i>producer</i>.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.locals">4.5. <tt>locals</tt> and <tt>globals</tt></a><blockquote><p>Python has two built-in functions, <tt>locals</tt> and <tt>globals</tt>, which provide dictionary-based access to local and global variables.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.dictsub">4.6. Dictionary-based string formatting</a><blockquote><p>There is an alternative form of string formatting that uses dictionaries instead of tuples of values.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.quoting">4.7. Quoting attribute values</a><blockquote><p>A common question on <a href="http://kr.diveintopython.net/groups?group=comp.lang.python">comp.lang.python</a> is &#8220;I have a bunch of HTML documents with unquoted attribute values, and I want to properly quote them all.  How can I do this?&#8221;<sup>[<a name="d42e14710" href="http://kr.diveintopython.net/html/appendix.htm#ftn.d42e14710">10</a>]</sup>  (This is generally precipitated by a project manager who has found the HTML-is-a-standard religion joining a large project and proclaiming that all pages must validate against an HTML validator.  Unquoted attribute values are a common violation of the HTML standard.)  Whatever the reason, unquoted attribute values are easy to fix by feeding HTML through <tt>BaseHTMLProcessor</tt>.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.dialectizer">4.8. Introducing <tt>dialect.py</tt></a><blockquote><p><tt>Dialectizer</tt> is a simple (and silly) descendant of <tt>BaseHTMLProcessor</tt>.  It runs blocks of text through a series of substitutions, but it makes sure that anything within a <tt></tt><tt>&lt;pre&gt;</tt>...<tt>&lt;/pre&gt;</tt> block passes through unaltered.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.re">4.9. Regular expressions 101</a><blockquote><p>Regular expressions are a powerful (and fairly standardized) way of searching, replacing, and parsing text with complex patterns of characters.  If you've used regular expressions in other languages (like Perl), you should skip this section and just read the summary of the <a href="http://kr.diveintopython.net/doc/current/lib/re.html"><tt>re</tt> module</a> to get an overview of the available functions and their arguments.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.alltogether">4.10. Putting it all together</a><blockquote><p>Sorry, you've reached the end of the chapter that's been written so far.  Please check back at <a href="http://kr.diveintopython.net/">http://diveintopython.org/</a> to see if there are any updates.</p></blockquote></li></ul><p><a href="http://kr.diveintopython.net/html/chapter5.htm#roman">Chapter 5. Unit Testing</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.divein">5.1. Diving in</a><blockquote><p>In previous chapters, we &#8220;dived in&#8221; by immediately looking at code and trying to understanding it as quickly as possible.  Now that you have some Python under your belt, we're going to step back and look at the steps that happen <i>before</i> the code gets written.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.romantest">5.2. Introducing <tt>romantest.py</tt></a><blockquote><p>Now that we've completely defined the behavior we expect from our conversion functions, we're going to do something a little unexpected: we're going to write a test suite that puts these functions through their paces and makes sure that they behave the way we want them to.  You read that right: we're going to write code that tests code that we haven't written yet.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.success">5.3. Testing for success</a><blockquote><p>The most fundamental part of unit testing is constructing individual test cases.  A test case answers a single question about the code it is testing.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.failure">5.4. Testing for failure</a><blockquote><p>It is not enough to test that our functions succeed when given good input; we must also test that they fail when given bad input.  And not just any sort of failure; they must fail in the way we expect.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.sanity">5.5. Testing for sanity</a><blockquote><p>Often, you will find that a unit of code contains a set of reciprocal functions, usually in the form of conversion functions where one converts A to B and the other converts B to A.  In these cases, it is useful to create a &#8220;sanity check&#8221; to make sure that you can convert A to B and back to A without losing decimal precision, incurring rounding errors, or triggering any other sort of bug.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1">5.6. <tt>roman.py</tt>, stage 1</a><blockquote><p>Now that our unit test is complete, it's time to start writing the code that our test cases are attempting to test.  We're going to do this in stages, so we can see all the unit tests fail, then watch them pass one by one as we fill in the gaps in <tt>roman.py</tt>.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage2">5.7. <tt>roman.py</tt>, stage 2</a><blockquote><p>Now that we have the framework of our <tt>roman</tt> module laid out, it's time to start writing code and passing test cases.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3">5.8. <tt>roman.py</tt>, stage 3</a><blockquote><p>Now that <tt>toRoman</tt> behaves correctly with good input (integers from <tt>1</tt> to <tt>3999</tt>), it's time to make it behave correctly with bad input (everything else).</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage4">5.9. <tt>roman.py</tt>, stage 4</a><blockquote><p>Now that <tt>toRoman</tt> is done, it's time to start coding <tt>fromRoman</tt>.  Thanks to our rich data structure that maps individual Roman numerals to integer values, this is no more difficult than the <tt>toRoman</tt> function.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5">5.10. <tt>roman.py</tt>, stage 5</a><blockquote><p>Now that <tt>fromRoman</tt> works properly with good input, it's time to fit in the last piece of the puzzle: making it work properly with bad input.  That means finding a way to look at a string and determine if it's a valid Roman numeral.  This is inherently more difficult than <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3" title="5.8. roman.py, stage 3">validating numeric input</a> in <tt>toRoman</tt>, but we have a powerful tool at our disposal: regular expressions.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.bugs">5.11. Handling bugs</a><blockquote><p>Despite your best efforts to write comprehensive unit tests, bugs happen.  What do I mean by &#8220;bug&#8221;?  A bug is a test case you haven't written yet.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change">5.12. Handling changing requirements</a><blockquote><p>Despite your best efforts to pin your customers to the ground and extract exact requirements from them on pain of horrible nasty things involving scissors and hot wax, requirements will change.  Most customers don't know what they want until they see it, and even if they do, they aren't that good at articulating what they want precisely enough to be useful.  And even if they do, they'll want more in the next release anyway.  So be prepared to update your test cases as requirements change.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring">5.13. Refactoring</a><blockquote><p>The best thing about comprehensive unit testing is not the feeling you get when all your test cases finally pass, or even the feeling you get when someone else blames you for breaking their code and you can actually <i>prove</i> that you didn't.  The best thing about unit testing is that it gives you the freedom to refactor mercilessly.</p></blockquote></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.summary">5.14. Summary</a><blockquote><p>Unit testing is a powerful concept which, if properly implemented, can both reduce maintenance costs and increase flexibility in any long-term project.  It is also important to understand that unit testing is not a panacea, a Magic Problem Solver, or a silver bullet.  Writing good test cases is hard, and keeping them up to date takes discipline (especially when customers are screaming for critical bug fixes).  Unit testing is not a replacement for other forms of testing, including functional testing, integration testing, and user acceptance testing.  But it is feasible, and it does work, and once you've seen it work, you'll wonder how you ever got along without it.</p></blockquote></li></ul><h2><a name="tips"></a>Appendix C. Tips and tricks</h2><p><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper">Chapter 1. Getting To Know Python</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.divein">1.1. Diving in</a><a name="tip.run.windows"></a><table class="tip" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/tip.png" alt="Tip" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">In the Python IDE on Windows, you can run a module withFile-&gt;Run... (<b>Ctrl-R</b>).  Output is displayed in the interactive window.</td></tr></table><a name="tip.run.mac"></a><table class="tip" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/tip.png" alt="Tip" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">In the Python IDE on Mac OS, you can run a module withPython-&gt;Run window... (<b>Cmd-R</b>), but there is an important option you must set first.  Open the module in the IDE, pop up the module's options menu by clicking the black triangle in the upper-right corner of the window, and make sure &#8220;Run as __main__&#8221; is checked.  This setting is saved with the module, so you only have to do this once per module.</td></tr></table><a name="tip.run.unix"></a><table class="tip" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/tip.png" alt="Tip" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">On UNIX-compatible systems (including Mac OS X), you can run a module from the command line: <b><tt>python </tt><tt>odbchelper.py</tt></b></td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.funcdef">1.2. Declaring functions</a><a name="compare.funcdef.vb"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">In Visual Basic, functions (that return a value) start with <tt>function</tt>, and subroutines (that do not return a value) start with <tt>sub</tt>.  There are no subroutines in Python.  Everything is a function, all functions return a value (even if it's <tt>None</tt>), and all functions start with <tt>def</tt>.</td></tr></table><a name="compare.funcdef.java"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">In Java, C++, and other strongly-typed languages, you must specify the datatype of the function return value and each function argument.  In Python, you never explicitly specify the datatype of anything.  Based on what value you assign, Python keeps track of the datatype internally.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.docstring">1.3. Documenting functions</a><a name="compare.quoting.perl"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Triple quotes are also an easy way to define a string with both single and double quotes, like <tt>qq/.../</tt> in Perl.</td></tr></table><a name="tip.docstring"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Many Python IDEs use the <tt>docstring</tt> to provide context-sensitive documentation, so that when you type a function name, its <tt>docstring</tt> appears as a tooltip.  This can be incredibly helpful, but it's only as good as the <tt>docstring</tt>s you write.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.objects">1.4. Everything is an object</a><a name="compare.import.perl"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top"><tt>import</tt> in Python is like <tt>require</tt> in Perl.  Once you <tt>import</tt> a Python module, you access its functions with <tt><i>module</i>.<i>function</i></tt>; once you <tt>require</tt> a Perl module, you access its functions with <tt><i>module</i>::<i>function</i></tt>.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.indenting">1.5. Indenting code</a><a name="compare.lineend.java"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Python uses carriage returns to separate statements and a colon and indentation to separate code blocks.  C++ and Java use semicolons to separate statements and curly braces to separate code blocks.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.testing">1.6. Testing modules</a><a name="compare.equals.c"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Like C, Python uses <tt>==</tt> for comparison and <tt>=</tt> for assignment.  Unlike C, Python does not support in-line assignment, so there's no chance of accidentally assigning the value you thought you were comparing.</td></tr></table><a name="tip.mac.runasmain"></a><table class="tip" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/tip.png" alt="Tip" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">On MacPython, there is an additional step to make the <tt>if</tt> <tt>__name__</tt> trick work.  Pop up the module's options menu by clicking the black triangle in the upper-right corner of the window, and make sure Run as __main__ is checked.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.dict">1.7. Dictionaries 101</a><a name="compare.dict.perl"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">A dictionary in Python is like a hash in Perl.  In Perl, variables which store hashes always start with a <tt>%</tt> character; in Python, variables can be named anything, and Python keeps track of the datatype internally.</td></tr></table><a name="compare.dict.java"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">A dictionary in Python is like an instance of the <tt>Hashtable</tt> class in Java.</td></tr></table><a name="compare.dict.vb"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">A dictionary in Python is like an instance of the <tt>Scripting.Dictionary</tt> object in Visual Basic.</td></tr></table><a name="tip.dictorder"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Dictionaries have no concept of order among elements.  It is incorrect to say that the elements are &#8220;out of order&#8221;; they are simply unordered.  This is an important distinction which will annoy you when you want to access the elements of a dictionary in a specific, repeatable order (like alphabetical order by key).  There are ways of doing this, they're just not built into the dictionary.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.list">1.8. Lists 101</a><a name="compare.list.perl"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">A list in Python is like an array in Perl.  In Perl, variables which store arrays always start with the <tt>@</tt> character; in Python, variables can be named anything, and Python keeps track of the datatype internally.</td></tr></table><a name="compare.list.java"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">A list in Python is much more than an array in Java (although it can be used as one if that's really all you want out of life).  A better analogy would be to the <tt>Vector</tt> class, which can hold arbitrary objects and can expand dynamically as new items are added.</td></tr></table><a name="tip.boolean"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">There is no boolean datatype in Python.  In a boolean context (like an <tt>if</tt> statement), <tt>0</tt> is false and all other numbers are true.  This extends to other datatypes, too.  An empty string (<tt>""</tt>), an empty list (<tt>[]</tt>), and an empty dictionary (<tt>{}</tt>) are all false; all other strings, lists, and dictionaries are true.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.tuple">1.9. Tuples 101</a><a name="tip.tuple"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Tuples can be converted into lists, and vice-versa.  The built-in <tt>tuple</tt> function takes a list and returns a tuple with the same elements, and the <tt>list</tt> function takes a tuple and returns a list.  In effect, <tt>tuple</tt> freezes a list, and <tt>list</tt> thaws a tuple.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.vardef">1.10. Defining variables</a><a name="tip.multiline"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">When a command is split among several lines with the line continuation marker (&#8220;<tt>\</tt>&#8221;), the continued lines can be indented in any manner; Python's normally stringent indentation rules do not apply.  If your Python IDE auto-indents the continued line, you should probably accept its default unless you have a burning reason not to.</td></tr></table><a name="tip.implicitmultiline"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Strictly speaking, expressions in parentheses, straight brackets, or curly braces (like <a href="http://kr.diveintopython.net/html/appendix.htm#myparamsdef" title="Example 1.23. Defining the myParams variable">defining a dictionary</a>) can be split into multiple lines with or without the line continuation character (&#8220;<tt>\</tt>&#8221;).  I like to include the backslash even when it's not required because I think it makes the code easier to read, but that's a matter of style.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.stringformatting">1.12. Formatting strings</a><a name="compare.stringformatting.c"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">String formatting in Python uses the same syntax as the <tt>sprintf</tt> function in C.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.join">1.14. Joining lists and splitting strings</a><a name="tip.join"></a><table class="important" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/important.png" alt="Important" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top"><tt>join</tt> only works on lists of strings; it does not do any type coercion.  <tt>join</tt>ing a list that has one or more non-string elements will raise an exception.</td></tr></table><a name="tip.split"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top"><tt><i>anystring</i>.</tt><tt>split</tt>(<i>delimiter</i>, 1) is a useful technique when you want to search a string for a substring and then work with everything before the substring (which ends up in the first element of the returned list) and everything after it (which ends up in the second element).</td></tr></table><p></p></li></ul><p><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper">Chapter 2. The Power Of Introspection</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.optional">2.2. Optional and named arguments</a><a name="tip.arguments"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">The only thing you have to do to call a function is specify a value (somehow) for each required argument; the manner and order in which you do that is up to you.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.builtin">2.3. <tt>type</tt>, <tt>str</tt>, <tt>dir</tt>, and other built-in functions</a><a name="tip.manuals"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Python comes with excellent reference manuals, which you should peruse thoroughly to learn all the modules Python has to offer.  But whereas in most languages you would find yourself referring back to the manuals (or man pages, or, God help you, MSDN) to remind yourself how to use these modules, Python is largely self-documenting.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.andor">2.6. The peculiar nature of <tt>and</tt> and <tt>or</tt></a><a name="tip.andor"></a><table class="important" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/important.png" alt="Important" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">The <tt>and-or</tt> trick, <tt><i>bool</i> and </tt><tt>a</tt> or <tt>b</tt>, will not work like the C expression <tt><i>bool</i> ? </tt><tt>a</tt> : <tt>b</tt> when <tt>a</tt> is false in a boolean context.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.lambda">2.7. Using <tt>lambda</tt> functions</a><a name="tip.lambda"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top"><tt>lambda</tt> functions are a matter of style.  Using them is never required; anywhere you could use them, you could define a separate normal function and use that instead.  I use them in places where I want to encapsulate specific, non-reusable code without littering my code with a lot of little one-line functions.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.alltogether">2.8. Putting it all together</a><a name="compare.isnull.sql"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">In SQL, you would use <tt>IS NULL</tt> instead of <tt>= NULL</tt> to compare a null value.  In Python, there is no special syntax; you use <tt>== None</tt> just like any other comparison.</td></tr></table><p></p></li></ul><p><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo">Chapter 3. An Object-Oriented Framework</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.fromimport">3.2. Importing modules using <tt>from <i>module</i> import</tt></a><a name="compare.fromimport.perl"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top"><tt>from <i>module</i> import</tt> in Python is like <tt>use <i>module</i></tt> in Perl; <tt>import <i>module</i></tt> in Python is like <tt>require <i>module</i></tt> in Perl.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.class">3.3. Defining classes</a><a name="compare.pass.java"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">The <tt>pass</tt> statement in Python is like an empty set of braces (<tt>{}</tt>) in Java or C.</td></tr></table><a name="compare.extends.java"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">In Python, the ancestor of a class is simply listed in parentheses immediately after the class name.  There is no special keyword like <tt>extends</tt> in Java.</td></tr></table><a name="tip.multipleinheritance"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Although I won't discuss it in depth in this book, Python supports multiple inheritance.  In the parentheses following the class name, you can list as many ancestor classes as you like, separated by commas.</td></tr></table><a name="compare.self.java"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">By convention, the first argument of any class method (the reference to the current instance) is called <tt>self</tt>.  This argument fills the role of the reserved word <tt>this</tt> in C++ or Java, but <tt>self</tt> is not a reserved word in Python, merely a naming convention.  Nonetheless, please don't call it anything but <tt>self</tt>; this is a very strong convention.</td></tr></table><a name="tip.whenself"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">When defining your class methods, you <i>must</i> explicitly list <tt>self</tt> as the first argument for each method, including <tt>__init__</tt>.  When you call a method of an ancestor class from within your class, you <i>must</i> include the <tt>self</tt> argument.  But when you call your class method from outside, you do not specify anything for the <tt>self</tt> argument; you skip it entirely, and Python automatically adds the instance reference for you.  I am aware that this is confusing at first; it's not really inconsistent, but it may appear inconsistent because it relies on a distinction (between bound and unbound methods) that you don't know about yet.</td></tr></table><a name="tip.initoptional"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top"><tt>__init__</tt> methods are optional, but when you define one, you must remember to explicitly call the ancestor's <tt>__init__</tt> method.  This is more generally true: whenever a descendant wants to extend the behavior of the ancestor, the descendant method must explicitly call the ancestor method at the proper time, with the proper arguments.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.create">3.4. Instantiating classes</a><a name="compare.new.java"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">In Python, simply call a class as if it were a function to create a new instance of the class.  There is no explicit <tt>new</tt> operator like C++ or Java.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.userdict">3.5. <tt>UserDict</tt>: a wrapper class</a><a name="tip.locate"></a><table class="tip" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/tip.png" alt="Tip" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">In the Python IDE on Windows, you can quickly open any module in your library path withFile-&gt;Locate... (<b>Ctrl-L</b>).</td></tr></table><a name="compare.overloading"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Java and Powerbuilder support function overloading by argument list, <i>i.e.</i> one class can have multiple methods with the same name but a different number of arguments, or arguments of different types.  Other languages (most notably PL/SQL) even support function overloading by argument name; <i>i.e.</i> one class can have multiple methods with the same name and the same number of arguments of the same type but different argument names.  Python supports neither of these; it has no form of function overloading whatsoever.  An <tt>__init__</tt> method is an <tt>__init__</tt> method is an <tt>__init__</tt> method, regardless of its arguments.  There can be only one <tt>__init__</tt> method per class, and if a descendant class has an <tt>__init__</tt> method, it always overrides the ancestor <tt>__init__</tt> method, even if the descendant defines it with a different argument list.</td></tr></table><a name="note.dataattributes"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Always assign an initial value to all of an instance's data attributes in the <tt>__init__</tt> method.  It will save you hours of debugging later.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.specialmethods">3.6. Special class methods</a><a name="tip.self.call"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">When accessing data attributes within a class, you need to qualify the attribute name: <tt>self.<i>attribute</i></tt>.  When calling other methods within a class, you need to qualify the method name: <tt>self.<i>method</i></tt>.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.morespecial">3.7. Advanced special class methods</a><a name="compare.strequals.java"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">In Java, you determine whether two string variables reference the same physical memory location by using <tt>str1 == str2</tt>.  This is called <i>object identity</i>, and it is written in Python as <tt>str1 is str2</tt>.  To compare string values in Java, you would use <tt>str1.equals(str2)</tt>; in Python, you would use <tt>str1 == str2</tt>.  Java programmers who have been taught to believe that the world is a better place because <tt>==</tt> in Java compares by identity instead of by value may have a difficult time adjusting to Python's lack of such &#8220;gotchas&#8221;.</td></tr></table><a name="note.physical.v.logical"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">While other object-oriented languages only let you define the physical model of an object (&#8220;this object has a <tt>GetLength</tt> method&#8221;), Python's special class methods like <tt>__len__</tt> allow you to define the logical model of an object (&#8220;this object has a length&#8221;).</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.classattributes">3.8. Class attributes</a><a name="compare.classattr.java"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">In Java, both static variables (called class attributes in Python) and instance variables (called data attributes in Python) are defined immediately after the class definition (one with the <tt>static</tt> keyword, one without).  In Python, only class attributes can be defined here; data attributes are defined in the <tt>__init__</tt> method.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.private">3.9. Private functions</a><a name="tip.private"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">If the name of a Python function, class method, or attribute starts with (but doesn't end with) two underscores, it's private; everything else is public.</td></tr></table><a name="tip.specialmethodnames"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">In Python, all special methods (like <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.specialmethods.setitem.example" title="Example 3.14. The __setitem__ special method"><tt>__setitem__</tt></a>) and built-in attributes (like <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.import" title="Example 1.5. Accessing the buildConnectionString function's docstring"><tt>__doc__</tt></a>) follow a standard naming convention: they both start with and end with two underscores.  Don't name your own methods and attributes this way; it will only confuse you (and others) later.</td></tr></table><a name="tip.protected"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Python has no concept of protected class methods (accessible only in their own class and descendant classes).  Class methods are either private (accessible only in their own class) or public (accessible from anywhere).</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.exception">3.10. Handling exceptions</a><a name="compare.exceptions.java"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Python uses <tt>try...except</tt> to handle exceptions and <tt>raise</tt> to generate them.  Java and C++ use <tt>try...catch</tt> to handle exceptions, and <tt>throw</tt> to generate them.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.os">3.14. The <tt>os</tt> module</a><a name="tip.os"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Whenever possible, you should use the functions in <tt>os</tt> and <tt>os.path</tt> for file, directory, and path manipulations.  These modules are wrappers for platform-specific modules, so functions like <tt>os.path.split</tt> work on UNIX, Windows, Mac OS, and any other supported Python platform.</td></tr></table><p></p></li></ul><p><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect">Chapter 4. HTML Processing</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.sgmllib">4.2. Introducing <tt>sgmllib.py</tt></a><a name="d42e13151"></a><table class="important" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/important.png" alt="Important" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Python 2.0 had a bug where <tt>SGMLParser</tt> would not recognize declarations at all (<tt>handle_decl</tt> would never be called), which meant that <tt>DOCTYPE</tt>s were silently ignored.  This is fixed in Python 2.1.</td></tr></table><a name="tip.commandline.windows"></a><table class="tip" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/tip.png" alt="Tip" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">In the Python IDE on Windows, you can specify command line arguments in the &#8220;Run script&#8221; dialog.  Separate multiple arguments with spaces.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.basehtml">4.4. Introducing <tt>BaseHTMLProcessor.py</tt></a><a name="d42e13945"></a><table class="important" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/important.png" alt="Important" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">The HTML specification requires that all non-HTML (like client-side JavaScript) must be enclosed in HTML comments, but not all web pages do this properly (and all modern web browsers are forgiving if they don't).  <tt>BaseHTMLProcessor</tt> is not forgiving; if script is improperly embedded, it will be parsed as if it were HTML.  For instance, if the script contains less-than and equals signs, <tt>SGMLParser</tt> may incorrectly think that it has found tags and attributes.  <tt>SGMLParser</tt> always converts tags and attribute names to lowercase, which may break the script, and <tt>BaseHTMLProcessor</tt> always encloses attribute values in double quotes (even if the original HTML document used single quotes or no quotes), which will certainly break the script.  Always protect your client-side script within HTML comments.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.locals">4.5. <tt>locals</tt> and <tt>globals</tt></a><a name="d42e14118"></a><table class="important" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/important.png" alt="Important" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Python 2.2 will introduce a subtle but important change that affects the namespace search order: nested scopes.  In Python 2.0, when you reference a variable within a <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.nested" title="Example 3.38. listDirectory">nested function</a> or <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.lambda" title="2.7. Using lambda functions"><tt>lambda</tt> function</a>, Python will search for that variable in the current (nested or <tt>lambda</tt>) function's namespace, then in the module's namespace.  Python 2.2 will search for the variable in the current (nested or <tt>lambda</tt>) function's namespace, <i>then in the parent function's namespace</i>, then in the module's namespace.  Python 2.1 can work either way; by default, it works like Python 2.0, but you can add the following line of code at the top of your module to make your module work like Python 2.2:<pre><span class="pykeyword">from</span> __future__ <span class="pykeyword">import</span> nested_scopes</pre></td></tr></table><a name="tip.localsbyname"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Using the <tt>locals</tt> and <tt>globals</tt> functions, you can get the value of arbitrary variables dynamically, providing the variable name as a string.  This mirrors the functionality of the <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.getattr" title="2.4. Getting object references with getattr"><tt>getattr</tt></a> function, which allows you to access arbitrary functions dynamically by providing the function name as a string.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.dictsub">4.6. Dictionary-based string formatting</a><a name="d42e14682"></a><table class="important" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/important.png" alt="Important" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Using dictionary-based string formatting with <tt>locals</tt> is a convenient way of making complex string formatting expressions more readable, but it comes with a price.  There is a slight performance hit in making the call to <tt>locals</tt>.  Ordinarily, it's not enough to worry about, but if you have a string formatting expression in a loop (including a list comprehension), you should probably stick with the normal tuple-based form.</td></tr></table><p></p></li></ul><p><a href="http://kr.diveintopython.net/html/chapter5.htm#roman">Chapter 5. Unit Testing</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.romantest">5.2. Introducing <tt>romantest.py</tt></a><a name="note.unittest"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top"><tt>unittest</tt> is available in Python 2.1 and later.  Python 2.0 users can download it from <a href="http://kr.diveintopython.net/"><tt>pyunit.sourceforge.net</tt></a>.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3">5.8. <tt>roman.py</tt>, stage 3</a><a name="d42e17656"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">The most important thing that comprehensive unit testing can tell you is when to stop coding.  When all the unit tests for a function pass, stop coding the function.  When all the unit tests for an entire module pass, stop coding the module.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5">5.10. <tt>roman.py</tt>, stage 5</a><a name="d42e18479"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">When all your tests pass, stop coding.</td></tr></table><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring">5.13. Refactoring</a><a name="d42e19097"></a><table class="note" border="0"><tr><td rowspan="2" align="center" valign="top" width="24"><img src="http://kr.diveintopython.net/images/note.png" alt="Note" width="24" height="24" /></td></tr><tr><td colspan="2" align="left" valign="top">Whenever you are going to use a regular expression more than once, you should compile it to get a pattern object, then call the methods on the pattern object directly.</td></tr></table><p></p></li></ul><h2><a name="examples"></a>Appendix D. List of examples</h2><p><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper">Chapter 1. Getting To Know Python</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.divein">1.1. Diving in</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e1375">Example 1.1. <tt>odbchelper.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.output">Example 1.2. Output of <tt>odbchelper.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.funcdef">1.2. Declaring functions</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e1519">Example 1.3. Declaring the <tt>buildConnectionString</tt> function</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.docstring">1.3. Documenting functions</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.triplequotes">Example 1.4. Defining the <tt>buildConnectionString</tt> function's <tt>docstring</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.objects">1.4. Everything is an object</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.import">Example 1.5. Accessing the <tt>buildConnectionString</tt> function's <tt>docstring</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.indenting">1.5. Indenting code</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e1961">Example 1.6. Indenting the <tt>buildConnectionString</tt> function</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#odbchelper.testing">1.6. Testing modules</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.ifnametrick">Example 1.7. The <tt>if</tt> <tt>__name__</tt> trick</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e2126">Example 1.8. An imported module's <tt>__name__</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.dict">1.7. Dictionaries 101</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.dict.define">Example 1.9. Defining a dictionary</a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.dict.modify">Example 1.10. Modifying a dictionary</a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.dictionarytypes">Example 1.11. Mixing datatypes in a dictionary</a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.dict.del">Example 1.12. Deleting items from a dictionary</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.list">1.8. Lists 101</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e2668">Example 1.13. Defining a list</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e2722">Example 1.14. Negative list indices</a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.list.slice">Example 1.15. Slicing a list</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e2838">Example 1.16. Slicing shorthand</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e2916">Example 1.17. Adding elements to a list</a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.list.search">Example 1.18. Searching a list</a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.list.removingelements">Example 1.19. Removing elements from a list</a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.list.operators">Example 1.20. List operators</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.tuple">1.9. Tuples 101</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e3407">Example 1.21. Defining a tuple</a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.tuplemethods">Example 1.22. Tuples have no methods</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.vardef">1.10. Defining variables</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#myparamsdef">Example 1.23. Defining the <tt>myParams</tt> variable</a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.unboundvariable">Example 1.24. Referencing an unbound variable</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.multiassign">1.11. Assigning multiple values at once</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e3762">Example 1.25. Assigning multiple values at once</a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.multiassign.range">Example 1.26. Assigning consecutive values</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.stringformatting">1.12. Formatting strings</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e4001">Example 1.27. Introducing string formatting</a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.stringformatting.coerce">Example 1.28. String formatting vs. concatenating</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.map">1.13. Mapping lists</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e4182">Example 1.29. Introducing list comprehensions</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e4258">Example 1.30. List comprehensions in <tt>buildConnectionString</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.items">Example 1.31. <tt>keys</tt>, <tt>values</tt>, and <tt>items</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e4379">Example 1.32. List comprehensions in <tt>buildConnectionString</tt>, step by step</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.join">1.14. Joining lists and splitting strings</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e4539">Example 1.33. Joining a list in <tt>buildConnectionString</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e4575">Example 1.34. Output of <tt>odbchelper.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.split.example">Example 1.35. Splitting a string</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.summary">1.15. Summary</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e4802">Example 1.36. <tt>odbchelper.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e4808">Example 1.37. Output of <tt>odbchelper.py</tt></a></li></ul><p></p></li></ul><p><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper">Chapter 2. The Power Of Introspection</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.divein">2.1. Diving in</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e4918">Example 2.1. <tt>apihelper.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e5028">Example 2.2. Sample usage of <tt>apihelper.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e5065">Example 2.3. Advanced usage of <tt>apihelper.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.optional">2.2. Optional and named arguments</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e5118">Example 2.4. <tt>help</tt>, a function with two optional arguments</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e5170">Example 2.5. Valid calls of <tt>help</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.builtin">2.3. <tt>type</tt>, <tt>str</tt>, <tt>dir</tt>, and other built-in functions</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.type.intro">Example 2.6. Introducing <tt>type</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.str.intro">Example 2.7. Introducing <tt>str</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.dir.intro">Example 2.8. Introducing <tt>dir</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.builtin.callable">Example 2.9. Introducing <tt>callable</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.builtin.list">Example 2.10. Built-in attributes and functions</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.getattr">2.4. Getting object references with <tt>getattr</tt></a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.getattr.intro">Example 2.11. Introducing <tt>getattr</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.getattr.example">Example 2.12. <tt>getattr</tt> in <tt>apihelper.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.filter">2.5. Filtering lists</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e6111">Example 2.13. List filtering syntax</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e6142">Example 2.14. Introducing list filtering</a></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.filter.care">Example 2.15. Filtering a list in <tt>apihelper.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.andor">2.6. The peculiar nature of <tt>and</tt> and <tt>or</tt></a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e6318">Example 2.16. Introducing <tt>and</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e6415">Example 2.17. Introducing <tt>or</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.andortrick.intro">Example 2.18. Introducing the <tt>and-or</tt> trick</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e6690">Example 2.19. When the <tt>and-or</tt> trick fails</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e6808">Example 2.20. Using the <tt>and-or</tt> trick safely</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.lambda">2.7. Using <tt>lambda</tt> functions</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e6909">Example 2.21. Introducing <tt>lambda</tt> functions</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7001">Example 2.22. <tt>lambda</tt> functions in <tt>apihelper.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7036">Example 2.23. <tt>split</tt> with no arguments</a></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.funcassign">Example 2.24. Assigning a function to a variable</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.alltogether">2.8. Putting it all together</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7233">Example 2.25. The meat of <tt>apihelper.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7270">Example 2.26. Getting a <tt>docstring</tt> dynamically</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7382">Example 2.27. Why use <tt>str</tt> on a <tt>docstring</tt>?</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7531">Example 2.28. Introducing the <tt>ljust</tt> method</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7600">Example 2.29. Printing a list</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7627">Example 2.30. The meat of <tt>apihelper.py</tt>, revisited</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.summary">2.9. Summary</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7646">Example 2.31. <tt>apihelper.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7652">Example 2.32. Output of <tt>apihelper.py</tt></a></li></ul><p></p></li></ul><p><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo">Chapter 3. An Object-Oriented Framework</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.divein">3.1. Diving in</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7754">Example 3.1. <tt>fileinfo.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7782">Example 3.2. Output of <tt>fileinfo.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.fromimport">3.2. Importing modules using <tt>from <i>module</i> import</tt></a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7812">Example 3.3. Basic <tt>from <i>module</i> import</tt> syntax</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e7885">Example 3.4. <tt>import <i>module</i></tt> <i>vs.</i> <tt>from <i>module</i> import</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.class">3.3. Defining classes</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.class.simplest">Example 3.5. The simplest Python class</a></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.class.example">Example 3.6. Defining the <tt>FileInfo</tt> class</a></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.init.example">Example 3.7. Initializing the <tt>FileInfo</tt> class</a></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.init.code.example">Example 3.8. Coding the <tt>FileInfo</tt> class</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.create">3.4. Instantiating classes</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e8507">Example 3.9. Creating a <tt>FileInfo</tt> instance</a></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.scope">Example 3.10. Trying to implement a memory leak</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.userdict">3.5. <tt>UserDict</tt>: a wrapper class</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.userdict.init.example">Example 3.11. Defining the <tt>UserDict</tt> class</a></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.userdict.normalmethods">Example 3.12. <tt>UserDict</tt> normal methods</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.specialmethods">3.6. Special class methods</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e9231">Example 3.13. The <tt>__getitem__</tt> special method</a></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.specialmethods.setitem.example">Example 3.14. The <tt>__setitem__</tt> special method</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e9435">Example 3.15. Overriding <tt>__setitem__</tt> in <tt>MP3FileInfo</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.specialmethods.setname">Example 3.16. Setting an <tt>MP3FileInfo</tt>'s <tt>name</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.morespecial">3.7. Advanced special class methods</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e9721">Example 3.17. More special methods in <tt>UserDict</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.classattributes">3.8. Class attributes</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.classattributes.intro">Example 3.18. Introducing class attributes</a></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.classattributes.writeable.example">Example 3.19. Modifying class attributes</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.private">3.9. Private functions</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e10330">Example 3.20. Trying to call a private method</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.exception">3.10. Handling exceptions</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e10532">Example 3.21. Opening a non-existent file</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#crossplatform.example">Example 3.22. Supporting platform-specific functionality</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.files">3.11. File objects</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e10874">Example 3.23. Opening a file</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e10948">Example 3.24. Reading a file</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e11073">Example 3.25. Closing a file</a></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.files.incode">Example 3.26. File objects in <tt>MP3FileInfo</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.for">3.12. <tt>for</tt> loops</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e11386">Example 3.27. Introducing the <tt>for</tt> loop</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#dictionaryiter.example">Example 3.28. Iterating through a dictionary</a></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.multiassign.for.example">Example 3.29. <tt>for</tt> loop in <tt>MP3FileInfo</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.modules">3.13. More on modules</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e11720">Example 3.30. Introducing <tt></tt><tt>sys</tt>.modules</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e11804">Example 3.31. Using <tt></tt><tt>sys</tt>.modules</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e11869">Example 3.32. The <tt>__module__</tt> class attribute</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e11921">Example 3.33. <tt></tt><tt>sys</tt>.modules in <tt>fileinfo.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.os">3.14. The <tt>os</tt> module</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e12046">Example 3.34. Constructing pathnames</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#splittingpathnames.example">Example 3.35. Splitting pathnames</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e12274">Example 3.36. Listing directories</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e12372">Example 3.37. Listing directories in <tt>fileinfo.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.alltogether">3.15. Putting it all together</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.nested">Example 3.38. <tt>listDirectory</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.summary">3.16. Summary</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e12676">Example 3.39. <tt>fileinfo.py</tt></a></li></ul><p></p></li></ul><p><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect">Chapter 4. HTML Processing</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.divein">4.1. Diving in</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.basehtml.listing">Example 4.1. <tt>BaseHTMLProcessor.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e12858">Example 4.2. <tt>dialect.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e12864">Example 4.3. Output of <tt>dialect.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.sgmllib">4.2. Introducing <tt>sgmllib.py</tt></a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e13208">Example 4.4. Sample test of <tt>sgmllib.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.extract">4.3. Extracting data from HTML documents</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.extract.urllib">Example 4.5. Introducing <tt>urllib</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.extract.links">Example 4.6. Introducing <tt>urllister.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e13555">Example 4.7. Using <tt>urllister.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.basehtml">4.4. Introducing <tt>BaseHTMLProcessor.py</tt></a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.basehtml.intro">Example 4.8. Introducing <tt>BaseHTMLProcessor</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e13986">Example 4.9. <tt>BaseHTMLProcessor</tt> output</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.locals">4.5. <tt>locals</tt> and <tt>globals</tt></a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e14173">Example 4.10. Introducing <tt>locals</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e14320">Example 4.11. Introducing <tt>globals</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.dictsub">4.6. Dictionary-based string formatting</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e14472">Example 4.12. Introducing dictionary-based string formatting</a></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.unknownstarttag">Example 4.13. Dictionary-based string formatting in <tt>BaseHTMLProcessor.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.quoting">4.7. Quoting attribute values</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e14774">Example 4.14. Quoting attribute values</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.dialectizer">4.8. Introducing <tt>dialect.py</tt></a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e14938">Example 4.15. Handling specific tags</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e15055">Example 4.16. <tt>SGMLParser</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e15245">Example 4.17. Overriding the <tt>handle_data</tt> method</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.re">4.9. Regular expressions 101</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e15353">Example 4.18. Matching at the end of a string</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e15539">Example 4.19. Matching whole words</a></li></ul><p></p></li></ul><p><a href="http://kr.diveintopython.net/html/chapter5.htm#roman">Chapter 5. Unit Testing</a></p><ul><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.romantest">5.2. Introducing <tt>romantest.py</tt></a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e16285">Example 5.1. <tt>romantest.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.success">5.3. Testing for success</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.testtoromanknownvalues.example">Example 5.2. <tt>testToRomanKnownValues</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.failure">5.4. Testing for failure</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.tobadinput.example">Example 5.3. Testing bad input to <tt>toRoman</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.frombadinput.example">Example 5.4. Testing bad input to <tt>fromRoman</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.sanity">5.5. Testing for sanity</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.sanity.example">Example 5.5. Testing <tt>toRoman</tt> against <tt>fromRoman</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e16864">Example 5.6. Testing for case</a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1">5.6. <tt>roman.py</tt>, stage 1</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e16952">Example 5.7. <tt>roman1.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1.output">Example 5.8. Output of <tt>romantest1.py</tt> against <tt>roman1.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage2">5.7. <tt>roman.py</tt>, stage 2</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage2.example">Example 5.9. <tt>roman2.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e17297">Example 5.10. How <tt>toRoman</tt> works</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e17336">Example 5.11. Output of <tt>romantest2.py</tt> against <tt>roman2.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3">5.8. <tt>roman.py</tt>, stage 3</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e17456">Example 5.12. <tt>roman3.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e17508">Example 5.13. Watching <tt>toRoman</tt> handle bad input</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e17537">Example 5.14. Output of <tt>romantest3.py</tt> against <tt>roman3.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage4">5.9. <tt>roman.py</tt>, stage 4</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e17680">Example 5.15. <tt>roman4.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e17715">Example 5.16. How <tt>fromRoman</tt> works</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e17748">Example 5.17. Output of <tt>romantest4.py</tt> against <tt>roman4.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5">5.10. <tt>roman.py</tt>, stage 5</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e17849">Example 5.18. Checking for thousands</a></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5.hundreds">Example 5.19. Checking for hundreds</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e18346">Example 5.20. <tt>roman5.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e18420">Example 5.21. Output of <tt>romantest5.py</tt> against <tt>roman5.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.bugs">5.11. Handling bugs</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e18495">Example 5.22. The bug</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e18525">Example 5.23. Testing for the bug (<tt>romantest61.py</tt>)</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e18547">Example 5.24. Output of <tt>romantest61.py</tt> against <tt>roman61.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e18566">Example 5.25. Fixing the bug (<tt>roman62.py</tt>)</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e18583">Example 5.26. Output of <tt>romantest62.py</tt> against <tt>roman62.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change">5.12. Handling changing requirements</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e18639">Example 5.27. Modifying test cases for new requirements (<tt>romantest71.py</tt>)</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e18743">Example 5.28. Output of <tt>romantest71.py</tt> against <tt>roman71.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e18849">Example 5.29. Coding the new requirements (<tt>roman72.py</tt>)</a></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.roman72.output">Example 5.30. Output of <tt>romantest72.py</tt> against <tt>roman72.py</tt></a></li></ul><p></p></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring">5.13. Refactoring</a><p></p><ul><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e18980">Example 5.31. Compiling regular expressions</a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e19102">Example 5.32. Compiled regular expressions in <tt>roman81.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage8.1.output">Example 5.33. Output of <tt>romantest81.py</tt> against <tt>roman81.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e19234">Example 5.34. <tt>roman82.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e19294">Example 5.35. Output of <tt>romantest82.py</tt> against <tt>roman82.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e19346">Example 5.36. <tt>roman83.py</tt></a></li><li><a href="http://kr.diveintopython.net/html/appendix.htm#d42e19392">Example 5.37. Output of <tt>romantest83.py</tt> against <tt>roman83.py</tt></a></li></ul><p></p></li></ul><h2><a name="revhistory"></a>Appendix E. Revision history</h2><table border="1" width="100%" summary="Revision history"><tr><th align="left" valign="top" colspan="2"><b>Revision History</b></th></tr><tr><td align="left">Revision 3.4</td><td align="left">31&nbsp;May&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage5" title="5.10. roman.py, stage 5"><i><tt>roman.py</tt>, stage 5</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.bugs" title="5.11. Handling bugs"><i>Handling bugs</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.change" title="5.12. Handling changing requirements"><i>Handling changing requirements</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.refactoring" title="5.13. Refactoring"><i>Refactoring</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.summary" title="5.14. Summary"><i>Summary</i></a>.</li><li>Fixed yet another stylesheet bug that was dropping nested <tt>&lt;/span&gt;</tt> tags.</li></ul> </td></tr><tr><td align="left">Revision 3.3</td><td align="left">24&nbsp;May&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.divein" title="5.1. Diving in"><i>Diving in</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.romantest" title="5.2. Introducing romantest.py"><i>Introducing <tt>romantest.py</tt></i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.success" title="5.3. Testing for success"><i>Testing for success</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.failure" title="5.4. Testing for failure"><i>Testing for failure</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.sanity" title="5.5. Testing for sanity"><i>Testing for sanity</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage1" title="5.6. roman.py, stage 1"><i><tt>roman.py</tt>, stage 1</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage2" title="5.7. roman.py, stage 2"><i><tt>roman.py</tt>, stage 2</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage3" title="5.8. roman.py, stage 3"><i><tt>roman.py</tt>, stage 3</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter5.htm#roman.stage4" title="5.9. roman.py, stage 4"><i><tt>roman.py</tt>, stage 4</i></a>.</li><li>Tweaked stylesheets in an endless quest for complete Netscape/Mozilla compatibility.</li></ul> </td></tr><tr><td align="left">Revision 3.2</td><td align="left">3&nbsp;May&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Added <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.dialectizer" title="4.8. Introducing dialect.py"><i>Introducing <tt>dialect.py</tt></i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.re" title="4.9. Regular expressions 101"><i>Regular expressions 101</i></a>.</li><li>Fixed bug in <tt>handle_decl</tt> method that would produce incorrect declarations (adding a space where it couldn't be).</li><li>Fixed bug in CSS (introduced in 2.9) where body background color was missing.</li></ul> </td></tr><tr><td align="left">Revision 3.1</td><td align="left">18&nbsp;Apr&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Added code in <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.divein" title="4.1. Diving in"><tt>BaseHTMLProcessor.py</tt></a> to handle declarations, now that Python 2.1 supports them.</li><li>Added note about nested scopes in <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.locals" title="4.5. locals and globals"><i><tt>locals</tt> and <tt>globals</tt></i></a>.</li><li>Fixed obscure bug in <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.basehtml.listing" title="Example 4.1. BaseHTMLProcessor.py">Example 4.1. <tt>BaseHTMLProcessor.py</tt></a> where attribute values with character entities would not be properly escaped.</li><li>Now recommending (but not requiring) Python 2.1, due to its support of declarations in <tt>sgmllib.py</tt>.</li><li>Updated download links on thes <a href="http://kr.diveintopython.net/">home page</a> to point to Python 2.1, where available.</li><li>Moved to versioned filenames, to help people who redistribute the book.</li></ul> </td></tr><tr><td align="left">Revision 3.0</td><td align="left">16&nbsp;Apr&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Fixed minor bug in code listing in <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect" title="Chapter 4. HTML Processing"><i>HTML Processing</i></a>.</li><li>Added link to Chinese translation on <a href="http://kr.diveintopython.net/">home page</a>.</li></ul> </td></tr><tr><td align="left">Revision 2.9</td><td align="left">13&nbsp;Apr&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Added <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.locals" title="4.5. locals and globals"><i><tt>locals</tt> and <tt>globals</tt></i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.dictsub" title="4.6. Dictionary-based string formatting"><i>Dictionary-based string formatting</i></a>.</li><li>Tightened code in <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect" title="Chapter 4. HTML Processing"><i>HTML Processing</i></a>, specifically <tt>ChefDialectizer</tt>, to use fewer and simpler regular expressions.</li><li>Fixed a stylesheet bug that was inserting blank pages between chapters in the PDF version.</li><li>Fixed a script bug that was stripping the <tt>DOCTYPE</tt> from the <a href="http://kr.diveintopython.net/">home page</a>.</li><li>Added link to <a href="http://kr.diveintopython.net/ASPN/Python/Cookbook/">Python Cookbook</a>, and added a few links to individual recipes in <a href="http://kr.diveintopython.net/html/appendix.htm#furtherreading" title="Appendix A. Further reading"><i>Further reading</i></a>.</li><li>Switched to <a href="http://kr.diveintopython.net/services/free.html">Google</a> for searching on <tt>http://diveintopython.org/</tt>.</li><li>Upgraded to version 1.36 of the DocBook XSL stylesheets, which was much more difficult than it sounds.  There may still be lingering bugs.</li></ul> </td></tr><tr><td align="left">Revision 2.8</td><td align="left">26&nbsp;Mar&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Added <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.extract" title="4.3. Extracting data from HTML documents"><i>Extracting data from HTML documents</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.basehtml" title="4.4. Introducing BaseHTMLProcessor.py"><i>Introducing <tt>BaseHTMLProcessor.py</tt></i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.quoting" title="4.7. Quoting attribute values"><i>Quoting attribute values</i></a>.</li><li>Tightened up code in <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper" title="Chapter 2. The Power Of Introspection"><i>The Power Of Introspection</i></a>, using the built-in function <tt>callable</tt> instead of manually checking types.</li><li>Moved <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.fromimport" title="3.2. Importing modules using from module import"><i>Importing modules using <tt>from </tt></i><i>module</i> import</a> from <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper" title="Chapter 2. The Power Of Introspection"><i>The Power Of Introspection</i></a> to <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo" title="Chapter 3. An Object-Oriented Framework"><i>An Object-Oriented Framework</i></a>.</li><li>Fixed typo in code example in <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.divein" title="3.1. Diving in"><i>Diving in</i></a> (added colon).</li><li>Added several additional downloadable example scripts.</li><li>Added Windows Help output format.</li></ul> </td></tr><tr><td align="left">Revision 2.7</td><td align="left">16&nbsp;Mar&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Added <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.sgmllib" title="4.2. Introducing sgmllib.py"><i>Introducing <tt>sgmllib.py</tt></i></a>.</li><li>Tightened up code in <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect" title="Chapter 4. HTML Processing"><i>HTML Processing</i></a>.</li><li>Changed code in <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper" title="Chapter 1. Getting To Know Python"><i>Getting To Know Python</i></a> to use <tt>items</tt> method instead of <tt>keys</tt>.</li><li>Moved <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.multiassign" title="1.11. Assigning multiple values at once"><i>Assigning multiple values at once</i></a> section to <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper" title="Chapter 1. Getting To Know Python"><i>Getting To Know Python</i></a>.</li><li>Edited note about <tt>join</tt> string method, and provided a link to the new entry in <a href="http://kr.diveintopython.net/doc/FAQ.html"><i>The Whole Python FAQ</i></a> that explains <a href="http://kr.diveintopython.net/cgi-bin/faqw.py?query=4.96&amp;querytype=simple&amp;casefold=yes&amp;req=search">why <tt>join</tt> is a string method</a> instead of a list method.</li><li>Rewrote <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.andor" title="2.6. The peculiar nature of and and or"><i>The peculiar nature of <tt>and</tt> and <tt>or</tt></i></a> to emphasize the fundamental nature of <tt>and</tt> and <tt>or</tt> and de-emphasize the <tt>and-or</tt> trick.</li><li>Reorganized language comparisons into <tt>note</tt>s.</li></ul> </td></tr><tr><td align="left">Revision 2.6</td><td align="left">28&nbsp;Feb&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>The PDF and Word versions now have colorized examples, an improved table of contents, and properly indented <tt>tip</tt>s and <tt>note</tt>s.</li><li>The Word version is now in native Word format, compatible with Word 97.</li><li>The PDF and text versions now have fewer problems with improperly converted special characters (like trademark symbols and curly quotes).</li><li>Added link to download Word version for UNIX, in case some twisted soul wants to import it into StarOffice or something.</li><li>Fixed several <tt>note</tt>s which were missing titles.</li><li>Fixed stylesheets to work around bug in Internet Explorer 5 for Mac OS which caused colorized words in the examples to be displayed in the wrong font.  (Hello?!?  Microsoft?  Which part of <tt>&lt;pre&gt;</tt> don't you understand?)</li><li>Fixed archive corruption in Mac OS downloads.</li><li>In first section of each chapter, added link to download examples.  (My access logs show that people skim or skip the two pages where they could have downloaded them (the <a href="http://kr.diveintopython.net/" title="Dive Into Python home page">home page</a> and <a href="http://kr.diveintopython.net/html/appendix.htm#preface" title="Preface"><i>Preface</i></a>), then scramble to find a download link once they actually start reading.)</li><li>Tightened the <a href="http://kr.diveintopython.net/" title="Dive Into Python home page">home page</a> and <a href="http://kr.diveintopython.net/html/appendix.htm#preface" title="Preface"><i>Preface</i></a> even more, in the hopes that someday someone will read them.</li><li>Soon I hope to get back to actually writing this book instead of debugging it.</li></ul> </td></tr><tr><td align="left">Revision 2.5</td><td align="left">23&nbsp;Feb&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Added <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.modules" title="3.13. More on modules"><i>More on modules</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.os" title="3.14. The os module"><i>The <tt>os</tt> module</i></a>.</li><li>Moved <a href="http://kr.diveintopython.net/html/appendix.htm#splittingpathnames.example" title="Example 3.35. Splitting pathnames">Example 3.35. Splitting pathnames</a> from <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.multiassign" title="1.11. Assigning multiple values at once"><i>Assigning multiple values at once</i></a> to <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.os" title="3.14. The os module"><i>The <tt>os</tt> module</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.alltogether" title="3.15. Putting it all together"><i>Putting it all together</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/appendix.htm#fileinfo.summary" title="3.16. Summary"><i>Summary</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter4.htm#dialect.divein" title="4.1. Diving in"><i>Diving in</i></a>.</li><li>Fixed program listing in <a href="http://kr.diveintopython.net/html/appendix.htm#dictionaryiter.example" title="Example 3.28. Iterating through a dictionary">Example 3.28. Iterating through a dictionary</a> which was missing a colon.</li></ul> </td></tr><tr><td align="left">Revision 2.4.1</td><td align="left">12&nbsp;Feb&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Changed newsgroup links to use &#8220;news:&#8221; protocol, now that <tt>deja.com</tt> is defunct.</li><li>Added file sizes to download links.</li></ul> </td></tr><tr><td align="left">Revision 2.4</td><td align="left">12&nbsp;Feb&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Added &#8220;further reading&#8221; links in most sections, and collated them in <a href="http://kr.diveintopython.net/html/appendix.htm#furtherreading" title="Appendix A. Further reading"><i>Further reading</i></a>.</li><li>Added URLs in parentheses next to external links in text version.</li></ul> </td></tr><tr><td align="left">Revision 2.3</td><td align="left">9&nbsp;Feb&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Rewrote some of the code in <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo" title="Chapter 3. An Object-Oriented Framework"><i>An Object-Oriented Framework</i></a> to use class attributes and a better example of multi-variable assignment.</li><li>Reorganized <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo" title="Chapter 3. An Object-Oriented Framework"><i>An Object-Oriented Framework</i></a> to put the class sections first.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.classattributes" title="3.8. Class attributes"><i>Class attributes</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.exception" title="3.10. Handling exceptions"><i>Handling exceptions</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.files" title="3.11. File objects"><i>File objects</i></a>.</li><li>Merged the &#8220;review&#8221; section in <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo" title="Chapter 3. An Object-Oriented Framework"><i>An Object-Oriented Framework</i></a> into <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.divein" title="3.1. Diving in"><i>Diving in</i></a>.</li><li>Colorized all program listings and examples.</li><li>Fixed important error in <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.funcdef" title="1.2. Declaring functions"><i>Declaring functions</i></a>: functions that do not explicitly return a value return <tt>None</tt>, so you <i>can</i> assign the return value of such a function to a variable without raising an exception.</li><li>Added minor clarifications to <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.docstring" title="1.3. Documenting functions"><i>Documenting functions</i></a>, <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.objects" title="1.4. Everything is an object"><i>Everything is an object</i></a>, and <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.vardef" title="1.10. Defining variables"><i>Defining variables</i></a>.</li></ul> </td></tr><tr><td align="left">Revision 2.2</td><td align="left">2&nbsp;Feb&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Edited <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.getattr" title="2.4. Getting object references with getattr"><i>Getting object references with <tt>getattr</tt></i></a>.</li><li>Added titles to <tt>xref</tt> tags, so they can have their cute little tooltips too.</li><li>Changed the look of the revision history page.</li><li>Fixed problem I introduced yesterday in my HTML post-processing script that was causing invalid HTML character references and breaking some browsers.</li><li>Upgraded to version 1.29 of the DocBook XSL stylesheets.</li></ul> </td></tr><tr><td align="left">Revision 2.1</td><td align="left">1&nbsp;Feb&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Rewrote the example code of <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper" title="Chapter 2. The Power Of Introspection"><i>The Power Of Introspection</i></a> to use <tt>getattr</tt> instead of <tt>exec</tt> and <tt>eval</tt>, and rewrote explanatory text to match.</li><li>Added example of list operators in <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.list" title="1.8. Lists 101"><i>Lists 101</i></a>.</li><li>Added links to relevant sections in the summary lists at the end of each chapter (<a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.summary" title="1.15. Summary"><i>Summary</i></a> and <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.summary" title="2.9. Summary"><i>Summary</i></a>).</li></ul> </td></tr><tr><td align="left">Revision 2.0</td><td align="left">31&nbsp;Jan&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Split <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.specialmethods" title="3.6. Special class methods"><i>Special class methods</i></a> into three sections, <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.userdict" title="3.5. UserDict: a wrapper class"><i><tt>UserDict</tt>: a wrapper class</i></a>, <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.specialmethods" title="3.6. Special class methods"><i>Special class methods</i></a>, and <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.morespecial" title="3.7. Advanced special class methods"><i>Advanced special class methods</i></a>.</li><li>Changed notes on <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.create" title="3.4. Instantiating classes">garbage collection</a> to point out that Python 2.0 and later can handle circular references without additional coding.</li><li>Fixed UNIX downloads to include all relevant files.</li></ul> </td></tr><tr><td align="left">Revision 1.9</td><td align="left">15&nbsp;Jan&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Removed introduction to <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper" title="Chapter 1. Getting To Know Python"><i>Getting To Know Python</i></a>.</li><li>Removed introduction to <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper" title="Chapter 2. The Power Of Introspection"><i>The Power Of Introspection</i></a>.</li><li>Removed introduction to <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo" title="Chapter 3. An Object-Oriented Framework"><i>An Object-Oriented Framework</i></a>.</li><li>Edited text ruthlessly.  I tend to ramble.</li></ul> </td></tr><tr><td align="left">Revision 1.8</td><td align="left">12&nbsp;Jan&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Added more examples to <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.multiassign" title="1.11. Assigning multiple values at once"><i>Assigning multiple values at once</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.class" title="3.3. Defining classes"><i>Defining classes</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.create" title="3.4. Instantiating classes"><i>Instantiating classes</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.specialmethods" title="3.6. Special class methods"><i>Special class methods</i></a>.</li><li>More minor stylesheet tweaks, including adding titles to <tt>link</tt> tags, which, if your browser is cool enough, will display a description of the link target in a cute little tooltip.</li></ul> </td></tr><tr><td align="left">Revision 1.71</td><td align="left">3&nbsp;Jan&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Made several modifications to stylesheets to improve browser compatibility.</li></ul> </td></tr><tr><td align="left">Revision 1.7</td><td align="left">2&nbsp;Jan&nbsp;2001</td></tr><tr><td align="left" colspan="2"> <ul><li>Added introduction to <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper" title="Chapter 1. Getting To Know Python"><i>Getting To Know Python</i></a>.</li><li>Added introduction to <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper" title="Chapter 2. The Power Of Introspection"><i>The Power Of Introspection</i></a>.</li><li>Added review section to <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo" title="Chapter 3. An Object-Oriented Framework"><i>An Object-Oriented Framework</i></a> [later removed]</li><li>Added <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.private" title="3.9. Private functions"><i>Private functions</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.for" title="3.12. for loops"><i><tt>for</tt> loops</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.multiassign" title="1.11. Assigning multiple values at once"><i>Assigning multiple values at once</i></a>.</li><li>Wrote scripts to convert book to new output formats: one single HTML file, PDF, Microsoft Word 97, and plain text.</li><li>Registered the <tt>diveintopython.org</tt> domain and moved the book there, along with links to download the book in all available output formats for offline reading.</li><li>Modified the XSL stylesheets to change the header and footer navigation that displays on each page.  The top of each page is branded with the domain name and book version, followed by a breadcrumb trail to jump back to the chapter table of contents, the main table of contents, or the site home page.</li></ul> </td></tr><tr><td align="left">Revision 1.6</td><td align="left">11&nbsp;Dec&nbsp;2000</td></tr><tr><td align="left" colspan="2"> <ul><li>Added <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.alltogether" title="2.8. Putting it all together"><i>Putting it all together</i></a>.</li><li>Finished <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper" title="Chapter 2. The Power Of Introspection"><i>The Power Of Introspection</i></a> with <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.summary" title="2.9. Summary"><i>Summary</i></a>.</li><li>Started <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo" title="Chapter 3. An Object-Oriented Framework"><i>An Object-Oriented Framework</i></a> with <a href="http://kr.diveintopython.net/html/chapter3.htm#fileinfo.divein" title="3.1. Diving in"><i>Diving in</i></a>.</li></ul> </td></tr><tr><td align="left">Revision 1.5</td><td align="left">22&nbsp;Nov&nbsp;2000</td></tr><tr><td align="left" colspan="2"> <ul><li>Added <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.andor" title="2.6. The peculiar nature of and and or"><i>The peculiar nature of <tt>and</tt> and <tt>or</tt></i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.lambda" title="2.7. Using lambda functions"><i>Using <tt>lambda</tt> functions</i></a>.</li><li>Added <a href="http://kr.diveintopython.net/html/appendix.htm#abstracts" title="Appendix B. A 5-minute review">appendix that lists section abstracts</a>.</li><li>Added <a href="http://kr.diveintopython.net/html/appendix.htm#tips" title="Appendix C. Tips and tricks">appendix that lists tips</a>.</li><li>Added <a href="http://kr.diveintopython.net/html/appendix.htm#examples" title="Appendix D. List of examples">appendix that lists examples</a>.</li><li>Added <a href="http://kr.diveintopython.net/html/appendix.htm#revhistory" title="Appendix E. Revision history">appendix that lists revision history</a>.</li><li>Expanded example of mapping lists in <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.map" title="1.13. Mapping lists"><i>Mapping lists</i></a>.</li><li>Encapsulated several more common phrases into entities.</li><li>Upgraded to version 1.25 of the DocBook XSL stylesheets.</li></ul> </td></tr><tr><td align="left">Revision 1.4</td><td align="left">14&nbsp;Nov&nbsp;2000</td></tr><tr><td align="left" colspan="2"> <ul><li>Added <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.filter" title="2.5. Filtering lists"><i>Filtering lists</i></a>.</li><li>Added <tt>dir</tt> documentation to <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.builtin" title="2.3. type, str, dir, and other built-in functions"><i><tt>type</tt>, <tt>str</tt>, <tt>dir</tt>, and other built-in functions</i></a>.</li><li>Added <tt>in</tt> example in <a href="http://kr.diveintopython.net/html/chapter1.htm#odbchelper.tuple" title="1.9. Tuples 101"><i>Tuples 101</i></a>.</li><li>Added additional note about <tt>if</tt> <tt>__name__</tt> trick under MacPython.</li><li>Switched to the SAXON XSLT processor from Michael Kay of ICL.</li><li>Upgraded to version 1.24 of the DocBook XSL stylesheets.</li><li>Added db-html processing instructions with explicit filenames of each chapter and section, to allow deep links to content even if I add or re-arrange sections later.</li><li>Made several common phrases into entities for easier reuse.</li><li>Changed several <tt>literal</tt> tags to <tt>constant</tt>.</li></ul> </td></tr><tr><td align="left">Revision 1.3</td><td align="left">9&nbsp;Nov&nbsp;2000</td></tr><tr><td align="left" colspan="2"> <ul><li>Added section on dynamic code execution.</li><li>Added links to relevant section/example wherever I refer to previously covered concepts.</li><li>Expanded <a href="http://kr.diveintopython.net/html/chapter2.htm#apihelper.divein" title="2.1. Diving in">introduction of chapter 2</a> to explain what the function actually does.</li><li>Explicitly placed example code under the GNU General Public License and added <a href="http://kr.diveintopython.net/html/appendix.htm#gpl" title="Appendix H. GNU General Public License">appendix</a> to display license.</li><li>Changed links to licenses to use <tt>xref</tt> tags, now that I know how to use them.</li></ul> </td></tr><tr><td align="left">Revision 1.2</td><td align="left">6&nbsp;Nov&nbsp;2000</td></tr><tr><td align="left" colspan="2"> <ul><li>Added first four sections of chapter 2.</li><li>Tightened up preface even more, and added link to Mac OS version of Python.</li><li>Filled out examples in "Mapping lists" and "Joining strings" to show logical progression.</li><li>Added output in chapter 1 summary.</li></ul> </td></tr><tr><td align="left">Revision 1.1</td><td align="left">31&nbsp;Oct&nbsp;2000</td></tr><tr><td align="left" colspan="2"> <ul><li>Finished chapter 1 with sections on mapping and joining, and a chapter summary.</li><li>Toned down the preface, added links to introductions for non-programmers.</li><li>Fixed several typos.</li></ul> </td></tr><tr><td align="left">Revision 1.0</td><td align="left">30&nbsp;Oct&nbsp;2000</td></tr><tr><td align="left" colspan="2"> <ul><li>Initial publication</li></ul> </td></tr></table><h2><a name="about"></a>Appendix F. About the book</h2><p>This book was written in <a href="http://kr.diveintopython.net/docbook/" title="DocBook home page">DocBook XML</a> using <a href="http://kr.diveintopython.net/software/emacs/" title="The One True Editor">Emacs</a>, and converted to HTML using <a href="http://kr.diveintopython.net/mhkay/saxon/" title="SAXON home page">the SAXON XSLT processor from Michael Kay of ICL</a> with a customized version of <a href="http://kr.diveintopython.net/xsl/" title="DocBook XSL home page">Norman Walsh's XSL stylesheets</a>.  From there, it was converted to PDF using <a href="http://kr.diveintopython.net/htmldoc/" title="HTMLDOC home page">HTMLDoc</a>, and to plain text using <a href="http://kr.diveintopython.net/~aito/w3m/eng/" title="w3m home page">w3m</a>.  Program listings and examples were colorized using an updated version of Just van Rossum's <tt>pyfontify.py</tt>, which is included in the example scripts.</p><p>If you're interested in learning more about DocBook for technical writing, you can download the XML source for this book (<a href="http://kr.diveintopython.net/download/diveintopython-xml-3.4-1.zip" title="Download XML source for Windows">Windows</a>, <a href="http://kr.diveintopython.net/download/diveintopython-xml-3.4-1.tgz" title="Download XML source for UNIX">UNIX</a>, <a href="http://kr.diveintopython.net/download/diveintopython-xml-3.4-1.hqx" title="Download XML source for MacOS">Mac OS</a>), which also includes the customized XSL stylesheets.  You should also read the canonical book, <a href="http://kr.diveintopython.net/" title="Read DocBook: TDG online"><i>DocBook: The Definitive Guide</i></a>.  If you're going to do any serious writing in DocBook, I would recommend subscribing to the <a href="http://kr.diveintopython.net/archives/" title="Subscribe to DocBook and/or DocBook-Apps">DocBook mailing lists</a>.</p> <hr /> <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr> <td valign="top" width="35%"><a href="http://kr.diveintopython.net/html/chapter5.htm"><<&nbsp;靈 5 � 傑� �맑�</a></td> <td align="center" valign="top" width="30%"><a href="http://kr.diveintopython.net/html/index.htm">�    量</a></td> <td align="right" valign="top" width="35%"><a href="http://kr.diveintopython.net/html/gnufdl.htm">Gnu Free Document License&nbsp;>></a></td> </tr></table> <hr /> </body></html>
